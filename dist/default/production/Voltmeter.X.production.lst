

Microchip Technology PIC LITE Macro Assembler V1.35 build -356382666 
                                                                                               Mon Apr 18 15:31:10 2016

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	16F84A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	dabs	1,0x4E,2
    18  0000                     	;# 
    19  0001                     	;# 
    20  0002                     	;# 
    21  0003                     	;# 
    22  0004                     	;# 
    23  0005                     	;# 
    24  0006                     	;# 
    25  0008                     	;# 
    26  0009                     	;# 
    27  000A                     	;# 
    28  000B                     	;# 
    29  0081                     	;# 
    30  0085                     	;# 
    31  0086                     	;# 
    32  0088                     	;# 
    33  0089                     	;# 
    34  0000                     	;# 
    35  0001                     	;# 
    36  0002                     	;# 
    37  0003                     	;# 
    38  0004                     	;# 
    39  0005                     	;# 
    40  0006                     	;# 
    41  0008                     	;# 
    42  0009                     	;# 
    43  000A                     	;# 
    44  000B                     	;# 
    45  0081                     	;# 
    46  0085                     	;# 
    47  0086                     	;# 
    48  0088                     	;# 
    49  0089                     	;# 
    50  0000                     	;# 
    51  0001                     	;# 
    52  0002                     	;# 
    53  0003                     	;# 
    54  0004                     	;# 
    55  0005                     	;# 
    56  0006                     	;# 
    57  0008                     	;# 
    58  0009                     	;# 
    59  000A                     	;# 
    60  000B                     	;# 
    61  0081                     	;# 
    62  0085                     	;# 
    63  0086                     	;# 
    64  0088                     	;# 
    65  0089                     	;# 
    66  0029                     _RA1	set	41
    67  002A                     _RA2	set	42
    68  002B                     _RA3	set	43
    69  0030                     _RB0	set	48
    70  0031                     _RB1	set	49
    71  0032                     _RB2	set	50
    72  0033                     _RB3	set	51
    73  0034                     _RB4	set	52
    74  0035                     _RB5	set	53
    75  0036                     _RB6	set	54
    76  0085                     _TRISA	set	133
    77  0086                     _TRISB	set	134
    78                           
    79                           	psect	strings
    80  0001                     __pstrings:	
    81  0001                     stringtab:	
    82  0001                     __stringtab:	
    83                           
    84                           ;	String table - string pointers are 1 byte each
    85  0001  1BCF               	btfsc	btemp+1,7
    86  0002  280B               	ljmp	stringcode
    87  0003  1383               	bcf	3,7
    88  0004  184F               	btfsc	btemp+1,0
    89  0005  1783               	bsf	3,7
    90  0006  0800               	movf	0,w
    91  0007  0A84               	incf	4,f
    92  0008  1903               	skipnz
    93  0009  0ACF               	incf	btemp+1,f
    94  000A  0008               	return
    95  000B                     stringcode:	
    96  000B                     stringdir:	
    97  000B  3000               	movlw	high stringdir
    98  000C  008A               	movwf	10
    99  000D  0804               	movf	4,w
   100  000E  0A84               	incf	4,f
   101  000F  0782               	addwf	2,f
   102  0010                     __stringbase:	
   103  0010  3400               	retlw	0
   104  0011                     __end_of__stringtab:	
   105  0011                     STR_1:	
   106  0011  3456               	retlw	86	;'V'
   107  0012  346F               	retlw	111	;'o'
   108  0013  346C               	retlw	108	;'l'
   109  0014  3474               	retlw	116	;'t'
   110  0015  3461               	retlw	97	;'a'
   111  0016  3467               	retlw	103	;'g'
   112  0017  3465               	retlw	101	;'e'
   113  0018  343A               	retlw	58	;':'
   114  0019  3420               	retlw	32	;' '
   115  001A  3434               	retlw	52	;'4'
   116  001B  342E               	retlw	46	;'.'
   117  001C  3431               	retlw	49	;'1'
   118  001D  3431               	retlw	49	;'1'
   119  001E  3431               	retlw	49	;'1'
   120  001F  3400               	retlw	0
   121                           
   122                           ; #config settings
   123  0000                     
   124                           	psect	cinit
   125  03FE                     start_initialization:	
   126  03FE                     __initialization:	
   127  03FE                     end_of_initialization:	
   128                           ;End of C runtime variable initialization code
   129                           
   130  03FE                     __end_of__initialization:	
   131  03FE  0183               	clrf	3
   132  03FF  2AB4               	ljmp	_main	;jump to C main() function
   133                           
   134                           	psect	cstackCOMMON
   135  0000                     __pcstackCOMMON:	
   136  0000                     ??_Lcd_Port:	
   137                           
   138                           	psect	cstackBANK0
   139  000C                     __pcstackBANK0:	
   140                           ; 0 bytes @ 0x0
   141                           
   142  000C                     ?_Lcd_Init:	
   143  000C                     ?_Lcd_Clear:	
   144                           ; 0 bytes @ 0x0
   145                           
   146  000C                     ?_main:	
   147                           ; 0 bytes @ 0x0
   148                           
   149  000C                     ?_Lcd_Port:	
   150                           ; 0 bytes @ 0x0
   151                           
   152  000C                     ?_Lcd_Cmd:	
   153                           ; 0 bytes @ 0x0
   154                           
   155  000C                     ?_Lcd_Write_Char:	
   156                           ; 0 bytes @ 0x0
   157                           
   158  000C                     ?_readADC:	
   159                           ; 0 bytes @ 0x0
   160                           
   161  000C                     Lcd_Port@a:	
   162                           ; 2 bytes @ 0x0
   163                           
   164                           
   165                           ; 1 bytes @ 0x0
   166  000C                     	ds	1
   167  000D                     ??_Lcd_Cmd:	
   168  000D                     ??_Lcd_Write_Char:	
   169                           ; 0 bytes @ 0x1
   170                           
   171                           
   172                           ; 0 bytes @ 0x1
   173  000D                     	ds	1
   174  000E                     ??_readADC:	
   175  000E                     Lcd_Write_Char@temp:	
   176                           ; 0 bytes @ 0x2
   177                           
   178                           
   179                           ; 1 bytes @ 0x2
   180  000E                     	ds	1
   181  000F                     Lcd_Cmd@a:	
   182  000F                     Lcd_Write_Char@y:	
   183                           ; 1 bytes @ 0x3
   184                           
   185                           
   186                           ; 1 bytes @ 0x3
   187  000F                     	ds	1
   188  0010                     ??_Lcd_Init:	
   189  0010                     ??_Lcd_Clear:	
   190                           ; 0 bytes @ 0x4
   191                           
   192  0010                     ?_Lcd_Set_Cursor:	
   193                           ; 0 bytes @ 0x4
   194                           
   195  0010                     Lcd_Set_Cursor@b:	
   196                           ; 0 bytes @ 0x4
   197                           
   198  0010                     Lcd_Write_Char@a:	
   199                           ; 1 bytes @ 0x4
   200                           
   201  0010                     readADC@volt:	
   202                           ; 1 bytes @ 0x4
   203                           
   204                           
   205                           ; 2 bytes @ 0x4
   206  0010                     	ds	1
   207  0011                     ??_Lcd_Set_Cursor:	
   208  0011                     ?_Lcd_Write_String:	
   209                           ; 0 bytes @ 0x5
   210                           
   211  0011                     Lcd_Write_String@a:	
   212                           ; 0 bytes @ 0x5
   213                           
   214                           
   215                           ; 2 bytes @ 0x5
   216  0011                     	ds	1
   217  0012                     readADC@bits:	
   218                           
   219                           ; 1 bytes @ 0x6
   220  0012                     	ds	1
   221  0013                     ??_Lcd_Write_String:	
   222  0013                     readADC@rxData:	
   223                           ; 0 bytes @ 0x7
   224                           
   225  0013                     Lcd_Set_Cursor@a:	
   226                           ; 1 bytes @ 0x7
   227                           
   228                           
   229                           ; 1 bytes @ 0x7
   230  0013                     	ds	1
   231  0014                     Lcd_Set_Cursor@z:	
   232                           
   233                           ; 1 bytes @ 0x8
   234  0014                     	ds	1
   235  0015                     Lcd_Set_Cursor@y:	
   236                           
   237                           ; 1 bytes @ 0x9
   238  0015                     	ds	1
   239  0016                     Lcd_Set_Cursor@temp:	
   240  0016                     Lcd_Write_String@i:	
   241                           ; 1 bytes @ 0xA
   242                           
   243                           
   244                           ; 2 bytes @ 0xA
   245  0016                     	ds	2
   246  0018                     ??_main:	
   247                           
   248                           ; 0 bytes @ 0xC
   249  0018                     	ds	1
   250  0019                     main@voltage:	
   251                           
   252                           ; 2 bytes @ 0xD
   253  0019                     	ds	2
   254  001B                     main@string:	
   255                           
   256                           ; 1 bytes @ 0xF
   257  001B                     	ds	1
   258                           
   259                           	psect	maintext
   260  02B4                     __pmaintext:	
   261 ;;
   262 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   263 ;;
   264 ;; *************** function _main *****************
   265 ;; Defined at:
   266 ;;		line 14 in file "main.c"
   267 ;; Parameters:    Size  Location     Type
   268 ;;		None
   269 ;; Auto vars:     Size  Location     Type
   270 ;;  voltage         2   13[BANK0 ] unsigned int 
   271 ;;  string          1   15[BANK0 ] PTR unsigned char 
   272 ;;		 -> STR_1(15), 
   273 ;; Return value:  Size  Location     Type
   274 ;;		None               void
   275 ;; Registers used:
   276 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   277 ;; Tracked objects:
   278 ;;		On entry : B00/0
   279 ;;		On exit  : 0/0
   280 ;;		Unchanged: 0/0
   281 ;; Data sizes:     COMMON   BANK0
   282 ;;      Params:         0       0
   283 ;;      Locals:         0       3
   284 ;;      Temps:          0       1
   285 ;;      Totals:         0       4
   286 ;;Total ram usage:        4 bytes
   287 ;; Hardware stack levels required when called:    3
   288 ;; This function calls:
   289 ;;		_Lcd_Clear
   290 ;;		_Lcd_Init
   291 ;;		_Lcd_Set_Cursor
   292 ;;		_Lcd_Write_String
   293 ;;		_readADC
   294 ;; This function is called by:
   295 ;;		Startup code after reset
   296 ;; This function uses a non-reentrant model
   297 ;;
   298                           
   299                           
   300                           ;psect for function _main
   301  02B4                     _main:	
   302                           
   303                           ;main.c: 16: TRISA = 0xFF;
   304                           
   305                           ;incstack = 0
   306                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   307  02B4  30FF               	movlw	255
   308  02B5  1683               	bsf	3,5	;RP0=1, select bank1
   309  02B6  0085               	movwf	5	;volatile
   310                           
   311                           ;main.c: 17: TRISB = 0x00;
   312  02B7  0186               	clrf	6	;volatile
   313                           
   314                           ;main.c: 19: RB5 = 0;
   315  02B8  1283               	bcf	3,5	;RP0=0, select bank0
   316  02B9  1286               	bcf	6,5	;volatile
   317                           
   318                           ;main.c: 20: Lcd_Init();
   319  02BA  232E               	fcall	_Lcd_Init
   320                           
   321                           ;main.c: 21: Lcd_Clear();
   322  02BB  227B               	fcall	_Lcd_Clear
   323                           
   324                           ;main.c: 23: unsigned int voltage = readADC();
   325  02BC  23A4               	fcall	_readADC
   326  02BD  1283               	bcf	3,5	;RP0=0, select bank0
   327  02BE  080D               	movf	?_readADC+1,w
   328  02BF  009A               	movwf	main@voltage+1
   329  02C0  080C               	movf	?_readADC,w
   330  02C1  0099               	movwf	main@voltage
   331                           
   332                           ;main.c: 24: Lcd_Set_Cursor(1,1);
   333  02C2  0190               	clrf	Lcd_Set_Cursor@b
   334  02C3  0A90               	incf	Lcd_Set_Cursor@b,f
   335  02C4  3001               	movlw	1
   336  02C5  2362               	fcall	_Lcd_Set_Cursor
   337                           
   338                           ;main.c: 26: char *string = "Voltage: 4.111";
   339  02C6  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   340  02C7  1283               	bcf	3,5	;RP0=0, select bank0
   341  02C8  0098               	movwf	??_main
   342  02C9  0818               	movf	??_main,w
   343  02CA  009B               	movwf	main@string
   344                           
   345                           ;main.c: 27: Lcd_Write_String(string);
   346  02CB  081B               	movf	main@string,w
   347  02CC  0091               	movwf	Lcd_Write_String@a
   348  02CD  3000               	movlw	0
   349  02CE  1D03               	btfss	3,2
   350  02CF  3080               	movlw	128
   351  02D0  0092               	movwf	Lcd_Write_String@a+1
   352  02D1  22FD               	fcall	_Lcd_Write_String
   353  02D2  2800               	ljmp	start
   354  02D3                     __end_of_main:	
   355                           
   356                           	psect	text1
   357  03A4                     __ptext1:	
   358 ;; *************** function _readADC *****************
   359 ;; Defined at:
   360 ;;		line 6 in file "adc.c"
   361 ;; Parameters:    Size  Location     Type
   362 ;;		None
   363 ;; Auto vars:     Size  Location     Type
   364 ;;  volt            2    4[BANK0 ] unsigned int 
   365 ;;  rxData          1    7[BANK0 ] unsigned char 
   366 ;;  bits            1    6[BANK0 ] unsigned char 
   367 ;; Return value:  Size  Location     Type
   368 ;;                  2    0[BANK0 ] unsigned int 
   369 ;; Registers used:
   370 ;;		wreg, status,2, status,0
   371 ;; Tracked objects:
   372 ;;		On entry : 0/0
   373 ;;		On exit  : 0/0
   374 ;;		Unchanged: 0/0
   375 ;; Data sizes:     COMMON   BANK0
   376 ;;      Params:         0       2
   377 ;;      Locals:         0       4
   378 ;;      Temps:          0       2
   379 ;;      Totals:         0       8
   380 ;;Total ram usage:        8 bytes
   381 ;; Hardware stack levels used:    1
   382 ;; This function calls:
   383 ;;		Nothing
   384 ;; This function is called by:
   385 ;;		_main
   386 ;; This function uses a non-reentrant model
   387 ;;
   388                           
   389                           
   390                           ;psect for function _readADC
   391  03A4                     _readADC:	
   392                           
   393                           ;adc.c: 8: unsigned char bits;
   394                           ;adc.c: 9: unsigned char rxData = 0;
   395                           
   396                           ;incstack = 0
   397                           ; Regs used in _readADC: [wreg+status,2+status,0]
   398  03A4  1283               	bcf	3,5	;RP0=0, select bank0
   399  03A5  0193               	clrf	readADC@rxData
   400                           
   401                           ;adc.c: 10: unsigned int volt = 0;
   402  03A6  0190               	clrf	readADC@volt
   403  03A7  0191               	clrf	readADC@volt+1
   404                           
   405                           ;adc.c: 12: RA3 = 0;
   406  03A8  1185               	bcf	5,3	;volatile
   407                           
   408                           ;adc.c: 15: for (bits = 0; bits < 3; bits++)
   409  03A9  0192               	clrf	readADC@bits
   410  03AA  3003               	movlw	3
   411  03AB  0212               	subwf	readADC@bits,w
   412  03AC  1803               	btfsc	3,0
   413  03AD  2BC2               	goto	l800
   414  03AE                     l790:	
   415                           
   416                           ;adc.c: 16: {
   417                           ;adc.c: 17: _delay((unsigned long)((100)*(4000000/4000000.0)));
   418  03AE  3021               	movlw	33
   419  03AF  008E               	movwf	??_readADC
   420  03B0                     u357:	
   421  03B0  0B8E               	decfsz	??_readADC,f
   422  03B1  2BB0               	goto	u357
   423                           
   424                           ;adc.c: 18: RA1 = 1;
   425  03B2  1283               	bcf	3,5	;RP0=0, select bank0
   426  03B3  1485               	bsf	5,1	;volatile
   427                           
   428                           ;adc.c: 19: _delay((unsigned long)((100)*(4000000/4000000.0)));
   429  03B4  3021               	movlw	33
   430  03B5  008E               	movwf	??_readADC
   431  03B6                     u367:	
   432  03B6  0B8E               	decfsz	??_readADC,f
   433  03B7  2BB6               	goto	u367
   434                           
   435                           ;adc.c: 20: RA1 = 0;
   436  03B8  1283               	bcf	3,5	;RP0=0, select bank0
   437  03B9  1085               	bcf	5,1	;volatile
   438  03BA  3001               	movlw	1
   439  03BB  008E               	movwf	??_readADC
   440  03BC  080E               	movf	??_readADC,w
   441  03BD  0792               	addwf	readADC@bits,f
   442  03BE  3003               	movlw	3
   443  03BF  0212               	subwf	readADC@bits,w
   444  03C0  1C03               	skipc
   445  03C1  2BAE               	goto	l790
   446  03C2                     l800:	
   447                           
   448                           ;adc.c: 21: }
   449                           ;adc.c: 24: for (bits = 0; bits < 8; bits++)
   450  03C2  0192               	clrf	readADC@bits
   451  03C3  3008               	movlw	8
   452  03C4  0212               	subwf	readADC@bits,w
   453  03C5  1803               	btfsc	3,0
   454  03C6  2BEB               	goto	l33
   455  03C7                     l806:	
   456                           
   457                           ;adc.c: 25: {
   458                           ;adc.c: 27: _delay((unsigned long)((100)*(4000000/4000000.0)));
   459  03C7  3021               	movlw	33
   460  03C8  008E               	movwf	??_readADC
   461  03C9                     u377:	
   462  03C9  0B8E               	decfsz	??_readADC,f
   463  03CA  2BC9               	goto	u377
   464                           
   465                           ;adc.c: 28: RA1 = 1;
   466  03CB  1283               	bcf	3,5	;RP0=0, select bank0
   467  03CC  1485               	bsf	5,1	;volatile
   468                           
   469                           ;adc.c: 31: rxData = rxData << 1;
   470  03CD  0813               	movf	readADC@rxData,w
   471  03CE  008E               	movwf	??_readADC
   472  03CF  070E               	addwf	??_readADC,w
   473  03D0  008F               	movwf	??_readADC+1
   474  03D1  080F               	movf	??_readADC+1,w
   475  03D2  0093               	movwf	readADC@rxData
   476                           
   477                           ;adc.c: 34: if(RA2 == 1)
   478  03D3  1D05               	btfss	5,2	;volatile
   479  03D4  2BD8               	goto	l816
   480                           
   481                           ;adc.c: 35: rxData = rxData | 0x01;
   482  03D5  0813               	movf	readADC@rxData,w
   483  03D6  3801               	iorlw	1
   484  03D7  2BDA               	goto	L1
   485  03D8                     l816:	
   486                           
   487                           ;adc.c: 36: else
   488                           ;adc.c: 37: rxData = rxData & 0xfe;
   489  03D8  0813               	movf	readADC@rxData,w
   490  03D9  39FE               	andlw	254
   491  03DA                     L1:	
   492  03DA  008E               	movwf	??_readADC
   493  03DB  080E               	movf	??_readADC,w
   494  03DC  0093               	movwf	readADC@rxData
   495                           
   496                           ;adc.c: 39: _delay((unsigned long)((100)*(4000000/4000000.0)));
   497  03DD  3021               	movlw	33
   498  03DE  008E               	movwf	??_readADC
   499  03DF                     u387:	
   500  03DF  0B8E               	decfsz	??_readADC,f
   501  03E0  2BDF               	goto	u387
   502                           
   503                           ;adc.c: 40: RA1 = 0;
   504  03E1  1283               	bcf	3,5	;RP0=0, select bank0
   505  03E2  1085               	bcf	5,1	;volatile
   506  03E3  3001               	movlw	1
   507  03E4  008E               	movwf	??_readADC
   508  03E5  080E               	movf	??_readADC,w
   509  03E6  0792               	addwf	readADC@bits,f
   510  03E7  3008               	movlw	8
   511  03E8  0212               	subwf	readADC@bits,w
   512  03E9  1C03               	skipc
   513  03EA  2BC7               	goto	l806
   514  03EB                     l33:	
   515                           
   516                           ;adc.c: 41: }
   517                           ;adc.c: 44: RA3 = 1;
   518  03EB  1585               	bsf	5,3	;volatile
   519                           
   520                           ;adc.c: 47: volt = (rxData << 2);
   521  03EC  0813               	movf	readADC@rxData,w
   522  03ED  008E               	movwf	??_readADC
   523  03EE  018F               	clrf	??_readADC+1
   524  03EF  1003               	clrc
   525  03F0  0D8E               	rlf	??_readADC,f
   526  03F1  0D8F               	rlf	??_readADC+1,f
   527  03F2  1003               	clrc
   528  03F3  0D8E               	rlf	??_readADC,f
   529  03F4  0D8F               	rlf	??_readADC+1,f
   530  03F5  080E               	movf	??_readADC,w
   531  03F6  0090               	movwf	readADC@volt
   532  03F7  080F               	movf	??_readADC+1,w
   533  03F8  0091               	movwf	readADC@volt+1
   534                           
   535                           ;adc.c: 48: return volt;
   536  03F9  0811               	movf	readADC@volt+1,w
   537  03FA  008D               	movwf	?_readADC+1
   538  03FB  0810               	movf	readADC@volt,w
   539  03FC  008C               	movwf	?_readADC
   540  03FD  0008               	return
   541  03FE                     __end_of_readADC:	
   542                           
   543                           	psect	text2
   544  02FD                     __ptext2:	
   545 ;; *************** function _Lcd_Write_String *****************
   546 ;; Defined at:
   547 ;;		line 110 in file "lcd.c"
   548 ;; Parameters:    Size  Location     Type
   549 ;;  a               2    5[BANK0 ] PTR unsigned char 
   550 ;;		 -> Lcd_Write_Int@temp(16), STR_1(15), 
   551 ;; Auto vars:     Size  Location     Type
   552 ;;  i               2   10[BANK0 ] int 
   553 ;; Return value:  Size  Location     Type
   554 ;;		None               void
   555 ;; Registers used:
   556 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   557 ;; Tracked objects:
   558 ;;		On entry : 0/0
   559 ;;		On exit  : 0/0
   560 ;;		Unchanged: 0/0
   561 ;; Data sizes:     COMMON   BANK0
   562 ;;      Params:         0       2
   563 ;;      Locals:         0       2
   564 ;;      Temps:          0       3
   565 ;;      Totals:         0       7
   566 ;;Total ram usage:        7 bytes
   567 ;; Hardware stack levels used:    1
   568 ;; Hardware stack levels required when called:    2
   569 ;; This function calls:
   570 ;;		_Lcd_Write_Char
   571 ;; This function is called by:
   572 ;;		_main
   573 ;;		_Lcd_Write_Int
   574 ;; This function uses a non-reentrant model
   575 ;;
   576                           
   577                           
   578                           ;psect for function _Lcd_Write_String
   579  02FD                     _Lcd_Write_String:	
   580                           
   581                           ;lcd.c: 112: int i;
   582                           ;lcd.c: 113: for(i=0;a[i]!='\0';i++)
   583                           
   584                           ;incstack = 0
   585                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   586  02FD  1283               	bcf	3,5	;RP0=0, select bank0
   587  02FE  0196               	clrf	Lcd_Write_String@i
   588  02FF  0197               	clrf	Lcd_Write_String@i+1
   589  0300                     l858:	
   590  0300  0816               	movf	Lcd_Write_String@i,w
   591  0301  0711               	addwf	Lcd_Write_String@a,w
   592  0302  0094               	movwf	??_Lcd_Write_String+1
   593  0303  0812               	movf	Lcd_Write_String@a+1,w
   594  0304  0093               	movwf	??_Lcd_Write_String
   595  0305  1803               	skipnc
   596  0306  0A93               	incf	??_Lcd_Write_String,f
   597  0307  1B96               	btfsc	Lcd_Write_String@i,7
   598  0308  0393               	decf	??_Lcd_Write_String,f
   599  0309  1283               	bcf	3,5	;RP0=0, select bank0
   600  030A  0813               	movf	??_Lcd_Write_String,w
   601  030B  0095               	movwf	??_Lcd_Write_String+2
   602  030C  0815               	movf	??_Lcd_Write_String+2,w
   603  030D  00CF               	movwf	79
   604  030E  0814               	movf	??_Lcd_Write_String+1,w
   605  030F  0084               	movwf	4
   606  0310  2001               	fcall	stringtab
   607  0311  3A00               	xorlw	0
   608  0312  1903               	btfsc	3,2
   609  0313  0008               	return
   610                           
   611                           ;lcd.c: 114: {
   612                           ;lcd.c: 115: Lcd_Write_Char(a[i]);
   613  0314  0816               	movf	Lcd_Write_String@i,w
   614  0315  0711               	addwf	Lcd_Write_String@a,w
   615  0316  0094               	movwf	??_Lcd_Write_String+1
   616  0317  0812               	movf	Lcd_Write_String@a+1,w
   617  0318  0093               	movwf	??_Lcd_Write_String
   618  0319  1803               	skipnc
   619  031A  0A93               	incf	??_Lcd_Write_String,f
   620  031B  1B96               	btfsc	Lcd_Write_String@i,7
   621  031C  0393               	decf	??_Lcd_Write_String,f
   622  031D  1283               	bcf	3,5	;RP0=0, select bank0
   623  031E  0813               	movf	??_Lcd_Write_String,w
   624  031F  0095               	movwf	??_Lcd_Write_String+2
   625  0320  0815               	movf	??_Lcd_Write_String+2,w
   626  0321  00CF               	movwf	79
   627  0322  0814               	movf	??_Lcd_Write_String+1,w
   628  0323  0084               	movwf	4
   629  0324  2001               	fcall	stringtab
   630  0325  22D3               	fcall	_Lcd_Write_Char
   631  0326  3001               	movlw	1
   632  0327  1283               	bcf	3,5	;RP0=0, select bank0
   633  0328  0796               	addwf	Lcd_Write_String@i,f
   634  0329  1803               	skipnc
   635  032A  0A97               	incf	Lcd_Write_String@i+1,f
   636  032B  3000               	movlw	0
   637  032C  0797               	addwf	Lcd_Write_String@i+1,f
   638  032D  2B00               	goto	l858
   639  032E                     __end_of_Lcd_Write_String:	
   640                           
   641                           	psect	text3
   642  02D3                     __ptext3:	
   643 ;; *************** function _Lcd_Write_Char *****************
   644 ;; Defined at:
   645 ;;		line 93 in file "lcd.c"
   646 ;; Parameters:    Size  Location     Type
   647 ;;  a               1    wreg     unsigned char 
   648 ;; Auto vars:     Size  Location     Type
   649 ;;  a               1    4[BANK0 ] unsigned char 
   650 ;;  y               1    3[BANK0 ] unsigned char 
   651 ;;  temp            1    2[BANK0 ] unsigned char 
   652 ;; Return value:  Size  Location     Type
   653 ;;		None               void
   654 ;; Registers used:
   655 ;;		wreg, status,2, status,0, pclath, cstack
   656 ;; Tracked objects:
   657 ;;		On entry : 0/0
   658 ;;		On exit  : 0/0
   659 ;;		Unchanged: 0/0
   660 ;; Data sizes:     COMMON   BANK0
   661 ;;      Params:         0       0
   662 ;;      Locals:         0       3
   663 ;;      Temps:          0       1
   664 ;;      Totals:         0       4
   665 ;;Total ram usage:        4 bytes
   666 ;; Hardware stack levels used:    1
   667 ;; Hardware stack levels required when called:    1
   668 ;; This function calls:
   669 ;;		_Lcd_Port
   670 ;; This function is called by:
   671 ;;		_Lcd_Write_String
   672 ;; This function uses a non-reentrant model
   673 ;;
   674                           
   675                           
   676                           ;psect for function _Lcd_Write_Char
   677  02D3                     _Lcd_Write_Char:	
   678                           
   679                           ;incstack = 0
   680                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
   681                           ;Lcd_Write_Char@a stored from wreg
   682  02D3  1283               	bcf	3,5	;RP0=0, select bank0
   683  02D4  0090               	movwf	Lcd_Write_Char@a
   684                           
   685                           ;lcd.c: 95: char temp,y;
   686                           ;lcd.c: 96: temp = a&0x0F;
   687  02D5  0810               	movf	Lcd_Write_Char@a,w
   688  02D6  390F               	andlw	15
   689  02D7  008D               	movwf	??_Lcd_Write_Char
   690  02D8  080D               	movf	??_Lcd_Write_Char,w
   691  02D9  008E               	movwf	Lcd_Write_Char@temp
   692                           
   693                           ;lcd.c: 97: y = a&0xF0;
   694  02DA  0810               	movf	Lcd_Write_Char@a,w
   695  02DB  39F0               	andlw	240
   696  02DC  008D               	movwf	??_Lcd_Write_Char
   697  02DD  080D               	movf	??_Lcd_Write_Char,w
   698  02DE  008F               	movwf	Lcd_Write_Char@y
   699                           
   700                           ;lcd.c: 98: RB4 = 1;
   701  02DF  1606               	bsf	6,4	;volatile
   702                           
   703                           ;lcd.c: 99: Lcd_Port(y>>4);
   704  02E0  080F               	movf	Lcd_Write_Char@y,w
   705  02E1  008D               	movwf	??_Lcd_Write_Char
   706  02E2  3004               	movlw	4
   707  02E3                     u225:	
   708  02E3  1003               	clrc
   709  02E4  0C8D               	rrf	??_Lcd_Write_Char,f
   710  02E5  3EFF               	addlw	-1
   711  02E6  1D03               	skipz
   712  02E7  2AE3               	goto	u225
   713  02E8  080D               	movf	??_Lcd_Write_Char,w
   714  02E9  229D               	fcall	_Lcd_Port
   715                           
   716                           ;lcd.c: 100: RB6 = 1;
   717  02EA  1283               	bcf	3,5	;RP0=0, select bank0
   718  02EB  1706               	bsf	6,6	;volatile
   719                           
   720                           ;lcd.c: 101: _delay((unsigned long)((40)*(4000000/4000000.0)));
   721  02EC  300D               	movlw	13
   722  02ED  008D               	movwf	??_Lcd_Write_Char
   723  02EE                     u397:	
   724  02EE  0B8D               	decfsz	??_Lcd_Write_Char,f
   725  02EF  2AEE               	goto	u397
   726                           
   727                           ;lcd.c: 102: RB6 = 0;
   728  02F0  1283               	bcf	3,5	;RP0=0, select bank0
   729  02F1  1306               	bcf	6,6	;volatile
   730                           
   731                           ;lcd.c: 103: Lcd_Port(temp);
   732  02F2  080E               	movf	Lcd_Write_Char@temp,w
   733  02F3  229D               	fcall	_Lcd_Port
   734                           
   735                           ;lcd.c: 104: RB6 = 1;
   736  02F4  1283               	bcf	3,5	;RP0=0, select bank0
   737  02F5  1706               	bsf	6,6	;volatile
   738                           
   739                           ;lcd.c: 105: _delay((unsigned long)((40)*(4000000/4000000.0)));
   740  02F6  300D               	movlw	13
   741  02F7  008D               	movwf	??_Lcd_Write_Char
   742  02F8                     u407:	
   743  02F8  0B8D               	decfsz	??_Lcd_Write_Char,f
   744  02F9  2AF8               	goto	u407
   745                           
   746                           ;lcd.c: 106: RB6 = 0;
   747  02FA  1283               	bcf	3,5	;RP0=0, select bank0
   748  02FB  1306               	bcf	6,6	;volatile
   749  02FC  0008               	return
   750  02FD                     __end_of_Lcd_Write_Char:	
   751                           
   752                           	psect	text4
   753  0362                     __ptext4:	
   754 ;; *************** function _Lcd_Set_Cursor *****************
   755 ;; Defined at:
   756 ;;		line 51 in file "lcd.c"
   757 ;; Parameters:    Size  Location     Type
   758 ;;  a               1    wreg     unsigned char 
   759 ;;  b               1    4[BANK0 ] unsigned char 
   760 ;; Auto vars:     Size  Location     Type
   761 ;;  a               1    7[BANK0 ] unsigned char 
   762 ;;  temp            1   10[BANK0 ] unsigned char 
   763 ;;  y               1    9[BANK0 ] unsigned char 
   764 ;;  z               1    8[BANK0 ] unsigned char 
   765 ;; Return value:  Size  Location     Type
   766 ;;		None               void
   767 ;; Registers used:
   768 ;;		wreg, status,2, status,0, pclath, cstack
   769 ;; Tracked objects:
   770 ;;		On entry : 0/0
   771 ;;		On exit  : 0/0
   772 ;;		Unchanged: 0/0
   773 ;; Data sizes:     COMMON   BANK0
   774 ;;      Params:         0       1
   775 ;;      Locals:         0       4
   776 ;;      Temps:          0       2
   777 ;;      Totals:         0       7
   778 ;;Total ram usage:        7 bytes
   779 ;; Hardware stack levels used:    1
   780 ;; Hardware stack levels required when called:    2
   781 ;; This function calls:
   782 ;;		_Lcd_Cmd
   783 ;; This function is called by:
   784 ;;		_main
   785 ;; This function uses a non-reentrant model
   786 ;;
   787                           
   788                           
   789                           ;psect for function _Lcd_Set_Cursor
   790  0362                     _Lcd_Set_Cursor:	
   791                           
   792                           ;incstack = 0
   793                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
   794                           ;Lcd_Set_Cursor@a stored from wreg
   795  0362  1283               	bcf	3,5	;RP0=0, select bank0
   796  0363  0093               	movwf	Lcd_Set_Cursor@a
   797                           
   798                           ;lcd.c: 53: char temp,z,y;
   799                           ;lcd.c: 54: if(a == 1)
   800  0364  0313               	decf	Lcd_Set_Cursor@a,w
   801  0365  1D03               	btfss	3,2
   802  0366  2B83               	goto	l842
   803                           
   804                           ;lcd.c: 55: {
   805                           ;lcd.c: 56: temp = (char) (0x80 + b - 1);
   806  0367  0810               	movf	Lcd_Set_Cursor@b,w
   807  0368  3E7F               	addlw	127
   808  0369  0091               	movwf	??_Lcd_Set_Cursor
   809  036A  0811               	movf	??_Lcd_Set_Cursor,w
   810  036B  0096               	movwf	Lcd_Set_Cursor@temp
   811                           
   812                           ;lcd.c: 57: z = temp>>4;
   813  036C  0816               	movf	Lcd_Set_Cursor@temp,w
   814  036D  0091               	movwf	??_Lcd_Set_Cursor
   815  036E  3004               	movlw	4
   816  036F                     u295:	
   817  036F  1003               	clrc
   818  0370  0C91               	rrf	??_Lcd_Set_Cursor,f
   819  0371  3EFF               	addlw	-1
   820  0372  1D03               	skipz
   821  0373  2B6F               	goto	u295
   822  0374  0811               	movf	??_Lcd_Set_Cursor,w
   823  0375  0092               	movwf	??_Lcd_Set_Cursor+1
   824  0376  0812               	movf	??_Lcd_Set_Cursor+1,w
   825  0377  0094               	movwf	Lcd_Set_Cursor@z
   826                           
   827                           ;lcd.c: 58: y = temp & 0x0F;
   828  0378  0816               	movf	Lcd_Set_Cursor@temp,w
   829  0379  390F               	andlw	15
   830  037A  0091               	movwf	??_Lcd_Set_Cursor
   831  037B  0811               	movf	??_Lcd_Set_Cursor,w
   832  037C  0095               	movwf	Lcd_Set_Cursor@y
   833                           
   834                           ;lcd.c: 59: Lcd_Cmd(z);
   835  037D  0814               	movf	Lcd_Set_Cursor@z,w
   836  037E  228A               	fcall	_Lcd_Cmd
   837                           
   838                           ;lcd.c: 60: Lcd_Cmd(y);
   839  037F  1283               	bcf	3,5	;RP0=0, select bank0
   840  0380  0815               	movf	Lcd_Set_Cursor@y,w
   841  0381  228A               	fcall	_Lcd_Cmd
   842                           
   843                           ;lcd.c: 61: }
   844  0382  0008               	return
   845  0383                     l842:	
   846                           
   847                           ;lcd.c: 62: else if(a == 2)
   848  0383  3002               	movlw	2
   849  0384  1283               	bcf	3,5	;RP0=0, select bank0
   850  0385  0613               	xorwf	Lcd_Set_Cursor@a,w
   851  0386  1D03               	btfss	3,2
   852  0387  0008               	return
   853                           
   854                           ;lcd.c: 63: {
   855                           ;lcd.c: 64: temp = 0xC0 + b - 1;
   856  0388  0810               	movf	Lcd_Set_Cursor@b,w
   857  0389  3EBF               	addlw	191
   858  038A  0091               	movwf	??_Lcd_Set_Cursor
   859  038B  0811               	movf	??_Lcd_Set_Cursor,w
   860  038C  0096               	movwf	Lcd_Set_Cursor@temp
   861                           
   862                           ;lcd.c: 65: z = temp>>4;
   863  038D  0816               	movf	Lcd_Set_Cursor@temp,w
   864  038E  0091               	movwf	??_Lcd_Set_Cursor
   865  038F  3004               	movlw	4
   866  0390                     u315:	
   867  0390  1003               	clrc
   868  0391  0C91               	rrf	??_Lcd_Set_Cursor,f
   869  0392  3EFF               	addlw	-1
   870  0393  1D03               	skipz
   871  0394  2B90               	goto	u315
   872  0395  0811               	movf	??_Lcd_Set_Cursor,w
   873  0396  0092               	movwf	??_Lcd_Set_Cursor+1
   874  0397  0812               	movf	??_Lcd_Set_Cursor+1,w
   875  0398  0094               	movwf	Lcd_Set_Cursor@z
   876                           
   877                           ;lcd.c: 66: y = temp & 0x0F;
   878  0399  0816               	movf	Lcd_Set_Cursor@temp,w
   879  039A  390F               	andlw	15
   880  039B  0091               	movwf	??_Lcd_Set_Cursor
   881  039C  0811               	movf	??_Lcd_Set_Cursor,w
   882  039D  0095               	movwf	Lcd_Set_Cursor@y
   883                           
   884                           ;lcd.c: 67: Lcd_Cmd(z);
   885  039E  0814               	movf	Lcd_Set_Cursor@z,w
   886  039F  228A               	fcall	_Lcd_Cmd
   887                           
   888                           ;lcd.c: 68: Lcd_Cmd(y);
   889  03A0  1283               	bcf	3,5	;RP0=0, select bank0
   890  03A1  0815               	movf	Lcd_Set_Cursor@y,w
   891  03A2  228A               	fcall	_Lcd_Cmd
   892  03A3  0008               	return
   893  03A4                     __end_of_Lcd_Set_Cursor:	
   894                           
   895                           	psect	text5
   896  032E                     __ptext5:	
   897 ;; *************** function _Lcd_Init *****************
   898 ;; Defined at:
   899 ;;		line 73 in file "lcd.c"
   900 ;; Parameters:    Size  Location     Type
   901 ;;		None
   902 ;; Auto vars:     Size  Location     Type
   903 ;;		None
   904 ;; Return value:  Size  Location     Type
   905 ;;		None               void
   906 ;; Registers used:
   907 ;;		wreg, status,2, status,0, pclath, cstack
   908 ;; Tracked objects:
   909 ;;		On entry : 0/0
   910 ;;		On exit  : 0/0
   911 ;;		Unchanged: 0/0
   912 ;; Data sizes:     COMMON   BANK0
   913 ;;      Params:         0       0
   914 ;;      Locals:         0       0
   915 ;;      Temps:          0       2
   916 ;;      Totals:         0       2
   917 ;;Total ram usage:        2 bytes
   918 ;; Hardware stack levels used:    1
   919 ;; Hardware stack levels required when called:    2
   920 ;; This function calls:
   921 ;;		_Lcd_Cmd
   922 ;;		_Lcd_Port
   923 ;; This function is called by:
   924 ;;		_main
   925 ;; This function uses a non-reentrant model
   926 ;;
   927                           
   928                           
   929                           ;psect for function _Lcd_Init
   930  032E                     _Lcd_Init:	
   931                           
   932                           ;lcd.c: 75: Lcd_Port(0x00);
   933                           
   934                           ;incstack = 0
   935                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
   936  032E  3000               	movlw	0
   937  032F  229D               	fcall	_Lcd_Port
   938                           
   939                           ;lcd.c: 76: _delay((unsigned long)((20)*(4000000/4000.0)));
   940  0330  301A               	movlw	26
   941  0331  1283               	bcf	3,5	;RP0=0, select bank0
   942  0332  0091               	movwf	??_Lcd_Init+1
   943  0333  30F8               	movlw	248
   944  0334  0090               	movwf	??_Lcd_Init
   945  0335                     u417:	
   946  0335  0B90               	decfsz	??_Lcd_Init,f
   947  0336  2B35               	goto	u417
   948  0337  0B91               	decfsz	??_Lcd_Init+1,f
   949  0338  2B35               	goto	u417
   950  0339  0000               	nop
   951                           
   952                           ;lcd.c: 77: Lcd_Cmd(0x03);
   953  033A  3003               	movlw	3
   954  033B  228A               	fcall	_Lcd_Cmd
   955                           
   956                           ;lcd.c: 78: _delay((unsigned long)((5)*(4000000/4000.0)));
   957  033C  3007               	movlw	7
   958  033D  1283               	bcf	3,5	;RP0=0, select bank0
   959  033E  0091               	movwf	??_Lcd_Init+1
   960  033F  307D               	movlw	125
   961  0340  0090               	movwf	??_Lcd_Init
   962  0341                     u427:	
   963  0341  0B90               	decfsz	??_Lcd_Init,f
   964  0342  2B41               	goto	u427
   965  0343  0B91               	decfsz	??_Lcd_Init+1,f
   966  0344  2B41               	goto	u427
   967                           
   968                           ;lcd.c: 79: Lcd_Cmd(0x03);
   969  0345  3003               	movlw	3
   970  0346  228A               	fcall	_Lcd_Cmd
   971                           
   972                           ;lcd.c: 80: _delay((unsigned long)((11)*(4000000/4000.0)));
   973  0347  300F               	movlw	15
   974  0348  1283               	bcf	3,5	;RP0=0, select bank0
   975  0349  0091               	movwf	??_Lcd_Init+1
   976  034A  3047               	movlw	71
   977  034B  0090               	movwf	??_Lcd_Init
   978  034C                     u437:	
   979  034C  0B90               	decfsz	??_Lcd_Init,f
   980  034D  2B4C               	goto	u437
   981  034E  0B91               	decfsz	??_Lcd_Init+1,f
   982  034F  2B4C               	goto	u437
   983  0350  2B51               	nop2
   984                           
   985                           ;lcd.c: 81: Lcd_Cmd(0x03);
   986  0351  3003               	movlw	3
   987  0352  228A               	fcall	_Lcd_Cmd
   988                           
   989                           ;lcd.c: 83: Lcd_Cmd(0x02);
   990  0353  3002               	movlw	2
   991  0354  228A               	fcall	_Lcd_Cmd
   992                           
   993                           ;lcd.c: 84: Lcd_Cmd(0x02);
   994  0355  3002               	movlw	2
   995  0356  228A               	fcall	_Lcd_Cmd
   996                           
   997                           ;lcd.c: 85: Lcd_Cmd(0x08);
   998  0357  3008               	movlw	8
   999  0358  228A               	fcall	_Lcd_Cmd
  1000                           
  1001                           ;lcd.c: 86: Lcd_Cmd(0x00);
  1002  0359  3000               	movlw	0
  1003  035A  228A               	fcall	_Lcd_Cmd
  1004                           
  1005                           ;lcd.c: 87: Lcd_Cmd(0x0C);
  1006  035B  300C               	movlw	12
  1007  035C  228A               	fcall	_Lcd_Cmd
  1008                           
  1009                           ;lcd.c: 88: Lcd_Cmd(0x00);
  1010  035D  3000               	movlw	0
  1011  035E  228A               	fcall	_Lcd_Cmd
  1012                           
  1013                           ;lcd.c: 89: Lcd_Cmd(0x06);
  1014  035F  3006               	movlw	6
  1015  0360  228A               	fcall	_Lcd_Cmd
  1016  0361  0008               	return
  1017  0362                     __end_of_Lcd_Init:	
  1018                           
  1019                           	psect	text6
  1020  027B                     __ptext6:	
  1021 ;; *************** function _Lcd_Clear *****************
  1022 ;; Defined at:
  1023 ;;		line 43 in file "lcd.c"
  1024 ;; Parameters:    Size  Location     Type
  1025 ;;		None
  1026 ;; Auto vars:     Size  Location     Type
  1027 ;;		None
  1028 ;; Return value:  Size  Location     Type
  1029 ;;		None               void
  1030 ;; Registers used:
  1031 ;;		wreg, status,2, status,0, pclath, cstack
  1032 ;; Tracked objects:
  1033 ;;		On entry : 0/0
  1034 ;;		On exit  : 0/0
  1035 ;;		Unchanged: 0/0
  1036 ;; Data sizes:     COMMON   BANK0
  1037 ;;      Params:         0       0
  1038 ;;      Locals:         0       0
  1039 ;;      Temps:          0       2
  1040 ;;      Totals:         0       2
  1041 ;;Total ram usage:        2 bytes
  1042 ;; Hardware stack levels used:    1
  1043 ;; Hardware stack levels required when called:    2
  1044 ;; This function calls:
  1045 ;;		_Lcd_Cmd
  1046 ;; This function is called by:
  1047 ;;		_main
  1048 ;; This function uses a non-reentrant model
  1049 ;;
  1050                           
  1051                           
  1052                           ;psect for function _Lcd_Clear
  1053  027B                     _Lcd_Clear:	
  1054                           
  1055                           ;lcd.c: 45: Lcd_Cmd(0x00);
  1056                           
  1057                           ;incstack = 0
  1058                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  1059  027B  3000               	movlw	0
  1060  027C  228A               	fcall	_Lcd_Cmd
  1061                           
  1062                           ;lcd.c: 46: Lcd_Cmd(0x01);
  1063  027D  3001               	movlw	1
  1064  027E  228A               	fcall	_Lcd_Cmd
  1065                           
  1066                           ;lcd.c: 47: _delay((unsigned long)((2)*(4000000/4000.0)));
  1067  027F  3003               	movlw	3
  1068  0280  1283               	bcf	3,5	;RP0=0, select bank0
  1069  0281  0091               	movwf	??_Lcd_Clear+1
  1070  0282  3097               	movlw	151
  1071  0283  0090               	movwf	??_Lcd_Clear
  1072  0284                     u447:	
  1073  0284  0B90               	decfsz	??_Lcd_Clear,f
  1074  0285  2A84               	goto	u447
  1075  0286  0B91               	decfsz	??_Lcd_Clear+1,f
  1076  0287  2A84               	goto	u447
  1077  0288  2A89               	nop2
  1078  0289  0008               	return
  1079  028A                     __end_of_Lcd_Clear:	
  1080                           
  1081                           	psect	text7
  1082  028A                     __ptext7:	
  1083 ;; *************** function _Lcd_Cmd *****************
  1084 ;; Defined at:
  1085 ;;		line 30 in file "lcd.c"
  1086 ;; Parameters:    Size  Location     Type
  1087 ;;  a               1    wreg     unsigned char 
  1088 ;; Auto vars:     Size  Location     Type
  1089 ;;  a               1    3[BANK0 ] unsigned char 
  1090 ;; Return value:  Size  Location     Type
  1091 ;;		None               void
  1092 ;; Registers used:
  1093 ;;		wreg, status,2, status,0, pclath, cstack
  1094 ;; Tracked objects:
  1095 ;;		On entry : 0/0
  1096 ;;		On exit  : 0/0
  1097 ;;		Unchanged: 0/0
  1098 ;; Data sizes:     COMMON   BANK0
  1099 ;;      Params:         0       0
  1100 ;;      Locals:         0       1
  1101 ;;      Temps:          0       2
  1102 ;;      Totals:         0       3
  1103 ;;Total ram usage:        3 bytes
  1104 ;; Hardware stack levels used:    1
  1105 ;; Hardware stack levels required when called:    1
  1106 ;; This function calls:
  1107 ;;		_Lcd_Port
  1108 ;; This function is called by:
  1109 ;;		_Lcd_Clear
  1110 ;;		_Lcd_Set_Cursor
  1111 ;;		_Lcd_Init
  1112 ;;		_Lcd_Shift_Right
  1113 ;;		_Lcd_Shift_Left
  1114 ;; This function uses a non-reentrant model
  1115 ;;
  1116                           
  1117                           
  1118                           ;psect for function _Lcd_Cmd
  1119  028A                     _Lcd_Cmd:	
  1120                           
  1121                           ;incstack = 0
  1122                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  1123                           ;Lcd_Cmd@a stored from wreg
  1124  028A  1283               	bcf	3,5	;RP0=0, select bank0
  1125  028B  008F               	movwf	Lcd_Cmd@a
  1126                           
  1127                           ;lcd.c: 33: RB4 = 0;
  1128  028C  1206               	bcf	6,4	;volatile
  1129                           
  1130                           ;lcd.c: 34: Lcd_Port(a);
  1131  028D  080F               	movf	Lcd_Cmd@a,w
  1132  028E  229D               	fcall	_Lcd_Port
  1133                           
  1134                           ;lcd.c: 37: RB6 = 1;
  1135  028F  1283               	bcf	3,5	;RP0=0, select bank0
  1136  0290  1706               	bsf	6,6	;volatile
  1137                           
  1138                           ;lcd.c: 38: _delay((unsigned long)((4)*(4000000/4000.0)));
  1139  0291  3006               	movlw	6
  1140  0292  008E               	movwf	??_Lcd_Cmd+1
  1141  0293  3030               	movlw	48
  1142  0294  008D               	movwf	??_Lcd_Cmd
  1143  0295                     u457:	
  1144  0295  0B8D               	decfsz	??_Lcd_Cmd,f
  1145  0296  2A95               	goto	u457
  1146  0297  0B8E               	decfsz	??_Lcd_Cmd+1,f
  1147  0298  2A95               	goto	u457
  1148  0299  0000               	nop
  1149                           
  1150                           ;lcd.c: 39: RB6 = 0;
  1151  029A  1283               	bcf	3,5	;RP0=0, select bank0
  1152  029B  1306               	bcf	6,6	;volatile
  1153  029C  0008               	return
  1154  029D                     __end_of_Lcd_Cmd:	
  1155                           
  1156                           	psect	text8
  1157  029D                     __ptext8:	
  1158 ;; *************** function _Lcd_Port *****************
  1159 ;; Defined at:
  1160 ;;		line 6 in file "lcd.c"
  1161 ;; Parameters:    Size  Location     Type
  1162 ;;  a               1    wreg     unsigned char 
  1163 ;; Auto vars:     Size  Location     Type
  1164 ;;  a               1    0[BANK0 ] unsigned char 
  1165 ;; Return value:  Size  Location     Type
  1166 ;;		None               void
  1167 ;; Registers used:
  1168 ;;		wreg
  1169 ;; Tracked objects:
  1170 ;;		On entry : 0/0
  1171 ;;		On exit  : 0/0
  1172 ;;		Unchanged: 0/0
  1173 ;; Data sizes:     COMMON   BANK0
  1174 ;;      Params:         0       0
  1175 ;;      Locals:         0       1
  1176 ;;      Temps:          0       0
  1177 ;;      Totals:         0       1
  1178 ;;Total ram usage:        1 bytes
  1179 ;; Hardware stack levels used:    1
  1180 ;; This function calls:
  1181 ;;		Nothing
  1182 ;; This function is called by:
  1183 ;;		_Lcd_Cmd
  1184 ;;		_Lcd_Init
  1185 ;;		_Lcd_Write_Char
  1186 ;; This function uses a non-reentrant model
  1187 ;;
  1188                           
  1189                           
  1190                           ;psect for function _Lcd_Port
  1191  029D                     _Lcd_Port:	
  1192                           
  1193                           ;incstack = 0
  1194                           ; Regs used in _Lcd_Port: [wreg]
  1195                           ;Lcd_Port@a stored from wreg
  1196  029D  1283               	bcf	3,5	;RP0=0, select bank0
  1197  029E  008C               	movwf	Lcd_Port@a
  1198                           
  1199                           ;lcd.c: 8: if(a & 1)
  1200  029F  1C0C               	btfss	Lcd_Port@a,0
  1201  02A0  2AA3               	goto	l55
  1202                           
  1203                           ;lcd.c: 9: RB0 = 1;
  1204  02A1  1406               	bsf	6,0	;volatile
  1205  02A2  2AA4               	goto	l56
  1206  02A3                     l55:	
  1207                           
  1208                           ;lcd.c: 10: else
  1209                           ;lcd.c: 11: RB0 = 0;
  1210  02A3  1006               	bcf	6,0	;volatile
  1211  02A4                     l56:	
  1212                           
  1213                           ;lcd.c: 13: if(a & 2)
  1214  02A4  1C8C               	btfss	Lcd_Port@a,1
  1215  02A5  2AA8               	goto	l57
  1216                           
  1217                           ;lcd.c: 14: RB1 = 1;
  1218  02A6  1486               	bsf	6,1	;volatile
  1219  02A7  2AA9               	goto	l58
  1220  02A8                     l57:	
  1221                           
  1222                           ;lcd.c: 15: else
  1223                           ;lcd.c: 16: RB1 = 0;
  1224  02A8  1086               	bcf	6,1	;volatile
  1225  02A9                     l58:	
  1226                           
  1227                           ;lcd.c: 18: if(a & 4)
  1228  02A9  1D0C               	btfss	Lcd_Port@a,2
  1229  02AA  2AAD               	goto	l59
  1230                           
  1231                           ;lcd.c: 19: RB2 = 1;
  1232  02AB  1506               	bsf	6,2	;volatile
  1233  02AC  2AAE               	goto	l60
  1234  02AD                     l59:	
  1235                           
  1236                           ;lcd.c: 20: else
  1237                           ;lcd.c: 21: RB2 = 0;
  1238  02AD  1106               	bcf	6,2	;volatile
  1239  02AE                     l60:	
  1240                           
  1241                           ;lcd.c: 23: if(a & 8)
  1242  02AE  1D8C               	btfss	Lcd_Port@a,3
  1243  02AF  2AB2               	goto	l61
  1244                           
  1245                           ;lcd.c: 24: RB3 = 1;
  1246  02B0  1586               	bsf	6,3	;volatile
  1247  02B1  0008               	return
  1248  02B2                     l61:	
  1249                           
  1250                           ;lcd.c: 25: else
  1251                           ;lcd.c: 26: RB3 = 0;
  1252  02B2  1186               	bcf	6,3	;volatile
  1253  02B3  0008               	return
  1254  02B4                     __end_of_Lcd_Port:	
  1255  004E                     btemp	set	78	;btemp
  1256  004E                     wtemp	set	78
  1257  004E                     wtemp0	set	78
  1258  0050                     wtemp1	set	80
  1259  0052                     wtemp2	set	82
  1260  0054                     wtemp3	set	84
  1261  0056                     wtemp4	set	86
  1262  0058                     wtemp5	set	88
  1263  004F                     wtemp6	set	79
  1264  004E                     ttemp	set	78
  1265  004E                     ttemp0	set	78
  1266  0051                     ttemp1	set	81
  1267  0054                     ttemp2	set	84
  1268  0057                     ttemp3	set	87
  1269  004F                     ttemp4	set	79
  1270  004E                     ltemp	set	78
  1271  004E                     ltemp0	set	78
  1272  0052                     ltemp1	set	82
  1273  0056                     ltemp2	set	86
  1274  0050                     ltemp3	set	80


Data Sizes:
    Strings     15
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            66     16      16

Pointer List with Targets:

    sp__itoa	PTR unsigned char  size(1) Largest target is 0

    sp__utoa	PTR unsigned char  size(1) Largest target is 16
		 -> Lcd_Write_Int@temp(BANK0[16]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 16
		 -> Lcd_Write_Int@temp(BANK0[16]), STR_1(CODE[15]), 

    main@string	PTR unsigned char  size(1) Largest target is 15
		 -> STR_1(CODE[15]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Lcd_Write_String
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    1347
                                             12 BANK0      4     4      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            _readADC
 ---------------------------------------------------------------------------------
 (1) _readADC                                              8     6      2     208
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2     374
                                              5 BANK0      7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 BANK0      4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     433
                                              4 BANK0      7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            2     2      0     110
                                              4 BANK0      2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 BANK0      3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _readADC

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              40      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               42     10      10       3       24.2%
ABS                  0      0       0       4        0.0%
BITBANK0            42      0       0       5        0.0%
DATA                 0      0       0       6        0.0%


Microchip Technology PIC Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Mon Apr 18 15:31:10 2016

                        pc 0002                __CFG_CP$OFF 0000                         l33 03EB  
                       l60 02AE                         l61 02B2                         l55 02A3  
                       l56 02A4                         l57 02A8                         l58 02A9  
                       l59 02AD                         fsr 0004                        l800 03C2  
                      l806 03C7                        l816 03D8                        l842 0383  
                      l790 03AE                        l858 0300                        _RA1 0029  
                      _RB0 0030                        _RA2 002A                        _RB1 0031  
                      _RA3 002B                        _RB2 0032                        _RB3 0033  
                      _RB4 0034                        _RB5 0035                        _RB6 0036  
                      u225 02E3                        u315 0390                        u407 02F8  
                      u417 0335                        u427 0341                        u437 034C  
                      u357 03B0                        u447 0284                        u295 036F  
                      u367 03B6                        u457 0295                        u377 03C9  
                      u387 03DF                        u397 02EE                        fsr0 0004  
                      indf 0000               __CFG_FOSC$XT 0000                       STR_1 0011  
        ?_Lcd_Write_String 0011                       _main 02B4                       btemp 004E  
                     ltemp 004E                       start 0000                       ttemp 004E  
       ??_Lcd_Write_String 0013                       wtemp 004E                main@voltage 0019  
          __end_of_Lcd_Cmd 029D                      ?_main 000C              __CFG_WDTE$OFF 0000  
  __size_of_Lcd_Set_Cursor 0042                      _TRISA 0085                      _TRISB 0086  
            __CFG_PWRTE$ON 0000                readADC@bits 0012            __end_of_readADC 03FE  
              readADC@volt 0010                      pclath 000A                      ltemp0 004E  
                    ltemp1 0052                      ltemp2 0056                      ltemp3 0050  
                    ttemp0 004E                      ttemp1 0051                      ttemp2 0054  
                    ttemp3 0057                      ttemp4 004F                      status 0003  
                    wtemp0 004E                      wtemp1 0050                      wtemp2 0052  
                    wtemp3 0054                      wtemp4 0056                      wtemp5 0058  
                    wtemp6 004F           __end_of_Lcd_Init 0362           __end_of_Lcd_Port 02B4  
          __initialization 03FE               __end_of_main 02D3                     ??_main 0018  
       __size_of_Lcd_Clear 000F                  ??_Lcd_Cmd 000D    __size_of_Lcd_Write_Char 002A  
                ??_readADC 000E            Lcd_Set_Cursor@a 0013            Lcd_Set_Cursor@b 0010  
          Lcd_Set_Cursor@y 0015            Lcd_Set_Cursor@z 0014    __end_of__initialization 03FE  
        __end_of_Lcd_Clear 028A             __pcstackCOMMON 0000             _Lcd_Set_Cursor 0362  
                ?_Lcd_Init 000C                  ?_Lcd_Port 000C                 __pmaintext 02B4  
__size_of_Lcd_Write_String 0031     __end_of_Lcd_Set_Cursor 03A4                 ??_Lcd_Init 0010  
               ??_Lcd_Port 0000                 __stringtab 0001             _Lcd_Write_Char 02D3  
                  _Lcd_Cmd 028A              readADC@rxData 0013            ?_Lcd_Set_Cursor 0010  
                  __ptext1 03A4                    __ptext2 02FD                    __ptext3 02D3  
                  __ptext4 0362                    __ptext5 032E                    __ptext6 027B  
                  __ptext7 028A                    __ptext8 029D                    _readADC 03A4  
   __end_of_Lcd_Write_Char 02FD       end_of_initialization 03FE                  Lcd_Port@a 000C  
          ?_Lcd_Write_Char 000C          Lcd_Write_String@a 0011          Lcd_Write_String@i 0016  
               main@string 001B                  _Lcd_Clear 027B           _Lcd_Write_String 02FD  
      start_initialization 03FE          __size_of_Lcd_Init 0034          __size_of_Lcd_Port 0017  
               ?_Lcd_Clear 000C            Lcd_Write_Char@a 0010            Lcd_Write_Char@y 000F  
                ___latbits 0000              __pcstackBANK0 000C                   ?_Lcd_Cmd 000C  
         ??_Lcd_Set_Cursor 0011                  __pstrings 0001                   ?_readADC 000C  
                 Lcd_Cmd@a 000F                ??_Lcd_Clear 0010                __stringbase 0010  
         ??_Lcd_Write_Char 000D                   _Lcd_Init 032E                   _Lcd_Port 029D  
 __end_of_Lcd_Write_String 032E           __size_of_Lcd_Cmd 0013         __end_of__stringtab 0011  
         __size_of_readADC 005A              __size_of_main 001F         Lcd_Write_Char@temp 000E  
                stringcode 000B         Lcd_Set_Cursor@temp 0016                   stringdir 000B  
                 stringtab 0001  
