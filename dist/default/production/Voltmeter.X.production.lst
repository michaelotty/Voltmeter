

Microchip Technology PIC LITE Macro Assembler V1.35 build -356382666 
                                                                                               Thu Apr 21 11:06:34 2016

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	16F84A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	psect	text10,local,class=CODE,merge=1,delta=2
    19                           	psect	text11,local,class=CODE,merge=1,delta=2
    20                           	psect	text12,local,class=CODE,merge=1,delta=2
    21                           	psect	text13,local,class=CODE,merge=1,delta=2
    22                           	psect	text14,local,class=CODE,merge=1,delta=2
    23                           	psect	text15,local,class=CODE,merge=1,delta=2
    24                           	dabs	1,0x4E,2
    25  0000                     	;# 
    26  0001                     	;# 
    27  0002                     	;# 
    28  0003                     	;# 
    29  0004                     	;# 
    30  0005                     	;# 
    31  0006                     	;# 
    32  0008                     	;# 
    33  0009                     	;# 
    34  000A                     	;# 
    35  000B                     	;# 
    36  0081                     	;# 
    37  0085                     	;# 
    38  0086                     	;# 
    39  0088                     	;# 
    40  0089                     	;# 
    41  0000                     	;# 
    42  0001                     	;# 
    43  0002                     	;# 
    44  0003                     	;# 
    45  0004                     	;# 
    46  0005                     	;# 
    47  0006                     	;# 
    48  0008                     	;# 
    49  0009                     	;# 
    50  000A                     	;# 
    51  000B                     	;# 
    52  0081                     	;# 
    53  0085                     	;# 
    54  0086                     	;# 
    55  0088                     	;# 
    56  0089                     	;# 
    57  0000                     	;# 
    58  0001                     	;# 
    59  0002                     	;# 
    60  0003                     	;# 
    61  0004                     	;# 
    62  0005                     	;# 
    63  0006                     	;# 
    64  0008                     	;# 
    65  0009                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  0081                     	;# 
    69  0085                     	;# 
    70  0086                     	;# 
    71  0088                     	;# 
    72  0089                     	;# 
    73  0029                     _RA1	set	41
    74  002A                     _RA2	set	42
    75  002B                     _RA3	set	43
    76  0030                     _RB0	set	48
    77  0031                     _RB1	set	49
    78  0032                     _RB2	set	50
    79  0033                     _RB3	set	51
    80  0034                     _RB4	set	52
    81  0035                     _RB5	set	53
    82  0036                     _RB6	set	54
    83  0085                     _TRISA	set	133
    84  0086                     _TRISB	set	134
    85                           
    86                           	psect	strings
    87  0001                     __pstrings:	
    88  0001                     stringtab:	
    89  0001                     __stringtab:	
    90                           
    91                           ;	String table - string pointers are 1 byte each
    92  0001  1BCF               	btfsc	btemp+1,7
    93  0002  280B               	ljmp	stringcode
    94  0003  1383               	bcf	3,7
    95  0004  184F               	btfsc	btemp+1,0
    96  0005  1783               	bsf	3,7
    97  0006  0800               	movf	0,w
    98  0007  0A84               	incf	4,f
    99  0008  1903               	skipnz
   100  0009  0ACF               	incf	btemp+1,f
   101  000A  0008               	return
   102  000B                     stringcode:	
   103  000B                     stringdir:	
   104  000B  3000               	movlw	high stringdir
   105  000C  008A               	movwf	10
   106  000D  0804               	movf	4,w
   107  000E  0A84               	incf	4,f
   108  000F  0782               	addwf	2,f
   109  0010                     __stringbase:	
   110  0010  3400               	retlw	0
   111  0011                     __end_of__stringtab:	
   112  0011                     STR_1:	
   113  0011  3457               	retlw	87	;'W'
   114  0012  3465               	retlw	101	;'e'
   115  0013  346C               	retlw	108	;'l'
   116  0014  3463               	retlw	99	;'c'
   117  0015  346F               	retlw	111	;'o'
   118  0016  346D               	retlw	109	;'m'
   119  0017  3465               	retlw	101	;'e'
   120  0018  3421               	retlw	33	;'!'
   121  0019  3420               	retlw	32	;' '
   122  001A  3454               	retlw	84	;'T'
   123  001B  3468               	retlw	104	;'h'
   124  001C  3465               	retlw	101	;'e'
   125  001D  3420               	retlw	32	;' '
   126  001E  3472               	retlw	114	;'r'
   127  001F  3461               	retlw	97	;'a'
   128  0020  346E               	retlw	110	;'n'
   129  0021  3467               	retlw	103	;'g'
   130  0022  3465               	retlw	101	;'e'
   131  0023  3420               	retlw	32	;' '
   132  0024  3469               	retlw	105	;'i'
   133  0025  3473               	retlw	115	;'s'
   134  0026  3420               	retlw	32	;' '
   135  0027  3430               	retlw	48	;'0'
   136  0028  3456               	retlw	86	;'V'
   137  0029  3420               	retlw	32	;' '
   138  002A  3474               	retlw	116	;'t'
   139  002B  346F               	retlw	111	;'o'
   140  002C  3420               	retlw	32	;' '
   141  002D  3435               	retlw	53	;'5'
   142  002E  3456               	retlw	86	;'V'
   143  002F  3400               	retlw	0
   144                           
   145                           ; #config settings
   146  0000                     
   147                           	psect	cinit
   148  03FE                     start_initialization:	
   149  03FE                     __initialization:	
   150  03FE                     end_of_initialization:	
   151                           ;End of C runtime variable initialization code
   152                           
   153  03FE                     __end_of__initialization:	
   154  03FE  0183               	clrf	3
   155  03FF  2B91               	ljmp	_main	;jump to C main() function
   156                           
   157                           	psect	cstackCOMMON
   158  0000                     __pcstackCOMMON:	
   159  0000                     ??_Lcd_Write_Int:	
   160  0000                     ??_Lcd_Shift_Left:	
   161                           ; 0 bytes @ 0x0
   162                           
   163  0000                     ??_WriteVoltage:	
   164                           ; 0 bytes @ 0x0
   165                           
   166  0000                     ??_Lcd_Port:	
   167                           ; 0 bytes @ 0x0
   168                           
   169  0000                     ??___wmul:	
   170                           ; 0 bytes @ 0x0
   171                           
   172                           
   173                           	psect	cstackBANK0
   174  000C                     __pcstackBANK0:	
   175                           ; 0 bytes @ 0x0
   176                           
   177  000C                     ?_Lcd_Write_Char:	
   178  000C                     ?_Lcd_Init:	
   179                           ; 0 bytes @ 0x0
   180                           
   181  000C                     ?_Lcd_Clear:	
   182                           ; 0 bytes @ 0x0
   183                           
   184  000C                     ?_Lcd_Shift_Left:	
   185                           ; 0 bytes @ 0x0
   186                           
   187  000C                     ?_main:	
   188                           ; 0 bytes @ 0x0
   189                           
   190  000C                     ?_Lcd_Port:	
   191                           ; 0 bytes @ 0x0
   192                           
   193  000C                     ?_Lcd_Cmd:	
   194                           ; 0 bytes @ 0x0
   195                           
   196  000C                     ?_readADC:	
   197                           ; 0 bytes @ 0x0
   198                           
   199  000C                     ?___wmul:	
   200                           ; 2 bytes @ 0x0
   201                           
   202  000C                     Lcd_Port@a:	
   203                           ; 2 bytes @ 0x0
   204                           
   205  000C                     ___wmul@multiplier:	
   206                           ; 1 bytes @ 0x0
   207                           
   208                           
   209                           ; 2 bytes @ 0x0
   210  000C                     	ds	1
   211  000D                     ??_Lcd_Write_Char:	
   212  000D                     ??_Lcd_Cmd:	
   213                           ; 0 bytes @ 0x1
   214                           
   215                           
   216                           ; 0 bytes @ 0x1
   217  000D                     	ds	1
   218  000E                     ??_readADC:	
   219  000E                     Lcd_Write_Char@temp:	
   220                           ; 0 bytes @ 0x2
   221                           
   222  000E                     ___wmul@multiplicand:	
   223                           ; 1 bytes @ 0x2
   224                           
   225                           
   226                           ; 2 bytes @ 0x2
   227  000E                     	ds	1
   228  000F                     Lcd_Cmd@a:	
   229  000F                     Lcd_Write_Char@y:	
   230                           ; 1 bytes @ 0x3
   231                           
   232                           
   233                           ; 1 bytes @ 0x3
   234  000F                     	ds	1
   235  0010                     ??_Lcd_Init:	
   236  0010                     ??_Lcd_Clear:	
   237                           ; 0 bytes @ 0x4
   238                           
   239  0010                     ?_Lcd_Set_Cursor:	
   240                           ; 0 bytes @ 0x4
   241                           
   242  0010                     Lcd_Set_Cursor@b:	
   243                           ; 0 bytes @ 0x4
   244                           
   245  0010                     Lcd_Write_Char@a:	
   246                           ; 1 bytes @ 0x4
   247                           
   248  0010                     readADC@volt:	
   249                           ; 1 bytes @ 0x4
   250                           
   251  0010                     ___wmul@product:	
   252                           ; 2 bytes @ 0x4
   253                           
   254                           
   255                           ; 2 bytes @ 0x4
   256  0010                     	ds	1
   257  0011                     ?_Lcd_Write_String:	
   258  0011                     ??_Lcd_Set_Cursor:	
   259                           ; 0 bytes @ 0x5
   260                           
   261  0011                     Lcd_Write_String@a:	
   262                           ; 0 bytes @ 0x5
   263                           
   264                           
   265                           ; 2 bytes @ 0x5
   266  0011                     	ds	1
   267  0012                     ?___lwdiv:	
   268  0012                     ?___lwmod:	
   269                           ; 2 bytes @ 0x6
   270                           
   271  0012                     readADC@bits:	
   272                           ; 2 bytes @ 0x6
   273                           
   274  0012                     ___lwdiv@divisor:	
   275                           ; 1 bytes @ 0x6
   276                           
   277  0012                     ___lwmod@divisor:	
   278                           ; 2 bytes @ 0x6
   279                           
   280                           
   281                           ; 2 bytes @ 0x6
   282  0012                     	ds	1
   283  0013                     ??_Lcd_Write_String:	
   284  0013                     readADC@rxData:	
   285                           ; 0 bytes @ 0x7
   286                           
   287  0013                     Lcd_Set_Cursor@a:	
   288                           ; 1 bytes @ 0x7
   289                           
   290                           
   291                           ; 1 bytes @ 0x7
   292  0013                     	ds	1
   293  0014                     Lcd_Set_Cursor@z:	
   294  0014                     ___lwdiv@dividend:	
   295                           ; 1 bytes @ 0x8
   296                           
   297  0014                     ___lwmod@dividend:	
   298                           ; 2 bytes @ 0x8
   299                           
   300                           
   301                           ; 2 bytes @ 0x8
   302  0014                     	ds	1
   303  0015                     Lcd_Set_Cursor@y:	
   304                           
   305                           ; 1 bytes @ 0x9
   306  0015                     	ds	1
   307  0016                     ??___lwdiv:	
   308  0016                     ??___lwmod:	
   309                           ; 0 bytes @ 0xA
   310                           
   311  0016                     Lcd_Set_Cursor@temp:	
   312                           ; 0 bytes @ 0xA
   313                           
   314  0016                     Lcd_Write_String@i:	
   315                           ; 1 bytes @ 0xA
   316                           
   317                           
   318                           ; 2 bytes @ 0xA
   319  0016                     	ds	1
   320  0017                     ___lwmod@counter:	
   321  0017                     ___lwdiv@quotient:	
   322                           ; 1 bytes @ 0xB
   323                           
   324                           
   325                           ; 2 bytes @ 0xB
   326  0017                     	ds	2
   327  0019                     ___lwdiv@counter:	
   328                           
   329                           ; 1 bytes @ 0xD
   330  0019                     	ds	1
   331  001A                     ?_utoa:	
   332  001A                     utoa@val:	
   333                           ; 1 bytes @ 0xE
   334                           
   335                           
   336                           ; 2 bytes @ 0xE
   337  001A                     	ds	2
   338  001C                     utoa@base:	
   339                           
   340                           ; 2 bytes @ 0x10
   341  001C                     	ds	2
   342  001E                     ??_utoa:	
   343                           
   344                           ; 0 bytes @ 0x12
   345  001E                     	ds	1
   346  001F                     utoa@v:	
   347                           
   348                           ; 2 bytes @ 0x13
   349  001F                     	ds	2
   350  0021                     utoa@c:	
   351                           
   352                           ; 1 bytes @ 0x15
   353  0021                     	ds	1
   354  0022                     utoa@buf:	
   355                           
   356                           ; 1 bytes @ 0x16
   357  0022                     	ds	1
   358  0023                     ?_Lcd_Write_Int:	
   359  0023                     Lcd_Write_Int@a:	
   360                           ; 0 bytes @ 0x17
   361                           
   362                           
   363                           ; 2 bytes @ 0x17
   364  0023                     	ds	2
   365  0025                     Lcd_Write_Int@temp:	
   366                           
   367                           ; 16 bytes @ 0x19
   368  0025                     	ds	16
   369  0035                     ?_WriteVoltage:	
   370  0035                     WriteVoltage@vTemp:	
   371                           ; 0 bytes @ 0x29
   372                           
   373                           
   374                           ; 2 bytes @ 0x29
   375  0035                     	ds	2
   376  0037                     WriteVoltage@voltage:	
   377                           
   378                           ; 2 bytes @ 0x2B
   379  0037                     	ds	2
   380  0039                     WriteVoltage@decimal:	
   381                           
   382                           ; 2 bytes @ 0x2D
   383  0039                     	ds	2
   384  003B                     ??_main:	
   385                           
   386                           ; 0 bytes @ 0x2F
   387  003B                     	ds	3
   388  003E                     main@i:	
   389                           
   390                           ; 2 bytes @ 0x32
   391  003E                     	ds	2
   392                           
   393                           	psect	maintext
   394  0391                     __pmaintext:	
   395 ;;
   396 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   397 ;;
   398 ;; *************** function _main *****************
   399 ;; Defined at:
   400 ;;		line 49 in file "main.c"
   401 ;; Parameters:    Size  Location     Type
   402 ;;		None
   403 ;; Auto vars:     Size  Location     Type
   404 ;;  i               2   50[BANK0 ] int 
   405 ;; Return value:  Size  Location     Type
   406 ;;		None               void
   407 ;; Registers used:
   408 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   409 ;; Tracked objects:
   410 ;;		On entry : B00/0
   411 ;;		On exit  : 0/0
   412 ;;		Unchanged: 0/0
   413 ;; Data sizes:     COMMON   BANK0
   414 ;;      Params:         0       0
   415 ;;      Locals:         0       2
   416 ;;      Temps:          0       3
   417 ;;      Totals:         0       5
   418 ;;Total ram usage:        5 bytes
   419 ;; Hardware stack levels required when called:    5
   420 ;; This function calls:
   421 ;;		_Lcd_Clear
   422 ;;		_Lcd_Init
   423 ;;		_Lcd_Set_Cursor
   424 ;;		_Lcd_Shift_Left
   425 ;;		_Lcd_Write_Char
   426 ;;		_Lcd_Write_String
   427 ;;		_WriteVoltage
   428 ;;		_readADC
   429 ;; This function is called by:
   430 ;;		Startup code after reset
   431 ;; This function uses a non-reentrant model
   432 ;;
   433                           
   434                           
   435                           ;psect for function _main
   436  0391                     _main:	
   437                           
   438                           ;main.c: 51: TRISA = 0b00000100;
   439                           
   440                           ;incstack = 0
   441                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   442  0391  3004               	movlw	4
   443  0392  1683               	bsf	3,5	;RP0=1, select bank1
   444  0393  0085               	movwf	5	;volatile
   445                           
   446                           ;main.c: 52: TRISB = 0b00000001;
   447  0394  3001               	movlw	1
   448  0395  0086               	movwf	6	;volatile
   449                           
   450                           ;main.c: 56: RA3 = 1;
   451  0396  1283               	bcf	3,5	;RP0=0, select bank0
   452  0397  1585               	bsf	5,3	;volatile
   453                           
   454                           ;main.c: 57: RA1 = 0;
   455  0398  1085               	bcf	5,1	;volatile
   456                           
   457                           ;main.c: 58: RB5 = 0;
   458  0399  1286               	bcf	6,5	;volatile
   459                           
   460                           ;main.c: 59: Lcd_Init();
   461  039A  21C1               	fcall	_Lcd_Init
   462                           
   463                           ;main.c: 60: Lcd_Clear();
   464  039B  20C6               	fcall	_Lcd_Clear
   465                           
   466                           ;main.c: 62: Lcd_Write_String("Welcome! The range is 0V to 5V");
   467  039C  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   468  039D  1283               	bcf	3,5	;RP0=0, select bank0
   469  039E  0091               	movwf	Lcd_Write_String@a
   470  039F  3080               	movlw	128
   471  03A0  0092               	movwf	Lcd_Write_String@a+1
   472  03A1  215D               	fcall	_Lcd_Write_String
   473                           
   474                           ;main.c: 63: int i =0;
   475  03A2  1283               	bcf	3,5	;RP0=0, select bank0
   476  03A3  01BE               	clrf	main@i
   477  03A4  01BF               	clrf	main@i+1
   478  03A5                     l1172:	
   479                           ;main.c: 64: while(i < 30)
   480                           
   481  03A5  083F               	movf	main@i+1,w
   482  03A6  3A80               	xorlw	128
   483  03A7  00CF               	movwf	79
   484  03A8  3080               	movlw	128
   485  03A9  024F               	subwf	79,w
   486  03AA  1D03               	skipz
   487  03AB  2BAE               	goto	u825
   488  03AC  301E               	movlw	30
   489  03AD  023E               	subwf	main@i,w
   490  03AE                     u825:	
   491  03AE  1803               	btfsc	3,0
   492  03AF  2BC7               	goto	l1174
   493                           
   494                           ;main.c: 65: {
   495                           ;main.c: 66: _delay((unsigned long)((250)*(4000000/4000.0)));
   496  03B0  3002               	movlw	2
   497  03B1  1283               	bcf	3,5	;RP0=0, select bank0
   498  03B2  00BD               	movwf	??_main+2
   499  03B3  3045               	movlw	69
   500  03B4  00BC               	movwf	??_main+1
   501  03B5  30A9               	movlw	169
   502  03B6  00BB               	movwf	??_main
   503  03B7                     u857:	
   504  03B7  0BBB               	decfsz	??_main,f
   505  03B8  2BB7               	goto	u857
   506  03B9  0BBC               	decfsz	??_main+1,f
   507  03BA  2BB7               	goto	u857
   508  03BB  0BBD               	decfsz	??_main+2,f
   509  03BC  2BB7               	goto	u857
   510  03BD  2BBE               	nop2
   511                           
   512                           ;main.c: 67: Lcd_Shift_Left();
   513  03BE  20C1               	fcall	_Lcd_Shift_Left
   514                           
   515                           ;main.c: 68: i++;
   516  03BF  3001               	movlw	1
   517  03C0  1283               	bcf	3,5	;RP0=0, select bank0
   518  03C1  07BE               	addwf	main@i,f
   519  03C2  1803               	skipnc
   520  03C3  0ABF               	incf	main@i+1,f
   521  03C4  3000               	movlw	0
   522  03C5  07BF               	addwf	main@i+1,f
   523  03C6  2BA5               	goto	l1172
   524  03C7                     l1174:	
   525                           ;main.c: 69: }
   526                           ;main.c: 70: while (1)
   527                           
   528                           
   529                           ;main.c: 71: {
   530                           ;main.c: 73: Lcd_Clear();
   531  03C7  20C6               	fcall	_Lcd_Clear
   532                           
   533                           ;main.c: 74: Lcd_Set_Cursor(1,1);
   534  03C8  1283               	bcf	3,5	;RP0=0, select bank0
   535  03C9  0190               	clrf	Lcd_Set_Cursor@b
   536  03CA  0A90               	incf	Lcd_Set_Cursor@b,f
   537  03CB  3001               	movlw	1
   538  03CC  2232               	fcall	_Lcd_Set_Cursor
   539                           
   540                           ;main.c: 75: Lcd_Write_Char('V');
   541  03CD  3056               	movlw	86
   542  03CE  2133               	fcall	_Lcd_Write_Char
   543                           
   544                           ;main.c: 76: Lcd_Write_Char('1');
   545  03CF  3031               	movlw	49
   546  03D0  2133               	fcall	_Lcd_Write_Char
   547                           
   548                           ;main.c: 77: Lcd_Write_Char(':');
   549  03D1  303A               	movlw	58
   550  03D2  2133               	fcall	_Lcd_Write_Char
   551                           
   552                           ;main.c: 79: WriteVoltage(readADC());
   553  03D3  2274               	fcall	_readADC
   554  03D4  1283               	bcf	3,5	;RP0=0, select bank0
   555  03D5  080D               	movf	?_readADC+1,w
   556  03D6  00B6               	movwf	WriteVoltage@vTemp+1
   557  03D7  080C               	movf	?_readADC,w
   558  03D8  00B5               	movwf	WriteVoltage@vTemp
   559  03D9  232A               	fcall	_WriteVoltage
   560                           
   561                           ;main.c: 80: _delay((unsigned long)((20)*(4000000/4000.0)));
   562  03DA  301A               	movlw	26
   563  03DB  1283               	bcf	3,5	;RP0=0, select bank0
   564  03DC  00BC               	movwf	??_main+1
   565  03DD  30F8               	movlw	248
   566  03DE  00BB               	movwf	??_main
   567  03DF                     u867:	
   568  03DF  0BBB               	decfsz	??_main,f
   569  03E0  2BDF               	goto	u867
   570  03E1  0BBC               	decfsz	??_main+1,f
   571  03E2  2BDF               	goto	u867
   572  03E3  0000               	nop
   573                           
   574                           ;main.c: 81: if(RB0 == 1)
   575  03E4  1283               	bcf	3,5	;RP0=0, select bank0
   576  03E5  1C06               	btfss	6,0	;volatile
   577  03E6  2BC7               	goto	l1174
   578  03E7                     l1182:	
   579                           ;main.c: 82: {
   580                           ;main.c: 83: while(1)
   581                           
   582                           
   583                           ;main.c: 84: {
   584                           ;main.c: 85: _delay((unsigned long)((100)*(4000000/4000.0)));
   585  03E7  3082               	movlw	130
   586  03E8  1283               	bcf	3,5	;RP0=0, select bank0
   587  03E9  00BC               	movwf	??_main+1
   588  03EA  30DD               	movlw	221
   589  03EB  00BB               	movwf	??_main
   590  03EC                     u877:	
   591  03EC  0BBB               	decfsz	??_main,f
   592  03ED  2BEC               	goto	u877
   593  03EE  0BBC               	decfsz	??_main+1,f
   594  03EF  2BEC               	goto	u877
   595  03F0  2BF1               	nop2
   596                           
   597                           ;main.c: 86: if(RB0 == 1)
   598  03F1  1283               	bcf	3,5	;RP0=0, select bank0
   599  03F2  1C06               	btfss	6,0	;volatile
   600  03F3  2BE7               	goto	l1182
   601                           
   602                           ;main.c: 87: {
   603                           ;main.c: 88: _delay((unsigned long)((100)*(4000000/4000.0)));
   604  03F4  3082               	movlw	130
   605  03F5  00BC               	movwf	??_main+1
   606  03F6  30DD               	movlw	221
   607  03F7  00BB               	movwf	??_main
   608  03F8                     u887:	
   609  03F8  0BBB               	decfsz	??_main,f
   610  03F9  2BF8               	goto	u887
   611  03FA  0BBC               	decfsz	??_main+1,f
   612  03FB  2BF8               	goto	u887
   613  03FC  2BFD               	nop2
   614  03FD  2BC7               	goto	l1174
   615  03FE                     __end_of_main:	
   616                           ;main.c: 89: break;
   617                           
   618                           
   619                           	psect	text1
   620  0274                     __ptext1:	
   621 ;; *************** function _readADC *****************
   622 ;; Defined at:
   623 ;;		line 6 in file "adc.c"
   624 ;; Parameters:    Size  Location     Type
   625 ;;		None
   626 ;; Auto vars:     Size  Location     Type
   627 ;;  volt            2    4[BANK0 ] unsigned int 
   628 ;;  rxData          1    7[BANK0 ] unsigned char 
   629 ;;  bits            1    6[BANK0 ] unsigned char 
   630 ;; Return value:  Size  Location     Type
   631 ;;                  2    0[BANK0 ] unsigned int 
   632 ;; Registers used:
   633 ;;		wreg, status,2, status,0
   634 ;; Tracked objects:
   635 ;;		On entry : 0/0
   636 ;;		On exit  : 0/0
   637 ;;		Unchanged: 0/0
   638 ;; Data sizes:     COMMON   BANK0
   639 ;;      Params:         0       2
   640 ;;      Locals:         0       4
   641 ;;      Temps:          0       2
   642 ;;      Totals:         0       8
   643 ;;Total ram usage:        8 bytes
   644 ;; Hardware stack levels used:    1
   645 ;; This function calls:
   646 ;;		Nothing
   647 ;; This function is called by:
   648 ;;		_main
   649 ;; This function uses a non-reentrant model
   650 ;;
   651                           
   652                           
   653                           ;psect for function _readADC
   654  0274                     _readADC:	
   655                           
   656                           ;adc.c: 8: unsigned char bits;
   657                           ;adc.c: 9: unsigned char rxData = 0;
   658                           
   659                           ;incstack = 0
   660                           ; Regs used in _readADC: [wreg+status,2+status,0]
   661  0274  1283               	bcf	3,5	;RP0=0, select bank0
   662  0275  0193               	clrf	readADC@rxData
   663                           
   664                           ;adc.c: 10: unsigned int volt = 0;
   665  0276  0190               	clrf	readADC@volt
   666  0277  0191               	clrf	readADC@volt+1
   667                           
   668                           ;adc.c: 12: RA3 = 0;
   669  0278  1185               	bcf	5,3	;volatile
   670                           
   671                           ;adc.c: 15: for (bits = 0; bits < 3; bits++)
   672  0279  0192               	clrf	readADC@bits
   673  027A  3003               	movlw	3
   674  027B  0212               	subwf	readADC@bits,w
   675  027C  1803               	btfsc	3,0
   676  027D  2A92               	goto	l1118
   677  027E                     l1108:	
   678                           
   679                           ;adc.c: 16: {
   680                           ;adc.c: 17: _delay((unsigned long)((100)*(4000000/4000000.0)));
   681  027E  3021               	movlw	33
   682  027F  008E               	movwf	??_readADC
   683  0280                     u897:	
   684  0280  0B8E               	decfsz	??_readADC,f
   685  0281  2A80               	goto	u897
   686                           
   687                           ;adc.c: 18: RA1 = 1;
   688  0282  1283               	bcf	3,5	;RP0=0, select bank0
   689  0283  1485               	bsf	5,1	;volatile
   690                           
   691                           ;adc.c: 19: _delay((unsigned long)((100)*(4000000/4000000.0)));
   692  0284  3021               	movlw	33
   693  0285  008E               	movwf	??_readADC
   694  0286                     u907:	
   695  0286  0B8E               	decfsz	??_readADC,f
   696  0287  2A86               	goto	u907
   697                           
   698                           ;adc.c: 20: RA1 = 0;
   699  0288  1283               	bcf	3,5	;RP0=0, select bank0
   700  0289  1085               	bcf	5,1	;volatile
   701  028A  3001               	movlw	1
   702  028B  008E               	movwf	??_readADC
   703  028C  080E               	movf	??_readADC,w
   704  028D  0792               	addwf	readADC@bits,f
   705  028E  3003               	movlw	3
   706  028F  0212               	subwf	readADC@bits,w
   707  0290  1C03               	skipc
   708  0291  2A7E               	goto	l1108
   709  0292                     l1118:	
   710                           
   711                           ;adc.c: 21: }
   712                           ;adc.c: 24: for (bits = 0; bits < 8; bits++)
   713  0292  0192               	clrf	readADC@bits
   714  0293  3008               	movlw	8
   715  0294  0212               	subwf	readADC@bits,w
   716  0295  1803               	btfsc	3,0
   717  0296  2ABB               	goto	l65
   718  0297                     l1124:	
   719                           
   720                           ;adc.c: 25: {
   721                           ;adc.c: 27: _delay((unsigned long)((100)*(4000000/4000000.0)));
   722  0297  3021               	movlw	33
   723  0298  008E               	movwf	??_readADC
   724  0299                     u917:	
   725  0299  0B8E               	decfsz	??_readADC,f
   726  029A  2A99               	goto	u917
   727                           
   728                           ;adc.c: 28: RA1 = 1;
   729  029B  1283               	bcf	3,5	;RP0=0, select bank0
   730  029C  1485               	bsf	5,1	;volatile
   731                           
   732                           ;adc.c: 31: rxData = rxData << 1;
   733  029D  0813               	movf	readADC@rxData,w
   734  029E  008E               	movwf	??_readADC
   735  029F  070E               	addwf	??_readADC,w
   736  02A0  008F               	movwf	??_readADC+1
   737  02A1  080F               	movf	??_readADC+1,w
   738  02A2  0093               	movwf	readADC@rxData
   739                           
   740                           ;adc.c: 34: if(RA2 == 1)
   741  02A3  1D05               	btfss	5,2	;volatile
   742  02A4  2AA8               	goto	l1134
   743                           
   744                           ;adc.c: 35: rxData = rxData | 0x01;
   745  02A5  0813               	movf	readADC@rxData,w
   746  02A6  3801               	iorlw	1
   747  02A7  2AAA               	goto	L2
   748  02A8                     l1134:	
   749                           
   750                           ;adc.c: 36: else
   751                           ;adc.c: 37: rxData = rxData & 0xfe;
   752  02A8  0813               	movf	readADC@rxData,w
   753  02A9  39FE               	andlw	254
   754  02AA                     L2:	
   755  02AA  008E               	movwf	??_readADC
   756  02AB  080E               	movf	??_readADC,w
   757  02AC  0093               	movwf	readADC@rxData
   758                           
   759                           ;adc.c: 39: _delay((unsigned long)((100)*(4000000/4000000.0)));
   760  02AD  3021               	movlw	33
   761  02AE  008E               	movwf	??_readADC
   762  02AF                     u927:	
   763  02AF  0B8E               	decfsz	??_readADC,f
   764  02B0  2AAF               	goto	u927
   765                           
   766                           ;adc.c: 40: RA1 = 0;
   767  02B1  1283               	bcf	3,5	;RP0=0, select bank0
   768  02B2  1085               	bcf	5,1	;volatile
   769  02B3  3001               	movlw	1
   770  02B4  008E               	movwf	??_readADC
   771  02B5  080E               	movf	??_readADC,w
   772  02B6  0792               	addwf	readADC@bits,f
   773  02B7  3008               	movlw	8
   774  02B8  0212               	subwf	readADC@bits,w
   775  02B9  1C03               	skipc
   776  02BA  2A97               	goto	l1124
   777  02BB                     l65:	
   778                           
   779                           ;adc.c: 41: }
   780                           ;adc.c: 44: RA3 = 1;
   781  02BB  1585               	bsf	5,3	;volatile
   782                           
   783                           ;adc.c: 47: volt = (rxData << 2);
   784  02BC  0813               	movf	readADC@rxData,w
   785  02BD  008E               	movwf	??_readADC
   786  02BE  018F               	clrf	??_readADC+1
   787  02BF  1003               	clrc
   788  02C0  0D8E               	rlf	??_readADC,f
   789  02C1  0D8F               	rlf	??_readADC+1,f
   790  02C2  1003               	clrc
   791  02C3  0D8E               	rlf	??_readADC,f
   792  02C4  0D8F               	rlf	??_readADC+1,f
   793  02C5  080E               	movf	??_readADC,w
   794  02C6  0090               	movwf	readADC@volt
   795  02C7  080F               	movf	??_readADC+1,w
   796  02C8  0091               	movwf	readADC@volt+1
   797                           
   798                           ;adc.c: 48: return volt;
   799  02C9  0811               	movf	readADC@volt+1,w
   800  02CA  008D               	movwf	?_readADC+1
   801  02CB  0810               	movf	readADC@volt,w
   802  02CC  008C               	movwf	?_readADC
   803  02CD  0008               	return
   804  02CE                     __end_of_readADC:	
   805                           
   806                           	psect	text2
   807  032A                     __ptext2:	
   808 ;; *************** function _WriteVoltage *****************
   809 ;; Defined at:
   810 ;;		line 14 in file "main.c"
   811 ;; Parameters:    Size  Location     Type
   812 ;;  vTemp           2   41[BANK0 ] unsigned int 
   813 ;; Auto vars:     Size  Location     Type
   814 ;;  decimal         2   45[BANK0 ] unsigned int 
   815 ;;  voltage         2   43[BANK0 ] unsigned int 
   816 ;; Return value:  Size  Location     Type
   817 ;;		None               void
   818 ;; Registers used:
   819 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   820 ;; Tracked objects:
   821 ;;		On entry : 0/0
   822 ;;		On exit  : 0/0
   823 ;;		Unchanged: 0/0
   824 ;; Data sizes:     COMMON   BANK0
   825 ;;      Params:         0       2
   826 ;;      Locals:         0       4
   827 ;;      Temps:          0       0
   828 ;;      Totals:         0       6
   829 ;;Total ram usage:        6 bytes
   830 ;; Hardware stack levels used:    1
   831 ;; Hardware stack levels required when called:    4
   832 ;; This function calls:
   833 ;;		_Lcd_Write_Char
   834 ;;		_Lcd_Write_Int
   835 ;;		___lwdiv
   836 ;;		___lwmod
   837 ;;		___wmul
   838 ;; This function is called by:
   839 ;;		_main
   840 ;; This function uses a non-reentrant model
   841 ;;
   842                           
   843                           
   844                           ;psect for function _WriteVoltage
   845  032A                     _WriteVoltage:	
   846                           
   847                           ;main.c: 16: unsigned int voltage = 5;
   848                           
   849                           ;incstack = 0
   850                           ; Regs used in _WriteVoltage: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   851  032A  3005               	movlw	5
   852  032B  1283               	bcf	3,5	;RP0=0, select bank0
   853  032C  00B7               	movwf	WriteVoltage@voltage
   854  032D  3000               	movlw	0
   855  032E  00B8               	movwf	WriteVoltage@voltage+1
   856                           
   857                           ;main.c: 17: voltage = (vTemp * 5) / 1020;
   858  032F  30FC               	movlw	252
   859  0330  0092               	movwf	___lwdiv@divisor
   860  0331  3003               	movlw	3
   861  0332  0093               	movwf	___lwdiv@divisor+1
   862  0333  0836               	movf	WriteVoltage@vTemp+1,w
   863  0334  008D               	movwf	___wmul@multiplier+1
   864  0335  0835               	movf	WriteVoltage@vTemp,w
   865  0336  008C               	movwf	___wmul@multiplier
   866  0337  3005               	movlw	5
   867  0338  008E               	movwf	___wmul@multiplicand
   868  0339  3000               	movlw	0
   869  033A  008F               	movwf	___wmul@multiplicand+1
   870  033B  2111               	fcall	___wmul
   871  033C  1283               	bcf	3,5	;RP0=0, select bank0
   872  033D  080D               	movf	?___wmul+1,w
   873  033E  0095               	movwf	___lwdiv@dividend+1
   874  033F  080C               	movf	?___wmul,w
   875  0340  0094               	movwf	___lwdiv@dividend
   876  0341  21F5               	fcall	___lwdiv
   877  0342  1283               	bcf	3,5	;RP0=0, select bank0
   878  0343  0813               	movf	?___lwdiv+1,w
   879  0344  00B8               	movwf	WriteVoltage@voltage+1
   880  0345  0812               	movf	?___lwdiv,w
   881  0346  00B7               	movwf	WriteVoltage@voltage
   882                           
   883                           ;main.c: 18: unsigned int decimal = ((vTemp * 5) % 1020);
   884  0347  30FC               	movlw	252
   885  0348  0092               	movwf	___lwmod@divisor
   886  0349  3003               	movlw	3
   887  034A  0093               	movwf	___lwmod@divisor+1
   888  034B  0836               	movf	WriteVoltage@vTemp+1,w
   889  034C  008D               	movwf	___wmul@multiplier+1
   890  034D  0835               	movf	WriteVoltage@vTemp,w
   891  034E  008C               	movwf	___wmul@multiplier
   892  034F  3005               	movlw	5
   893  0350  008E               	movwf	___wmul@multiplicand
   894  0351  3000               	movlw	0
   895  0352  008F               	movwf	___wmul@multiplicand+1
   896  0353  2111               	fcall	___wmul
   897  0354  1283               	bcf	3,5	;RP0=0, select bank0
   898  0355  080D               	movf	?___wmul+1,w
   899  0356  0095               	movwf	___lwmod@dividend+1
   900  0357  080C               	movf	?___wmul,w
   901  0358  0094               	movwf	___lwmod@dividend
   902  0359  218E               	fcall	___lwmod
   903  035A  1283               	bcf	3,5	;RP0=0, select bank0
   904  035B  0813               	movf	?___lwmod+1,w
   905  035C  00BA               	movwf	WriteVoltage@decimal+1
   906  035D  0812               	movf	?___lwmod,w
   907  035E  00B9               	movwf	WriteVoltage@decimal
   908                           
   909                           ;main.c: 19: Lcd_Write_Int(voltage);
   910  035F  0838               	movf	WriteVoltage@voltage+1,w
   911  0360  00A4               	movwf	Lcd_Write_Int@a+1
   912  0361  0837               	movf	WriteVoltage@voltage,w
   913  0362  00A3               	movwf	Lcd_Write_Int@a
   914  0363  20D5               	fcall	_Lcd_Write_Int
   915                           
   916                           ;main.c: 20: Lcd_Write_Char('.');
   917  0364  302E               	movlw	46
   918  0365  2133               	fcall	_Lcd_Write_Char
   919                           
   920                           ;main.c: 21: if (decimal < 10)
   921  0366  3000               	movlw	0
   922  0367  1283               	bcf	3,5	;RP0=0, select bank0
   923  0368  023A               	subwf	WriteVoltage@decimal+1,w
   924  0369  300A               	movlw	10
   925  036A  1903               	skipnz
   926  036B  0239               	subwf	WriteVoltage@decimal,w
   927  036C  1803               	skipnc
   928  036D  2B79               	goto	l1056
   929                           
   930                           ;main.c: 22: {
   931                           ;main.c: 23: Lcd_Write_Char('0');
   932  036E  3030               	movlw	48
   933  036F  2133               	fcall	_Lcd_Write_Char
   934                           
   935                           ;main.c: 24: Lcd_Write_Char('0');
   936  0370  3030               	movlw	48
   937  0371  2133               	fcall	_Lcd_Write_Char
   938                           
   939                           ;main.c: 25: Lcd_Write_Int(decimal);
   940  0372  1283               	bcf	3,5	;RP0=0, select bank0
   941  0373  083A               	movf	WriteVoltage@decimal+1,w
   942  0374  00A4               	movwf	Lcd_Write_Int@a+1
   943  0375  0839               	movf	WriteVoltage@decimal,w
   944  0376  00A3               	movwf	Lcd_Write_Int@a
   945  0377  20D5               	fcall	_Lcd_Write_Int
   946                           
   947                           ;main.c: 26: }
   948  0378  0008               	return
   949  0379                     l1056:	
   950                           
   951                           ;main.c: 27: else if (decimal < 100)
   952  0379  3000               	movlw	0
   953  037A  1283               	bcf	3,5	;RP0=0, select bank0
   954  037B  023A               	subwf	WriteVoltage@decimal+1,w
   955  037C  3064               	movlw	100
   956  037D  1903               	skipnz
   957  037E  0239               	subwf	WriteVoltage@decimal,w
   958  037F  1803               	skipnc
   959  0380  2B8A               	goto	l1062
   960                           
   961                           ;main.c: 28: {
   962                           ;main.c: 29: Lcd_Write_Char('0');
   963  0381  3030               	movlw	48
   964  0382  2133               	fcall	_Lcd_Write_Char
   965                           
   966                           ;main.c: 30: Lcd_Write_Int(decimal);
   967  0383  1283               	bcf	3,5	;RP0=0, select bank0
   968  0384  083A               	movf	WriteVoltage@decimal+1,w
   969  0385  00A4               	movwf	Lcd_Write_Int@a+1
   970  0386  0839               	movf	WriteVoltage@decimal,w
   971  0387  00A3               	movwf	Lcd_Write_Int@a
   972  0388  20D5               	fcall	_Lcd_Write_Int
   973                           
   974                           ;main.c: 31: }
   975  0389  0008               	return
   976  038A                     l1062:	
   977                           
   978                           ;main.c: 32: else
   979                           ;main.c: 33: {
   980                           ;main.c: 34: Lcd_Write_Int(decimal);
   981  038A  1283               	bcf	3,5	;RP0=0, select bank0
   982  038B  083A               	movf	WriteVoltage@decimal+1,w
   983  038C  00A4               	movwf	Lcd_Write_Int@a+1
   984  038D  0839               	movf	WriteVoltage@decimal,w
   985  038E  00A3               	movwf	Lcd_Write_Int@a
   986  038F  20D5               	fcall	_Lcd_Write_Int
   987  0390  0008               	return
   988  0391                     __end_of_WriteVoltage:	
   989                           
   990                           	psect	text3
   991  0111                     __ptext3:	
   992 ;; *************** function ___wmul *****************
   993 ;; Defined at:
   994 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
   995 ;; Parameters:    Size  Location     Type
   996 ;;  multiplier      2    0[BANK0 ] unsigned int 
   997 ;;  multiplicand    2    2[BANK0 ] unsigned int 
   998 ;; Auto vars:     Size  Location     Type
   999 ;;  product         2    4[BANK0 ] unsigned int 
  1000 ;; Return value:  Size  Location     Type
  1001 ;;                  2    0[BANK0 ] unsigned int 
  1002 ;; Registers used:
  1003 ;;		wreg, status,2, status,0
  1004 ;; Tracked objects:
  1005 ;;		On entry : 0/0
  1006 ;;		On exit  : 0/0
  1007 ;;		Unchanged: 0/0
  1008 ;; Data sizes:     COMMON   BANK0
  1009 ;;      Params:         0       4
  1010 ;;      Locals:         0       2
  1011 ;;      Temps:          0       0
  1012 ;;      Totals:         0       6
  1013 ;;Total ram usage:        6 bytes
  1014 ;; Hardware stack levels used:    1
  1015 ;; This function calls:
  1016 ;;		Nothing
  1017 ;; This function is called by:
  1018 ;;		_WriteVoltage
  1019 ;; This function uses a non-reentrant model
  1020 ;;
  1021                           
  1022                           
  1023                           ;psect for function ___wmul
  1024  0111                     ___wmul:	
  1025                           
  1026                           ;incstack = 0
  1027                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1028  0111  1283               	bcf	3,5	;RP0=0, select bank0
  1029  0112  0190               	clrf	___wmul@product
  1030  0113  0191               	clrf	___wmul@product+1
  1031  0114                     l1028:	
  1032  0114  1C0C               	btfss	___wmul@multiplier,0
  1033  0115  291C               	goto	l212
  1034  0116  080E               	movf	___wmul@multiplicand,w
  1035  0117  0790               	addwf	___wmul@product,f
  1036  0118  1803               	skipnc
  1037  0119  0A91               	incf	___wmul@product+1,f
  1038  011A  080F               	movf	___wmul@multiplicand+1,w
  1039  011B  0791               	addwf	___wmul@product+1,f
  1040  011C                     l212:	
  1041  011C  3001               	movlw	1
  1042  011D                     u685:	
  1043  011D  1003               	clrc
  1044  011E  0D8E               	rlf	___wmul@multiplicand,f
  1045  011F  0D8F               	rlf	___wmul@multiplicand+1,f
  1046  0120  3EFF               	addlw	-1
  1047  0121  1D03               	skipz
  1048  0122  291D               	goto	u685
  1049  0123  3001               	movlw	1
  1050  0124                     u695:	
  1051  0124  1003               	clrc
  1052  0125  0C8D               	rrf	___wmul@multiplier+1,f
  1053  0126  0C8C               	rrf	___wmul@multiplier,f
  1054  0127  3EFF               	addlw	-1
  1055  0128  1D03               	skipz
  1056  0129  2924               	goto	u695
  1057  012A  080C               	movf	___wmul@multiplier,w
  1058  012B  040D               	iorwf	___wmul@multiplier+1,w
  1059  012C  1D03               	btfss	3,2
  1060  012D  2914               	goto	l1028
  1061  012E  0811               	movf	___wmul@product+1,w
  1062  012F  008D               	movwf	?___wmul+1
  1063  0130  0810               	movf	___wmul@product,w
  1064  0131  008C               	movwf	?___wmul
  1065  0132  0008               	return
  1066  0133                     __end_of___wmul:	
  1067                           
  1068                           	psect	text4
  1069  00D5                     __ptext4:	
  1070 ;; *************** function _Lcd_Write_Int *****************
  1071 ;; Defined at:
  1072 ;;		line 120 in file "lcd.c"
  1073 ;; Parameters:    Size  Location     Type
  1074 ;;  a               2   23[BANK0 ] unsigned int 
  1075 ;; Auto vars:     Size  Location     Type
  1076 ;;  temp           16   25[BANK0 ] unsigned char [16]
  1077 ;; Return value:  Size  Location     Type
  1078 ;;		None               void
  1079 ;; Registers used:
  1080 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1081 ;; Tracked objects:
  1082 ;;		On entry : 0/0
  1083 ;;		On exit  : 0/0
  1084 ;;		Unchanged: 0/0
  1085 ;; Data sizes:     COMMON   BANK0
  1086 ;;      Params:         0       2
  1087 ;;      Locals:         0      16
  1088 ;;      Temps:          0       0
  1089 ;;      Totals:         0      18
  1090 ;;Total ram usage:       18 bytes
  1091 ;; Hardware stack levels used:    1
  1092 ;; Hardware stack levels required when called:    3
  1093 ;; This function calls:
  1094 ;;		_Lcd_Write_String
  1095 ;;		_utoa
  1096 ;; This function is called by:
  1097 ;;		_WriteVoltage
  1098 ;; This function uses a non-reentrant model
  1099 ;;
  1100                           
  1101                           
  1102                           ;psect for function _Lcd_Write_Int
  1103  00D5                     _Lcd_Write_Int:	
  1104                           
  1105                           ;lcd.c: 122: char temp[16];
  1106                           ;lcd.c: 123: utoa((char*)temp, a, 10);
  1107                           
  1108                           ;incstack = 0
  1109                           ; Regs used in _Lcd_Write_Int: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1110  00D5  1283               	bcf	3,5	;RP0=0, select bank0
  1111  00D6  0824               	movf	Lcd_Write_Int@a+1,w
  1112  00D7  009B               	movwf	utoa@val+1
  1113  00D8  0823               	movf	Lcd_Write_Int@a,w
  1114  00D9  009A               	movwf	utoa@val
  1115  00DA  300A               	movlw	10
  1116  00DB  009C               	movwf	utoa@base
  1117  00DC  3000               	movlw	0
  1118  00DD  009D               	movwf	utoa@base+1
  1119  00DE  3025               	movlw	(low (Lcd_Write_Int@temp| 0))& (0+255)
  1120  00DF  22CE               	fcall	_utoa
  1121                           
  1122                           ;lcd.c: 124: Lcd_Write_String(temp);
  1123  00E0  3025               	movlw	(low (Lcd_Write_Int@temp| 0))& (0+255)
  1124  00E1  1283               	bcf	3,5	;RP0=0, select bank0
  1125  00E2  0091               	movwf	Lcd_Write_String@a
  1126  00E3  3000               	movlw	0
  1127  00E4  0092               	movwf	Lcd_Write_String@a+1
  1128  00E5  215D               	fcall	_Lcd_Write_String
  1129  00E6  0008               	return
  1130  00E7                     __end_of_Lcd_Write_Int:	
  1131                           
  1132                           	psect	text5
  1133  02CE                     __ptext5:	
  1134 ;; *************** function _utoa *****************
  1135 ;; Defined at:
  1136 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\itoa.c"
  1137 ;; Parameters:    Size  Location     Type
  1138 ;;  buf             1    wreg     PTR unsigned char 
  1139 ;;		 -> Lcd_Write_Int@temp(16), 
  1140 ;;  val             2   14[BANK0 ] unsigned int 
  1141 ;;  base            2   16[BANK0 ] int 
  1142 ;; Auto vars:     Size  Location     Type
  1143 ;;  buf             1   22[BANK0 ] PTR unsigned char 
  1144 ;;		 -> Lcd_Write_Int@temp(16), 
  1145 ;;  v               2   19[BANK0 ] unsigned int 
  1146 ;;  c               1   21[BANK0 ] unsigned char 
  1147 ;; Return value:  Size  Location     Type
  1148 ;;                  1    wreg      PTR unsigned char 
  1149 ;; Registers used:
  1150 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1151 ;; Tracked objects:
  1152 ;;		On entry : 0/0
  1153 ;;		On exit  : 0/0
  1154 ;;		Unchanged: 0/0
  1155 ;; Data sizes:     COMMON   BANK0
  1156 ;;      Params:         0       4
  1157 ;;      Locals:         0       4
  1158 ;;      Temps:          0       1
  1159 ;;      Totals:         0       9
  1160 ;;Total ram usage:        9 bytes
  1161 ;; Hardware stack levels used:    1
  1162 ;; Hardware stack levels required when called:    1
  1163 ;; This function calls:
  1164 ;;		___lwdiv
  1165 ;;		___lwmod
  1166 ;; This function is called by:
  1167 ;;		_Lcd_Write_Int
  1168 ;; This function uses a non-reentrant model
  1169 ;;
  1170                           
  1171                           
  1172                           ;psect for function _utoa
  1173  02CE                     _utoa:	
  1174                           
  1175                           ;incstack = 0
  1176                           ; Regs used in _utoa: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1177                           ;utoa@buf stored from wreg
  1178  02CE  1283               	bcf	3,5	;RP0=0, select bank0
  1179  02CF  00A2               	movwf	utoa@buf
  1180  02D0  081B               	movf	utoa@val+1,w
  1181  02D1  00A0               	movwf	utoa@v+1
  1182  02D2  081A               	movf	utoa@val,w
  1183  02D3  009F               	movwf	utoa@v
  1184  02D4                     l984:	
  1185  02D4  081D               	movf	utoa@base+1,w
  1186  02D5  0093               	movwf	___lwdiv@divisor+1
  1187  02D6  081C               	movf	utoa@base,w
  1188  02D7  0092               	movwf	___lwdiv@divisor
  1189  02D8  0820               	movf	utoa@v+1,w
  1190  02D9  0095               	movwf	___lwdiv@dividend+1
  1191  02DA  081F               	movf	utoa@v,w
  1192  02DB  0094               	movwf	___lwdiv@dividend
  1193  02DC  21F5               	fcall	___lwdiv
  1194  02DD  1283               	bcf	3,5	;RP0=0, select bank0
  1195  02DE  0813               	movf	?___lwdiv+1,w
  1196  02DF  00A0               	movwf	utoa@v+1
  1197  02E0  0812               	movf	?___lwdiv,w
  1198  02E1  009F               	movwf	utoa@v
  1199  02E2  3001               	movlw	1
  1200  02E3  009E               	movwf	??_utoa
  1201  02E4  081E               	movf	??_utoa,w
  1202  02E5  07A2               	addwf	utoa@buf,f
  1203  02E6  081F               	movf	utoa@v,w
  1204  02E7  0420               	iorwf	utoa@v+1,w
  1205  02E8  1D03               	btfss	3,2
  1206  02E9  2AD4               	goto	l984
  1207  02EA  0822               	movf	utoa@buf,w
  1208  02EB  0084               	movwf	4
  1209  02EC  1383               	bcf	3,7	;select IRP bank0
  1210  02ED  0180               	clrf	0
  1211  02EE  3001               	movlw	1
  1212  02EF  02A2               	subwf	utoa@buf,f
  1213  02F0                     l994:	
  1214  02F0  081D               	movf	utoa@base+1,w
  1215  02F1  0093               	movwf	___lwmod@divisor+1
  1216  02F2  081C               	movf	utoa@base,w
  1217  02F3  0092               	movwf	___lwmod@divisor
  1218  02F4  081B               	movf	utoa@val+1,w
  1219  02F5  0095               	movwf	___lwmod@dividend+1
  1220  02F6  081A               	movf	utoa@val,w
  1221  02F7  0094               	movwf	___lwmod@dividend
  1222  02F8  218E               	fcall	___lwmod
  1223  02F9  1283               	bcf	3,5	;RP0=0, select bank0
  1224  02FA  0812               	movf	?___lwmod,w
  1225  02FB  009E               	movwf	??_utoa
  1226  02FC  081E               	movf	??_utoa,w
  1227  02FD  00A1               	movwf	utoa@c
  1228  02FE  081D               	movf	utoa@base+1,w
  1229  02FF  0093               	movwf	___lwdiv@divisor+1
  1230  0300  081C               	movf	utoa@base,w
  1231  0301  0092               	movwf	___lwdiv@divisor
  1232  0302  081B               	movf	utoa@val+1,w
  1233  0303  0095               	movwf	___lwdiv@dividend+1
  1234  0304  081A               	movf	utoa@val,w
  1235  0305  0094               	movwf	___lwdiv@dividend
  1236  0306  21F5               	fcall	___lwdiv
  1237  0307  1283               	bcf	3,5	;RP0=0, select bank0
  1238  0308  0813               	movf	?___lwdiv+1,w
  1239  0309  009B               	movwf	utoa@val+1
  1240  030A  0812               	movf	?___lwdiv,w
  1241  030B  009A               	movwf	utoa@val
  1242  030C  300A               	movlw	10
  1243  030D  0221               	subwf	utoa@c,w
  1244  030E  1C03               	skipc
  1245  030F  2B14               	goto	l479
  1246  0310  3007               	movlw	7
  1247  0311  009E               	movwf	??_utoa
  1248  0312  081E               	movf	??_utoa,w
  1249  0313  07A1               	addwf	utoa@c,f
  1250  0314                     l479:	
  1251  0314  3030               	movlw	48
  1252  0315  009E               	movwf	??_utoa
  1253  0316  081E               	movf	??_utoa,w
  1254  0317  07A1               	addwf	utoa@c,f
  1255  0318  0821               	movf	utoa@c,w
  1256  0319  009E               	movwf	??_utoa
  1257  031A  0822               	movf	utoa@buf,w
  1258  031B  0084               	movwf	4
  1259  031C  081E               	movf	??_utoa,w
  1260  031D  1383               	bcf	3,7	;select IRP bank0
  1261  031E  0080               	movwf	0
  1262  031F  3001               	movlw	1
  1263  0320  02A2               	subwf	utoa@buf,f
  1264  0321  081A               	movf	utoa@val,w
  1265  0322  041B               	iorwf	utoa@val+1,w
  1266  0323  1D03               	btfss	3,2
  1267  0324  2AF0               	goto	l994
  1268                           
  1269                           ;	Return value of _utoa is never used
  1270  0325  3001               	movlw	1
  1271  0326  009E               	movwf	??_utoa
  1272  0327  081E               	movf	??_utoa,w
  1273  0328  07A2               	addwf	utoa@buf,f
  1274  0329  0008               	return
  1275  032A                     __end_of_utoa:	
  1276                           
  1277                           	psect	text6
  1278  018E                     __ptext6:	
  1279 ;; *************** function ___lwmod *****************
  1280 ;; Defined at:
  1281 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  1282 ;; Parameters:    Size  Location     Type
  1283 ;;  divisor         2    6[BANK0 ] unsigned int 
  1284 ;;  dividend        2    8[BANK0 ] unsigned int 
  1285 ;; Auto vars:     Size  Location     Type
  1286 ;;  counter         1   11[BANK0 ] unsigned char 
  1287 ;; Return value:  Size  Location     Type
  1288 ;;                  2    6[BANK0 ] unsigned int 
  1289 ;; Registers used:
  1290 ;;		wreg, status,2, status,0
  1291 ;; Tracked objects:
  1292 ;;		On entry : 0/0
  1293 ;;		On exit  : 0/0
  1294 ;;		Unchanged: 0/0
  1295 ;; Data sizes:     COMMON   BANK0
  1296 ;;      Params:         0       4
  1297 ;;      Locals:         0       1
  1298 ;;      Temps:          0       1
  1299 ;;      Totals:         0       6
  1300 ;;Total ram usage:        6 bytes
  1301 ;; Hardware stack levels used:    1
  1302 ;; This function calls:
  1303 ;;		Nothing
  1304 ;; This function is called by:
  1305 ;;		_WriteVoltage
  1306 ;;		_utoa
  1307 ;; This function uses a non-reentrant model
  1308 ;;
  1309                           
  1310                           
  1311                           ;psect for function ___lwmod
  1312  018E                     ___lwmod:	
  1313                           
  1314                           ;incstack = 0
  1315                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1316  018E  1283               	bcf	3,5	;RP0=0, select bank0
  1317  018F  0812               	movf	___lwmod@divisor,w
  1318  0190  0413               	iorwf	___lwmod@divisor+1,w
  1319  0191  1903               	btfsc	3,2
  1320  0192  29BC               	goto	l970
  1321  0193  0197               	clrf	___lwmod@counter
  1322  0194  0A97               	incf	___lwmod@counter,f
  1323  0195                     l960:	
  1324  0195  1B93               	btfsc	___lwmod@divisor+1,7
  1325  0196  29A3               	goto	l962
  1326  0197  3001               	movlw	1
  1327  0198                     u565:	
  1328  0198  1003               	clrc
  1329  0199  0D92               	rlf	___lwmod@divisor,f
  1330  019A  0D93               	rlf	___lwmod@divisor+1,f
  1331  019B  3EFF               	addlw	-1
  1332  019C  1D03               	skipz
  1333  019D  2998               	goto	u565
  1334  019E  3001               	movlw	1
  1335  019F  0096               	movwf	??___lwmod
  1336  01A0  0816               	movf	??___lwmod,w
  1337  01A1  0797               	addwf	___lwmod@counter,f
  1338  01A2  2995               	goto	l960
  1339  01A3                     l962:	
  1340  01A3  0813               	movf	___lwmod@divisor+1,w
  1341  01A4  0215               	subwf	___lwmod@dividend+1,w
  1342  01A5  1D03               	skipz
  1343  01A6  29A9               	goto	u585
  1344  01A7  0812               	movf	___lwmod@divisor,w
  1345  01A8  0214               	subwf	___lwmod@dividend,w
  1346  01A9                     u585:	
  1347  01A9  1C03               	skipc
  1348  01AA  29B1               	goto	l966
  1349  01AB  0812               	movf	___lwmod@divisor,w
  1350  01AC  0294               	subwf	___lwmod@dividend,f
  1351  01AD  0813               	movf	___lwmod@divisor+1,w
  1352  01AE  1C03               	skipc
  1353  01AF  0395               	decf	___lwmod@dividend+1,f
  1354  01B0  0295               	subwf	___lwmod@dividend+1,f
  1355  01B1                     l966:	
  1356  01B1  3001               	movlw	1
  1357  01B2                     u595:	
  1358  01B2  1003               	clrc
  1359  01B3  0C93               	rrf	___lwmod@divisor+1,f
  1360  01B4  0C92               	rrf	___lwmod@divisor,f
  1361  01B5  3EFF               	addlw	-1
  1362  01B6  1D03               	skipz
  1363  01B7  29B2               	goto	u595
  1364  01B8  3001               	movlw	1
  1365  01B9  0297               	subwf	___lwmod@counter,f
  1366  01BA  1D03               	btfss	3,2
  1367  01BB  29A3               	goto	l962
  1368  01BC                     l970:	
  1369  01BC  0815               	movf	___lwmod@dividend+1,w
  1370  01BD  0093               	movwf	?___lwmod+1
  1371  01BE  0814               	movf	___lwmod@dividend,w
  1372  01BF  0092               	movwf	?___lwmod
  1373  01C0  0008               	return
  1374  01C1                     __end_of___lwmod:	
  1375                           
  1376                           	psect	text7
  1377  01F5                     __ptext7:	
  1378 ;; *************** function ___lwdiv *****************
  1379 ;; Defined at:
  1380 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  1381 ;; Parameters:    Size  Location     Type
  1382 ;;  divisor         2    6[BANK0 ] unsigned int 
  1383 ;;  dividend        2    8[BANK0 ] unsigned int 
  1384 ;; Auto vars:     Size  Location     Type
  1385 ;;  quotient        2   11[BANK0 ] unsigned int 
  1386 ;;  counter         1   13[BANK0 ] unsigned char 
  1387 ;; Return value:  Size  Location     Type
  1388 ;;                  2    6[BANK0 ] unsigned int 
  1389 ;; Registers used:
  1390 ;;		wreg, status,2, status,0
  1391 ;; Tracked objects:
  1392 ;;		On entry : 0/0
  1393 ;;		On exit  : 0/0
  1394 ;;		Unchanged: 0/0
  1395 ;; Data sizes:     COMMON   BANK0
  1396 ;;      Params:         0       4
  1397 ;;      Locals:         0       3
  1398 ;;      Temps:          0       1
  1399 ;;      Totals:         0       8
  1400 ;;Total ram usage:        8 bytes
  1401 ;; Hardware stack levels used:    1
  1402 ;; This function calls:
  1403 ;;		Nothing
  1404 ;; This function is called by:
  1405 ;;		_WriteVoltage
  1406 ;;		_utoa
  1407 ;; This function uses a non-reentrant model
  1408 ;;
  1409                           
  1410                           
  1411                           ;psect for function ___lwdiv
  1412  01F5                     ___lwdiv:	
  1413                           
  1414                           ;incstack = 0
  1415                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1416  01F5  1283               	bcf	3,5	;RP0=0, select bank0
  1417  01F6  0197               	clrf	___lwdiv@quotient
  1418  01F7  0198               	clrf	___lwdiv@quotient+1
  1419  01F8  0812               	movf	___lwdiv@divisor,w
  1420  01F9  0413               	iorwf	___lwdiv@divisor+1,w
  1421  01FA  1903               	btfsc	3,2
  1422  01FB  2A2D               	goto	l948
  1423  01FC  0199               	clrf	___lwdiv@counter
  1424  01FD  0A99               	incf	___lwdiv@counter,f
  1425  01FE                     l936:	
  1426  01FE  1B93               	btfsc	___lwdiv@divisor+1,7
  1427  01FF  2A0C               	goto	l938
  1428  0200  3001               	movlw	1
  1429  0201                     u495:	
  1430  0201  1003               	clrc
  1431  0202  0D92               	rlf	___lwdiv@divisor,f
  1432  0203  0D93               	rlf	___lwdiv@divisor+1,f
  1433  0204  3EFF               	addlw	-1
  1434  0205  1D03               	skipz
  1435  0206  2A01               	goto	u495
  1436  0207  3001               	movlw	1
  1437  0208  0096               	movwf	??___lwdiv
  1438  0209  0816               	movf	??___lwdiv,w
  1439  020A  0799               	addwf	___lwdiv@counter,f
  1440  020B  29FE               	goto	l936
  1441  020C                     l938:	
  1442  020C  3001               	movlw	1
  1443  020D                     u515:	
  1444  020D  1003               	clrc
  1445  020E  0D97               	rlf	___lwdiv@quotient,f
  1446  020F  0D98               	rlf	___lwdiv@quotient+1,f
  1447  0210  3EFF               	addlw	-1
  1448  0211  1D03               	skipz
  1449  0212  2A0D               	goto	u515
  1450  0213  0813               	movf	___lwdiv@divisor+1,w
  1451  0214  0215               	subwf	___lwdiv@dividend+1,w
  1452  0215  1D03               	skipz
  1453  0216  2A19               	goto	u525
  1454  0217  0812               	movf	___lwdiv@divisor,w
  1455  0218  0214               	subwf	___lwdiv@dividend,w
  1456  0219                     u525:	
  1457  0219  1C03               	skipc
  1458  021A  2A22               	goto	l944
  1459  021B  0812               	movf	___lwdiv@divisor,w
  1460  021C  0294               	subwf	___lwdiv@dividend,f
  1461  021D  0813               	movf	___lwdiv@divisor+1,w
  1462  021E  1C03               	skipc
  1463  021F  0395               	decf	___lwdiv@dividend+1,f
  1464  0220  0295               	subwf	___lwdiv@dividend+1,f
  1465  0221  1417               	bsf	___lwdiv@quotient,0
  1466  0222                     l944:	
  1467  0222  3001               	movlw	1
  1468  0223                     u535:	
  1469  0223  1003               	clrc
  1470  0224  0C93               	rrf	___lwdiv@divisor+1,f
  1471  0225  0C92               	rrf	___lwdiv@divisor,f
  1472  0226  3EFF               	addlw	-1
  1473  0227  1D03               	skipz
  1474  0228  2A23               	goto	u535
  1475  0229  3001               	movlw	1
  1476  022A  0299               	subwf	___lwdiv@counter,f
  1477  022B  1D03               	btfss	3,2
  1478  022C  2A0C               	goto	l938
  1479  022D                     l948:	
  1480  022D  0818               	movf	___lwdiv@quotient+1,w
  1481  022E  0093               	movwf	?___lwdiv+1
  1482  022F  0817               	movf	___lwdiv@quotient,w
  1483  0230  0092               	movwf	?___lwdiv
  1484  0231  0008               	return
  1485  0232                     __end_of___lwdiv:	
  1486                           
  1487                           	psect	text8
  1488  015D                     __ptext8:	
  1489 ;; *************** function _Lcd_Write_String *****************
  1490 ;; Defined at:
  1491 ;;		line 110 in file "lcd.c"
  1492 ;; Parameters:    Size  Location     Type
  1493 ;;  a               2    5[BANK0 ] PTR unsigned char 
  1494 ;;		 -> Lcd_Write_Int@temp(16), STR_1(31), 
  1495 ;; Auto vars:     Size  Location     Type
  1496 ;;  i               2   10[BANK0 ] int 
  1497 ;; Return value:  Size  Location     Type
  1498 ;;		None               void
  1499 ;; Registers used:
  1500 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1501 ;; Tracked objects:
  1502 ;;		On entry : 0/0
  1503 ;;		On exit  : 0/0
  1504 ;;		Unchanged: 0/0
  1505 ;; Data sizes:     COMMON   BANK0
  1506 ;;      Params:         0       2
  1507 ;;      Locals:         0       2
  1508 ;;      Temps:          0       3
  1509 ;;      Totals:         0       7
  1510 ;;Total ram usage:        7 bytes
  1511 ;; Hardware stack levels used:    1
  1512 ;; Hardware stack levels required when called:    2
  1513 ;; This function calls:
  1514 ;;		_Lcd_Write_Char
  1515 ;; This function is called by:
  1516 ;;		_main
  1517 ;;		_Lcd_Write_Int
  1518 ;; This function uses a non-reentrant model
  1519 ;;
  1520                           
  1521                           
  1522                           ;psect for function _Lcd_Write_String
  1523  015D                     _Lcd_Write_String:	
  1524                           
  1525                           ;lcd.c: 112: int i;
  1526                           ;lcd.c: 113: for(i=0;a[i]!='\0';i++)
  1527                           
  1528                           ;incstack = 0
  1529                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1530  015D  1283               	bcf	3,5	;RP0=0, select bank0
  1531  015E  0196               	clrf	Lcd_Write_String@i
  1532  015F  0197               	clrf	Lcd_Write_String@i+1
  1533  0160                     l980:	
  1534  0160  0816               	movf	Lcd_Write_String@i,w
  1535  0161  0711               	addwf	Lcd_Write_String@a,w
  1536  0162  0094               	movwf	??_Lcd_Write_String+1
  1537  0163  0812               	movf	Lcd_Write_String@a+1,w
  1538  0164  0093               	movwf	??_Lcd_Write_String
  1539  0165  1803               	skipnc
  1540  0166  0A93               	incf	??_Lcd_Write_String,f
  1541  0167  1B96               	btfsc	Lcd_Write_String@i,7
  1542  0168  0393               	decf	??_Lcd_Write_String,f
  1543  0169  1283               	bcf	3,5	;RP0=0, select bank0
  1544  016A  0813               	movf	??_Lcd_Write_String,w
  1545  016B  0095               	movwf	??_Lcd_Write_String+2
  1546  016C  0815               	movf	??_Lcd_Write_String+2,w
  1547  016D  00CF               	movwf	79
  1548  016E  0814               	movf	??_Lcd_Write_String+1,w
  1549  016F  0084               	movwf	4
  1550  0170  2001               	fcall	stringtab
  1551  0171  3A00               	xorlw	0
  1552  0172  1903               	btfsc	3,2
  1553  0173  0008               	return
  1554                           
  1555                           ;lcd.c: 114: {
  1556                           ;lcd.c: 115: Lcd_Write_Char(a[i]);
  1557  0174  0816               	movf	Lcd_Write_String@i,w
  1558  0175  0711               	addwf	Lcd_Write_String@a,w
  1559  0176  0094               	movwf	??_Lcd_Write_String+1
  1560  0177  0812               	movf	Lcd_Write_String@a+1,w
  1561  0178  0093               	movwf	??_Lcd_Write_String
  1562  0179  1803               	skipnc
  1563  017A  0A93               	incf	??_Lcd_Write_String,f
  1564  017B  1B96               	btfsc	Lcd_Write_String@i,7
  1565  017C  0393               	decf	??_Lcd_Write_String,f
  1566  017D  1283               	bcf	3,5	;RP0=0, select bank0
  1567  017E  0813               	movf	??_Lcd_Write_String,w
  1568  017F  0095               	movwf	??_Lcd_Write_String+2
  1569  0180  0815               	movf	??_Lcd_Write_String+2,w
  1570  0181  00CF               	movwf	79
  1571  0182  0814               	movf	??_Lcd_Write_String+1,w
  1572  0183  0084               	movwf	4
  1573  0184  2001               	fcall	stringtab
  1574  0185  2133               	fcall	_Lcd_Write_Char
  1575  0186  3001               	movlw	1
  1576  0187  1283               	bcf	3,5	;RP0=0, select bank0
  1577  0188  0796               	addwf	Lcd_Write_String@i,f
  1578  0189  1803               	skipnc
  1579  018A  0A97               	incf	Lcd_Write_String@i+1,f
  1580  018B  3000               	movlw	0
  1581  018C  0797               	addwf	Lcd_Write_String@i+1,f
  1582  018D  2960               	goto	l980
  1583  018E                     __end_of_Lcd_Write_String:	
  1584                           
  1585                           	psect	text9
  1586  0133                     __ptext9:	
  1587 ;; *************** function _Lcd_Write_Char *****************
  1588 ;; Defined at:
  1589 ;;		line 93 in file "lcd.c"
  1590 ;; Parameters:    Size  Location     Type
  1591 ;;  a               1    wreg     unsigned char 
  1592 ;; Auto vars:     Size  Location     Type
  1593 ;;  a               1    4[BANK0 ] unsigned char 
  1594 ;;  y               1    3[BANK0 ] unsigned char 
  1595 ;;  temp            1    2[BANK0 ] unsigned char 
  1596 ;; Return value:  Size  Location     Type
  1597 ;;		None               void
  1598 ;; Registers used:
  1599 ;;		wreg, status,2, status,0, pclath, cstack
  1600 ;; Tracked objects:
  1601 ;;		On entry : 0/0
  1602 ;;		On exit  : 0/0
  1603 ;;		Unchanged: 0/0
  1604 ;; Data sizes:     COMMON   BANK0
  1605 ;;      Params:         0       0
  1606 ;;      Locals:         0       3
  1607 ;;      Temps:          0       1
  1608 ;;      Totals:         0       4
  1609 ;;Total ram usage:        4 bytes
  1610 ;; Hardware stack levels used:    1
  1611 ;; Hardware stack levels required when called:    1
  1612 ;; This function calls:
  1613 ;;		_Lcd_Port
  1614 ;; This function is called by:
  1615 ;;		_WriteVoltage
  1616 ;;		_main
  1617 ;;		_Lcd_Write_String
  1618 ;; This function uses a non-reentrant model
  1619 ;;
  1620                           
  1621                           
  1622                           ;psect for function _Lcd_Write_Char
  1623  0133                     _Lcd_Write_Char:	
  1624                           
  1625                           ;incstack = 0
  1626                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  1627                           ;Lcd_Write_Char@a stored from wreg
  1628  0133  1283               	bcf	3,5	;RP0=0, select bank0
  1629  0134  0090               	movwf	Lcd_Write_Char@a
  1630                           
  1631                           ;lcd.c: 95: char temp,y;
  1632                           ;lcd.c: 96: temp = a&0x0F;
  1633  0135  0810               	movf	Lcd_Write_Char@a,w
  1634  0136  390F               	andlw	15
  1635  0137  008D               	movwf	??_Lcd_Write_Char
  1636  0138  080D               	movf	??_Lcd_Write_Char,w
  1637  0139  008E               	movwf	Lcd_Write_Char@temp
  1638                           
  1639                           ;lcd.c: 97: y = a&0xF0;
  1640  013A  0810               	movf	Lcd_Write_Char@a,w
  1641  013B  39F0               	andlw	240
  1642  013C  008D               	movwf	??_Lcd_Write_Char
  1643  013D  080D               	movf	??_Lcd_Write_Char,w
  1644  013E  008F               	movwf	Lcd_Write_Char@y
  1645                           
  1646                           ;lcd.c: 98: RB4 = 1;
  1647  013F  1606               	bsf	6,4	;volatile
  1648                           
  1649                           ;lcd.c: 99: Lcd_Port(y>>4);
  1650  0140  080F               	movf	Lcd_Write_Char@y,w
  1651  0141  008D               	movwf	??_Lcd_Write_Char
  1652  0142  3004               	movlw	4
  1653  0143                     u475:	
  1654  0143  1003               	clrc
  1655  0144  0C8D               	rrf	??_Lcd_Write_Char,f
  1656  0145  3EFF               	addlw	-1
  1657  0146  1D03               	skipz
  1658  0147  2943               	goto	u475
  1659  0148  080D               	movf	??_Lcd_Write_Char,w
  1660  0149  20FA               	fcall	_Lcd_Port
  1661                           
  1662                           ;lcd.c: 100: RB6 = 1;
  1663  014A  1283               	bcf	3,5	;RP0=0, select bank0
  1664  014B  1706               	bsf	6,6	;volatile
  1665                           
  1666                           ;lcd.c: 101: _delay((unsigned long)((40)*(4000000/4000000.0)));
  1667  014C  300D               	movlw	13
  1668  014D  008D               	movwf	??_Lcd_Write_Char
  1669  014E                     u937:	
  1670  014E  0B8D               	decfsz	??_Lcd_Write_Char,f
  1671  014F  294E               	goto	u937
  1672                           
  1673                           ;lcd.c: 102: RB6 = 0;
  1674  0150  1283               	bcf	3,5	;RP0=0, select bank0
  1675  0151  1306               	bcf	6,6	;volatile
  1676                           
  1677                           ;lcd.c: 103: Lcd_Port(temp);
  1678  0152  080E               	movf	Lcd_Write_Char@temp,w
  1679  0153  20FA               	fcall	_Lcd_Port
  1680                           
  1681                           ;lcd.c: 104: RB6 = 1;
  1682  0154  1283               	bcf	3,5	;RP0=0, select bank0
  1683  0155  1706               	bsf	6,6	;volatile
  1684                           
  1685                           ;lcd.c: 105: _delay((unsigned long)((40)*(4000000/4000000.0)));
  1686  0156  300D               	movlw	13
  1687  0157  008D               	movwf	??_Lcd_Write_Char
  1688  0158                     u947:	
  1689  0158  0B8D               	decfsz	??_Lcd_Write_Char,f
  1690  0159  2958               	goto	u947
  1691                           
  1692                           ;lcd.c: 106: RB6 = 0;
  1693  015A  1283               	bcf	3,5	;RP0=0, select bank0
  1694  015B  1306               	bcf	6,6	;volatile
  1695  015C  0008               	return
  1696  015D                     __end_of_Lcd_Write_Char:	
  1697                           
  1698                           	psect	text10
  1699  00C1                     __ptext10:	
  1700 ;; *************** function _Lcd_Shift_Left *****************
  1701 ;; Defined at:
  1702 ;;		line 133 in file "lcd.c"
  1703 ;; Parameters:    Size  Location     Type
  1704 ;;		None
  1705 ;; Auto vars:     Size  Location     Type
  1706 ;;		None
  1707 ;; Return value:  Size  Location     Type
  1708 ;;		None               void
  1709 ;; Registers used:
  1710 ;;		wreg, status,2, status,0, pclath, cstack
  1711 ;; Tracked objects:
  1712 ;;		On entry : 0/0
  1713 ;;		On exit  : 0/0
  1714 ;;		Unchanged: 0/0
  1715 ;; Data sizes:     COMMON   BANK0
  1716 ;;      Params:         0       0
  1717 ;;      Locals:         0       0
  1718 ;;      Temps:          0       0
  1719 ;;      Totals:         0       0
  1720 ;;Total ram usage:        0 bytes
  1721 ;; Hardware stack levels used:    1
  1722 ;; Hardware stack levels required when called:    2
  1723 ;; This function calls:
  1724 ;;		_Lcd_Cmd
  1725 ;; This function is called by:
  1726 ;;		_main
  1727 ;; This function uses a non-reentrant model
  1728 ;;
  1729                           
  1730                           
  1731                           ;psect for function _Lcd_Shift_Left
  1732  00C1                     _Lcd_Shift_Left:	
  1733                           
  1734                           ;lcd.c: 135: Lcd_Cmd(0x01);
  1735                           
  1736                           ;incstack = 0
  1737                           ; Regs used in _Lcd_Shift_Left: [wreg+status,2+status,0+pclath+cstack]
  1738  00C1  3001               	movlw	1
  1739  00C2  20E7               	fcall	_Lcd_Cmd
  1740                           
  1741                           ;lcd.c: 136: Lcd_Cmd(0x08);
  1742  00C3  3008               	movlw	8
  1743  00C4  20E7               	fcall	_Lcd_Cmd
  1744  00C5  0008               	return
  1745  00C6                     __end_of_Lcd_Shift_Left:	
  1746                           
  1747                           	psect	text11
  1748  0232                     __ptext11:	
  1749 ;; *************** function _Lcd_Set_Cursor *****************
  1750 ;; Defined at:
  1751 ;;		line 51 in file "lcd.c"
  1752 ;; Parameters:    Size  Location     Type
  1753 ;;  a               1    wreg     unsigned char 
  1754 ;;  b               1    4[BANK0 ] unsigned char 
  1755 ;; Auto vars:     Size  Location     Type
  1756 ;;  a               1    7[BANK0 ] unsigned char 
  1757 ;;  temp            1   10[BANK0 ] unsigned char 
  1758 ;;  y               1    9[BANK0 ] unsigned char 
  1759 ;;  z               1    8[BANK0 ] unsigned char 
  1760 ;; Return value:  Size  Location     Type
  1761 ;;		None               void
  1762 ;; Registers used:
  1763 ;;		wreg, status,2, status,0, pclath, cstack
  1764 ;; Tracked objects:
  1765 ;;		On entry : 0/0
  1766 ;;		On exit  : 0/0
  1767 ;;		Unchanged: 0/0
  1768 ;; Data sizes:     COMMON   BANK0
  1769 ;;      Params:         0       1
  1770 ;;      Locals:         0       4
  1771 ;;      Temps:          0       2
  1772 ;;      Totals:         0       7
  1773 ;;Total ram usage:        7 bytes
  1774 ;; Hardware stack levels used:    1
  1775 ;; Hardware stack levels required when called:    2
  1776 ;; This function calls:
  1777 ;;		_Lcd_Cmd
  1778 ;; This function is called by:
  1779 ;;		_main
  1780 ;; This function uses a non-reentrant model
  1781 ;;
  1782                           
  1783                           
  1784                           ;psect for function _Lcd_Set_Cursor
  1785  0232                     _Lcd_Set_Cursor:	
  1786                           
  1787                           ;incstack = 0
  1788                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  1789                           ;Lcd_Set_Cursor@a stored from wreg
  1790  0232  1283               	bcf	3,5	;RP0=0, select bank0
  1791  0233  0093               	movwf	Lcd_Set_Cursor@a
  1792                           
  1793                           ;lcd.c: 53: char temp,z,y;
  1794                           ;lcd.c: 54: if(a == 1)
  1795  0234  0313               	decf	Lcd_Set_Cursor@a,w
  1796  0235  1D03               	btfss	3,2
  1797  0236  2A53               	goto	l1090
  1798                           
  1799                           ;lcd.c: 55: {
  1800                           ;lcd.c: 56: temp = (char) (0x80 + b - 1);
  1801  0237  0810               	movf	Lcd_Set_Cursor@b,w
  1802  0238  3E7F               	addlw	127
  1803  0239  0091               	movwf	??_Lcd_Set_Cursor
  1804  023A  0811               	movf	??_Lcd_Set_Cursor,w
  1805  023B  0096               	movwf	Lcd_Set_Cursor@temp
  1806                           
  1807                           ;lcd.c: 57: z = temp>>4;
  1808  023C  0816               	movf	Lcd_Set_Cursor@temp,w
  1809  023D  0091               	movwf	??_Lcd_Set_Cursor
  1810  023E  3004               	movlw	4
  1811  023F                     u745:	
  1812  023F  1003               	clrc
  1813  0240  0C91               	rrf	??_Lcd_Set_Cursor,f
  1814  0241  3EFF               	addlw	-1
  1815  0242  1D03               	skipz
  1816  0243  2A3F               	goto	u745
  1817  0244  0811               	movf	??_Lcd_Set_Cursor,w
  1818  0245  0092               	movwf	??_Lcd_Set_Cursor+1
  1819  0246  0812               	movf	??_Lcd_Set_Cursor+1,w
  1820  0247  0094               	movwf	Lcd_Set_Cursor@z
  1821                           
  1822                           ;lcd.c: 58: y = temp & 0x0F;
  1823  0248  0816               	movf	Lcd_Set_Cursor@temp,w
  1824  0249  390F               	andlw	15
  1825  024A  0091               	movwf	??_Lcd_Set_Cursor
  1826  024B  0811               	movf	??_Lcd_Set_Cursor,w
  1827  024C  0095               	movwf	Lcd_Set_Cursor@y
  1828                           
  1829                           ;lcd.c: 59: Lcd_Cmd(z);
  1830  024D  0814               	movf	Lcd_Set_Cursor@z,w
  1831  024E  20E7               	fcall	_Lcd_Cmd
  1832                           
  1833                           ;lcd.c: 60: Lcd_Cmd(y);
  1834  024F  1283               	bcf	3,5	;RP0=0, select bank0
  1835  0250  0815               	movf	Lcd_Set_Cursor@y,w
  1836  0251  20E7               	fcall	_Lcd_Cmd
  1837                           
  1838                           ;lcd.c: 61: }
  1839  0252  0008               	return
  1840  0253                     l1090:	
  1841                           
  1842                           ;lcd.c: 62: else if(a == 2)
  1843  0253  3002               	movlw	2
  1844  0254  1283               	bcf	3,5	;RP0=0, select bank0
  1845  0255  0613               	xorwf	Lcd_Set_Cursor@a,w
  1846  0256  1D03               	btfss	3,2
  1847  0257  0008               	return
  1848                           
  1849                           ;lcd.c: 63: {
  1850                           ;lcd.c: 64: temp = 0xC0 + b - 1;
  1851  0258  0810               	movf	Lcd_Set_Cursor@b,w
  1852  0259  3EBF               	addlw	191
  1853  025A  0091               	movwf	??_Lcd_Set_Cursor
  1854  025B  0811               	movf	??_Lcd_Set_Cursor,w
  1855  025C  0096               	movwf	Lcd_Set_Cursor@temp
  1856                           
  1857                           ;lcd.c: 65: z = temp>>4;
  1858  025D  0816               	movf	Lcd_Set_Cursor@temp,w
  1859  025E  0091               	movwf	??_Lcd_Set_Cursor
  1860  025F  3004               	movlw	4
  1861  0260                     u765:	
  1862  0260  1003               	clrc
  1863  0261  0C91               	rrf	??_Lcd_Set_Cursor,f
  1864  0262  3EFF               	addlw	-1
  1865  0263  1D03               	skipz
  1866  0264  2A60               	goto	u765
  1867  0265  0811               	movf	??_Lcd_Set_Cursor,w
  1868  0266  0092               	movwf	??_Lcd_Set_Cursor+1
  1869  0267  0812               	movf	??_Lcd_Set_Cursor+1,w
  1870  0268  0094               	movwf	Lcd_Set_Cursor@z
  1871                           
  1872                           ;lcd.c: 66: y = temp & 0x0F;
  1873  0269  0816               	movf	Lcd_Set_Cursor@temp,w
  1874  026A  390F               	andlw	15
  1875  026B  0091               	movwf	??_Lcd_Set_Cursor
  1876  026C  0811               	movf	??_Lcd_Set_Cursor,w
  1877  026D  0095               	movwf	Lcd_Set_Cursor@y
  1878                           
  1879                           ;lcd.c: 67: Lcd_Cmd(z);
  1880  026E  0814               	movf	Lcd_Set_Cursor@z,w
  1881  026F  20E7               	fcall	_Lcd_Cmd
  1882                           
  1883                           ;lcd.c: 68: Lcd_Cmd(y);
  1884  0270  1283               	bcf	3,5	;RP0=0, select bank0
  1885  0271  0815               	movf	Lcd_Set_Cursor@y,w
  1886  0272  20E7               	fcall	_Lcd_Cmd
  1887  0273  0008               	return
  1888  0274                     __end_of_Lcd_Set_Cursor:	
  1889                           
  1890                           	psect	text12
  1891  01C1                     __ptext12:	
  1892 ;; *************** function _Lcd_Init *****************
  1893 ;; Defined at:
  1894 ;;		line 73 in file "lcd.c"
  1895 ;; Parameters:    Size  Location     Type
  1896 ;;		None
  1897 ;; Auto vars:     Size  Location     Type
  1898 ;;		None
  1899 ;; Return value:  Size  Location     Type
  1900 ;;		None               void
  1901 ;; Registers used:
  1902 ;;		wreg, status,2, status,0, pclath, cstack
  1903 ;; Tracked objects:
  1904 ;;		On entry : 0/0
  1905 ;;		On exit  : 0/0
  1906 ;;		Unchanged: 0/0
  1907 ;; Data sizes:     COMMON   BANK0
  1908 ;;      Params:         0       0
  1909 ;;      Locals:         0       0
  1910 ;;      Temps:          0       2
  1911 ;;      Totals:         0       2
  1912 ;;Total ram usage:        2 bytes
  1913 ;; Hardware stack levels used:    1
  1914 ;; Hardware stack levels required when called:    2
  1915 ;; This function calls:
  1916 ;;		_Lcd_Cmd
  1917 ;;		_Lcd_Port
  1918 ;; This function is called by:
  1919 ;;		_main
  1920 ;; This function uses a non-reentrant model
  1921 ;;
  1922                           
  1923                           
  1924                           ;psect for function _Lcd_Init
  1925  01C1                     _Lcd_Init:	
  1926                           
  1927                           ;lcd.c: 75: Lcd_Port(0x00);
  1928                           
  1929                           ;incstack = 0
  1930                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  1931  01C1  3000               	movlw	0
  1932  01C2  20FA               	fcall	_Lcd_Port
  1933                           
  1934                           ;lcd.c: 76: _delay((unsigned long)((20)*(4000000/4000.0)));
  1935  01C3  301A               	movlw	26
  1936  01C4  1283               	bcf	3,5	;RP0=0, select bank0
  1937  01C5  0091               	movwf	??_Lcd_Init+1
  1938  01C6  30F8               	movlw	248
  1939  01C7  0090               	movwf	??_Lcd_Init
  1940  01C8                     u957:	
  1941  01C8  0B90               	decfsz	??_Lcd_Init,f
  1942  01C9  29C8               	goto	u957
  1943  01CA  0B91               	decfsz	??_Lcd_Init+1,f
  1944  01CB  29C8               	goto	u957
  1945  01CC  0000               	nop
  1946                           
  1947                           ;lcd.c: 77: Lcd_Cmd(0x03);
  1948  01CD  3003               	movlw	3
  1949  01CE  20E7               	fcall	_Lcd_Cmd
  1950                           
  1951                           ;lcd.c: 78: _delay((unsigned long)((5)*(4000000/4000.0)));
  1952  01CF  3007               	movlw	7
  1953  01D0  1283               	bcf	3,5	;RP0=0, select bank0
  1954  01D1  0091               	movwf	??_Lcd_Init+1
  1955  01D2  307D               	movlw	125
  1956  01D3  0090               	movwf	??_Lcd_Init
  1957  01D4                     u967:	
  1958  01D4  0B90               	decfsz	??_Lcd_Init,f
  1959  01D5  29D4               	goto	u967
  1960  01D6  0B91               	decfsz	??_Lcd_Init+1,f
  1961  01D7  29D4               	goto	u967
  1962                           
  1963                           ;lcd.c: 79: Lcd_Cmd(0x03);
  1964  01D8  3003               	movlw	3
  1965  01D9  20E7               	fcall	_Lcd_Cmd
  1966                           
  1967                           ;lcd.c: 80: _delay((unsigned long)((11)*(4000000/4000.0)));
  1968  01DA  300F               	movlw	15
  1969  01DB  1283               	bcf	3,5	;RP0=0, select bank0
  1970  01DC  0091               	movwf	??_Lcd_Init+1
  1971  01DD  3047               	movlw	71
  1972  01DE  0090               	movwf	??_Lcd_Init
  1973  01DF                     u977:	
  1974  01DF  0B90               	decfsz	??_Lcd_Init,f
  1975  01E0  29DF               	goto	u977
  1976  01E1  0B91               	decfsz	??_Lcd_Init+1,f
  1977  01E2  29DF               	goto	u977
  1978  01E3  29E4               	nop2
  1979                           
  1980                           ;lcd.c: 81: Lcd_Cmd(0x03);
  1981  01E4  3003               	movlw	3
  1982  01E5  20E7               	fcall	_Lcd_Cmd
  1983                           
  1984                           ;lcd.c: 83: Lcd_Cmd(0x02);
  1985  01E6  3002               	movlw	2
  1986  01E7  20E7               	fcall	_Lcd_Cmd
  1987                           
  1988                           ;lcd.c: 84: Lcd_Cmd(0x02);
  1989  01E8  3002               	movlw	2
  1990  01E9  20E7               	fcall	_Lcd_Cmd
  1991                           
  1992                           ;lcd.c: 85: Lcd_Cmd(0x08);
  1993  01EA  3008               	movlw	8
  1994  01EB  20E7               	fcall	_Lcd_Cmd
  1995                           
  1996                           ;lcd.c: 86: Lcd_Cmd(0x00);
  1997  01EC  3000               	movlw	0
  1998  01ED  20E7               	fcall	_Lcd_Cmd
  1999                           
  2000                           ;lcd.c: 87: Lcd_Cmd(0x0C);
  2001  01EE  300C               	movlw	12
  2002  01EF  20E7               	fcall	_Lcd_Cmd
  2003                           
  2004                           ;lcd.c: 88: Lcd_Cmd(0x00);
  2005  01F0  3000               	movlw	0
  2006  01F1  20E7               	fcall	_Lcd_Cmd
  2007                           
  2008                           ;lcd.c: 89: Lcd_Cmd(0x06);
  2009  01F2  3006               	movlw	6
  2010  01F3  20E7               	fcall	_Lcd_Cmd
  2011  01F4  0008               	return
  2012  01F5                     __end_of_Lcd_Init:	
  2013                           
  2014                           	psect	text13
  2015  00C6                     __ptext13:	
  2016 ;; *************** function _Lcd_Clear *****************
  2017 ;; Defined at:
  2018 ;;		line 43 in file "lcd.c"
  2019 ;; Parameters:    Size  Location     Type
  2020 ;;		None
  2021 ;; Auto vars:     Size  Location     Type
  2022 ;;		None
  2023 ;; Return value:  Size  Location     Type
  2024 ;;		None               void
  2025 ;; Registers used:
  2026 ;;		wreg, status,2, status,0, pclath, cstack
  2027 ;; Tracked objects:
  2028 ;;		On entry : 0/0
  2029 ;;		On exit  : 0/0
  2030 ;;		Unchanged: 0/0
  2031 ;; Data sizes:     COMMON   BANK0
  2032 ;;      Params:         0       0
  2033 ;;      Locals:         0       0
  2034 ;;      Temps:          0       2
  2035 ;;      Totals:         0       2
  2036 ;;Total ram usage:        2 bytes
  2037 ;; Hardware stack levels used:    1
  2038 ;; Hardware stack levels required when called:    2
  2039 ;; This function calls:
  2040 ;;		_Lcd_Cmd
  2041 ;; This function is called by:
  2042 ;;		_main
  2043 ;; This function uses a non-reentrant model
  2044 ;;
  2045                           
  2046                           
  2047                           ;psect for function _Lcd_Clear
  2048  00C6                     _Lcd_Clear:	
  2049                           
  2050                           ;lcd.c: 45: Lcd_Cmd(0x00);
  2051                           
  2052                           ;incstack = 0
  2053                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  2054  00C6  3000               	movlw	0
  2055  00C7  20E7               	fcall	_Lcd_Cmd
  2056                           
  2057                           ;lcd.c: 46: Lcd_Cmd(0x01);
  2058  00C8  3001               	movlw	1
  2059  00C9  20E7               	fcall	_Lcd_Cmd
  2060                           
  2061                           ;lcd.c: 47: _delay((unsigned long)((2)*(4000000/4000.0)));
  2062  00CA  3003               	movlw	3
  2063  00CB  1283               	bcf	3,5	;RP0=0, select bank0
  2064  00CC  0091               	movwf	??_Lcd_Clear+1
  2065  00CD  3097               	movlw	151
  2066  00CE  0090               	movwf	??_Lcd_Clear
  2067  00CF                     u987:	
  2068  00CF  0B90               	decfsz	??_Lcd_Clear,f
  2069  00D0  28CF               	goto	u987
  2070  00D1  0B91               	decfsz	??_Lcd_Clear+1,f
  2071  00D2  28CF               	goto	u987
  2072  00D3  28D4               	nop2
  2073  00D4  0008               	return
  2074  00D5                     __end_of_Lcd_Clear:	
  2075                           
  2076                           	psect	text14
  2077  00E7                     __ptext14:	
  2078 ;; *************** function _Lcd_Cmd *****************
  2079 ;; Defined at:
  2080 ;;		line 30 in file "lcd.c"
  2081 ;; Parameters:    Size  Location     Type
  2082 ;;  a               1    wreg     unsigned char 
  2083 ;; Auto vars:     Size  Location     Type
  2084 ;;  a               1    3[BANK0 ] unsigned char 
  2085 ;; Return value:  Size  Location     Type
  2086 ;;		None               void
  2087 ;; Registers used:
  2088 ;;		wreg, status,2, status,0, pclath, cstack
  2089 ;; Tracked objects:
  2090 ;;		On entry : 0/0
  2091 ;;		On exit  : 0/0
  2092 ;;		Unchanged: 0/0
  2093 ;; Data sizes:     COMMON   BANK0
  2094 ;;      Params:         0       0
  2095 ;;      Locals:         0       1
  2096 ;;      Temps:          0       2
  2097 ;;      Totals:         0       3
  2098 ;;Total ram usage:        3 bytes
  2099 ;; Hardware stack levels used:    1
  2100 ;; Hardware stack levels required when called:    1
  2101 ;; This function calls:
  2102 ;;		_Lcd_Port
  2103 ;; This function is called by:
  2104 ;;		_Lcd_Clear
  2105 ;;		_Lcd_Set_Cursor
  2106 ;;		_Lcd_Init
  2107 ;;		_Lcd_Shift_Left
  2108 ;;		_Lcd_Shift_Right
  2109 ;; This function uses a non-reentrant model
  2110 ;;
  2111                           
  2112                           
  2113                           ;psect for function _Lcd_Cmd
  2114  00E7                     _Lcd_Cmd:	
  2115                           
  2116                           ;incstack = 0
  2117                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2118                           ;Lcd_Cmd@a stored from wreg
  2119  00E7  1283               	bcf	3,5	;RP0=0, select bank0
  2120  00E8  008F               	movwf	Lcd_Cmd@a
  2121                           
  2122                           ;lcd.c: 33: RB4 = 0;
  2123  00E9  1206               	bcf	6,4	;volatile
  2124                           
  2125                           ;lcd.c: 34: Lcd_Port(a);
  2126  00EA  080F               	movf	Lcd_Cmd@a,w
  2127  00EB  20FA               	fcall	_Lcd_Port
  2128                           
  2129                           ;lcd.c: 37: RB6 = 1;
  2130  00EC  1283               	bcf	3,5	;RP0=0, select bank0
  2131  00ED  1706               	bsf	6,6	;volatile
  2132                           
  2133                           ;lcd.c: 38: _delay((unsigned long)((4)*(4000000/4000.0)));
  2134  00EE  3006               	movlw	6
  2135  00EF  008E               	movwf	??_Lcd_Cmd+1
  2136  00F0  3030               	movlw	48
  2137  00F1  008D               	movwf	??_Lcd_Cmd
  2138  00F2                     u997:	
  2139  00F2  0B8D               	decfsz	??_Lcd_Cmd,f
  2140  00F3  28F2               	goto	u997
  2141  00F4  0B8E               	decfsz	??_Lcd_Cmd+1,f
  2142  00F5  28F2               	goto	u997
  2143  00F6  0000               	nop
  2144                           
  2145                           ;lcd.c: 39: RB6 = 0;
  2146  00F7  1283               	bcf	3,5	;RP0=0, select bank0
  2147  00F8  1306               	bcf	6,6	;volatile
  2148  00F9  0008               	return
  2149  00FA                     __end_of_Lcd_Cmd:	
  2150                           
  2151                           	psect	text15
  2152  00FA                     __ptext15:	
  2153 ;; *************** function _Lcd_Port *****************
  2154 ;; Defined at:
  2155 ;;		line 6 in file "lcd.c"
  2156 ;; Parameters:    Size  Location     Type
  2157 ;;  a               1    wreg     unsigned char 
  2158 ;; Auto vars:     Size  Location     Type
  2159 ;;  a               1    0[BANK0 ] unsigned char 
  2160 ;; Return value:  Size  Location     Type
  2161 ;;		None               void
  2162 ;; Registers used:
  2163 ;;		wreg
  2164 ;; Tracked objects:
  2165 ;;		On entry : 0/0
  2166 ;;		On exit  : 0/0
  2167 ;;		Unchanged: 0/0
  2168 ;; Data sizes:     COMMON   BANK0
  2169 ;;      Params:         0       0
  2170 ;;      Locals:         0       1
  2171 ;;      Temps:          0       0
  2172 ;;      Totals:         0       1
  2173 ;;Total ram usage:        1 bytes
  2174 ;; Hardware stack levels used:    1
  2175 ;; This function calls:
  2176 ;;		Nothing
  2177 ;; This function is called by:
  2178 ;;		_Lcd_Cmd
  2179 ;;		_Lcd_Init
  2180 ;;		_Lcd_Write_Char
  2181 ;; This function uses a non-reentrant model
  2182 ;;
  2183                           
  2184                           
  2185                           ;psect for function _Lcd_Port
  2186  00FA                     _Lcd_Port:	
  2187                           
  2188                           ;incstack = 0
  2189                           ; Regs used in _Lcd_Port: [wreg]
  2190                           ;Lcd_Port@a stored from wreg
  2191  00FA  1283               	bcf	3,5	;RP0=0, select bank0
  2192  00FB  008C               	movwf	Lcd_Port@a
  2193                           
  2194                           ;lcd.c: 8: if(a & 1)
  2195  00FC  1C0C               	btfss	Lcd_Port@a,0
  2196  00FD  2900               	goto	l87
  2197                           
  2198                           ;lcd.c: 9: RB0 = 1;
  2199  00FE  1406               	bsf	6,0	;volatile
  2200  00FF  2901               	goto	l88
  2201  0100                     l87:	
  2202                           
  2203                           ;lcd.c: 10: else
  2204                           ;lcd.c: 11: RB0 = 0;
  2205  0100  1006               	bcf	6,0	;volatile
  2206  0101                     l88:	
  2207                           
  2208                           ;lcd.c: 13: if(a & 2)
  2209  0101  1C8C               	btfss	Lcd_Port@a,1
  2210  0102  2905               	goto	l89
  2211                           
  2212                           ;lcd.c: 14: RB1 = 1;
  2213  0103  1486               	bsf	6,1	;volatile
  2214  0104  2906               	goto	l90
  2215  0105                     l89:	
  2216                           
  2217                           ;lcd.c: 15: else
  2218                           ;lcd.c: 16: RB1 = 0;
  2219  0105  1086               	bcf	6,1	;volatile
  2220  0106                     l90:	
  2221                           
  2222                           ;lcd.c: 18: if(a & 4)
  2223  0106  1D0C               	btfss	Lcd_Port@a,2
  2224  0107  290A               	goto	l91
  2225                           
  2226                           ;lcd.c: 19: RB2 = 1;
  2227  0108  1506               	bsf	6,2	;volatile
  2228  0109  290B               	goto	l92
  2229  010A                     l91:	
  2230                           
  2231                           ;lcd.c: 20: else
  2232                           ;lcd.c: 21: RB2 = 0;
  2233  010A  1106               	bcf	6,2	;volatile
  2234  010B                     l92:	
  2235                           
  2236                           ;lcd.c: 23: if(a & 8)
  2237  010B  1D8C               	btfss	Lcd_Port@a,3
  2238  010C  290F               	goto	l93
  2239                           
  2240                           ;lcd.c: 24: RB3 = 1;
  2241  010D  1586               	bsf	6,3	;volatile
  2242  010E  0008               	return
  2243  010F                     l93:	
  2244                           
  2245                           ;lcd.c: 25: else
  2246                           ;lcd.c: 26: RB3 = 0;
  2247  010F  1186               	bcf	6,3	;volatile
  2248  0110  0008               	return
  2249  0111                     __end_of_Lcd_Port:	
  2250  004E                     btemp	set	78	;btemp
  2251  004E                     wtemp	set	78
  2252  004E                     wtemp0	set	78
  2253  0050                     wtemp1	set	80
  2254  0052                     wtemp2	set	82
  2255  0054                     wtemp3	set	84
  2256  0056                     wtemp4	set	86
  2257  0058                     wtemp5	set	88
  2258  004F                     wtemp6	set	79
  2259  004E                     ttemp	set	78
  2260  004E                     ttemp0	set	78
  2261  0051                     ttemp1	set	81
  2262  0054                     ttemp2	set	84
  2263  0057                     ttemp3	set	87
  2264  004F                     ttemp4	set	79
  2265  004E                     ltemp	set	78
  2266  004E                     ltemp0	set	78
  2267  0052                     ltemp1	set	82
  2268  0056                     ltemp2	set	86
  2269  0050                     ltemp3	set	80


Data Sizes:
    Strings     31
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            66     52      52

Pointer List with Targets:

    utoa@buf	PTR unsigned char  size(1) Largest target is 16
		 -> Lcd_Write_Int@temp(BANK0[16]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 0

    sp__utoa	PTR unsigned char  size(1) Largest target is 16
		 -> Lcd_Write_Int@temp(BANK0[16]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 31
		 -> Lcd_Write_Int@temp(BANK0[16]), STR_1(CODE[31]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_WriteVoltage
    _WriteVoltage->_Lcd_Write_Int
    _Lcd_Write_Int->_utoa
    _utoa->___lwdiv
    ___lwmod->___wmul
    ___lwdiv->___wmul
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Shift_Left->_Lcd_Cmd
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    5251
                                             47 BANK0      5     5      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Shift_Left
                     _Lcd_Write_Char
                   _Lcd_Write_String
                       _WriteVoltage
                            _readADC
 ---------------------------------------------------------------------------------
 (1) _readADC                                              8     6      2     208
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (1) _WriteVoltage                                         6     4      2    3616
                                             41 BANK0      6     4      2
                     _Lcd_Write_Char
                      _Lcd_Write_Int
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _readADC (ARG)
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     304
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Int                                       18    16      2    2051
                                             23 BANK0     18    16      2
                   _Lcd_Write_String
                               _utoa
 ---------------------------------------------------------------------------------
 (3) _utoa                                                 9     5      4    1393
                                             14 BANK0      9     5      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     371
                                              6 BANK0      6     2      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     480
                                              6 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_String                                     7     5      2     374
                                              5 BANK0      7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (4) _Lcd_Write_Char                                       4     4      0     178
                                              1 BANK0      4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Shift_Left                                       0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     433
                                              4 BANK0      7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            2     2      0     110
                                              4 BANK0      2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 BANK0      3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (5) _Lcd_Port                                             1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Shift_Left
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _WriteVoltage
     _Lcd_Write_Char
       _Lcd_Port
     _Lcd_Write_Int
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       _utoa
         ___lwdiv
           ___wmul (ARG)
         ___lwmod
           ___wmul (ARG)
     ___lwdiv
       ___wmul (ARG)
     ___lwmod
       ___wmul (ARG)
     ___wmul
     _readADC (ARG)
   _readADC

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              40      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               42     34      34       3       78.8%
ABS                  0      0       0       4        0.0%
BITBANK0            42      0       0       5        0.0%
DATA                 0      0       0       6        0.0%


Microchip Technology PIC Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Thu Apr 21 11:06:34 2016

                        pc 0002                __CFG_CP$OFF 0000                         l65 02BB  
                       l90 0106                         l91 010A                         l92 010B  
                       l93 010F                         l87 0100                         l88 0101  
                       l89 0105                         fsr 0004        ___wmul@multiplicand 000E  
                      l212 011C                        l479 0314                        l944 0222  
                      l936 01FE                        l960 0195                        l938 020C  
                      l962 01A3                        l970 01BC                        l980 0160  
                      l948 022D                        l966 01B1                        l984 02D4  
                      l994 02F0                        _RA1 0029                        _RB0 0030  
                      _RA2 002A                        _RB1 0031                        _RA3 002B  
                      _RB2 0032                        _RB3 0033                        _RB4 0034  
                      _RB5 0035                        _RB6 0036                        u515 020D  
                      u525 0219                        u535 0223                        u475 0143  
                      u565 0198                        u495 0201                        u745 023F  
                      u585 01A9                        u825 03AE                        u595 01B2  
                      u907 0286                        u765 0260                        u685 011D  
                      u917 0299                        u695 0124                        u927 02AF  
                      u937 014E                        u857 03B7                        u947 0158  
                      u867 03DF                        u957 01C8                        u877 03EC  
                      u967 01D4                        u887 03F8                        u977 01DF  
                      u897 0280                        u987 00CF                        u997 00F2  
                      fsr0 0004                        indf 0000               __CFG_FOSC$XT 0000  
                     l1028 0114                       l1124 0297                       l1108 027E  
                     l1062 038A                       l1134 02A8                       l1118 0292  
                     l1056 0379                       l1090 0253                       l1172 03A5  
                     l1182 03E7                       l1174 03C7                       STR_1 0011  
        ?_Lcd_Write_String 0011                       _main 0391                       btemp 004E  
                     _utoa 02CE                       ltemp 004E      __size_of_WriteVoltage 0067  
                     start 0000                       ttemp 004E         ??_Lcd_Write_String 0013  
                     wtemp 004E            __end_of_Lcd_Cmd 00FA                      ?_main 000C  
            __CFG_WDTE$OFF 0000                      ?_utoa 001A            __end_of___lwdiv 0232  
          __end_of___lwmod 01C1    __size_of_Lcd_Set_Cursor 0042                      _TRISA 0085  
                    _TRISB 0086              __CFG_PWRTE$ON 0000                readADC@bits 0012  
          __end_of_readADC 02CE    __size_of_Lcd_Shift_Left 0005                readADC@volt 0010  
             _WriteVoltage 032A                      main@i 003E                      pclath 000A  
                    ltemp0 004E                      ltemp1 0052                      ltemp2 0056  
                    ltemp3 0050                      ttemp0 004E                      ttemp1 0051  
                    ttemp2 0054                      ttemp3 0057                      ttemp4 004F  
                    utoa@c 0021                      utoa@v 001F                      status 0003  
                    wtemp0 004E                      wtemp1 0050                      wtemp2 0052  
                    wtemp3 0054                      wtemp4 0056                      wtemp5 0058  
                    wtemp6 004F           __end_of_Lcd_Init 01F5           __end_of_Lcd_Port 0111  
          __initialization 03FE               __end_of_main 03FE               __end_of_utoa 032A  
                   ??_main 003B                     ??_utoa 001E         __size_of_Lcd_Clear 000F  
                ??_Lcd_Cmd 000D    __size_of_Lcd_Write_Char 002A          WriteVoltage@vTemp 0035  
                   ___wmul 0111                  ??___lwdiv 0016                  ??___lwmod 0016  
    __end_of_Lcd_Write_Int 00E7                  ??_readADC 000E            Lcd_Set_Cursor@a 0013  
          Lcd_Set_Cursor@b 0010            Lcd_Set_Cursor@y 0015            Lcd_Set_Cursor@z 0014  
  __end_of__initialization 03FE          __end_of_Lcd_Clear 00D5             __pcstackCOMMON 0000  
           _Lcd_Set_Cursor 0232             _Lcd_Shift_Left 00C1                  ?_Lcd_Init 000C  
                ?_Lcd_Port 000C             Lcd_Write_Int@a 0023                 __pmaintext 0391  
                  ?___wmul 000C  __size_of_Lcd_Write_String 0031     __end_of_Lcd_Set_Cursor 0274  
   __end_of_Lcd_Shift_Left 00C6                 ??_Lcd_Init 0010                 ??_Lcd_Port 0000  
               __stringtab 0001             _Lcd_Write_Char 0133                    _Lcd_Cmd 00E7  
          __size_of___wmul 0022                    ___lwdiv 01F5                    ___lwmod 018E  
            readADC@rxData 0013            ?_Lcd_Set_Cursor 0010                    __ptext1 0274  
                  __ptext2 032A                    __ptext3 0111                    __ptext4 00D5  
                  __ptext5 02CE                    __ptext6 018E                    __ptext7 01F5  
                  __ptext8 015D                    __ptext9 0133                    _readADC 0274  
          ?_Lcd_Shift_Left 000C     __end_of_Lcd_Write_Char 015D       end_of_initialization 03FE  
                Lcd_Port@a 000C                    utoa@buf 0022          Lcd_Write_Int@temp 0025  
                  utoa@val 001A            ?_Lcd_Write_Char 000C          Lcd_Write_String@a 0011  
        Lcd_Write_String@i 0016                  _Lcd_Clear 00C6             __end_of___wmul 0133  
         _Lcd_Write_String 015D        start_initialization 03FE          __size_of_Lcd_Init 0034  
        __size_of_Lcd_Port 0017     __size_of_Lcd_Write_Int 0012                 ?_Lcd_Clear 000C  
                 ??___wmul 0000            Lcd_Write_Char@a 0010            Lcd_Write_Char@y 000F  
                ___latbits 0000              __pcstackBANK0 000C              ?_WriteVoltage 0035  
                 ?_Lcd_Cmd 000C           ___lwdiv@dividend 0014           ??_Lcd_Set_Cursor 0011  
                 ?___lwdiv 0012                   ?___lwmod 0012           ??_Lcd_Shift_Left 0000  
                __pstrings 0001                   ?_readADC 000C              _Lcd_Write_Int 00D5  
           ??_WriteVoltage 0000           ___lwdiv@quotient 0017             ___wmul@product 0010  
                 Lcd_Cmd@a 000F                ??_Lcd_Clear 0010                __stringbase 0010  
        ___wmul@multiplier 000C             ?_Lcd_Write_Int 0023           ??_Lcd_Write_Char 000D  
                 _Lcd_Init 01C1                   _Lcd_Port 00FA        WriteVoltage@decimal 0039  
 __end_of_Lcd_Write_String 018E           __size_of_Lcd_Cmd 0013        WriteVoltage@voltage 0037  
         __size_of___lwdiv 003D           __size_of___lwmod 0033         __end_of__stringtab 0011  
         __size_of_readADC 005A            ___lwdiv@divisor 0012            ___lwdiv@counter 0019  
                 __ptext10 00C1                   __ptext11 0232                   __ptext12 01C1  
                 __ptext13 00C6                   __ptext14 00E7                   __ptext15 00FA  
            __size_of_main 006D              __size_of_utoa 005C       __end_of_WriteVoltage 0391  
          ??_Lcd_Write_Int 0000         Lcd_Write_Char@temp 000E           ___lwmod@dividend 0014  
                stringcode 000B         Lcd_Set_Cursor@temp 0016                   utoa@base 001C  
          ___lwmod@divisor 0012            ___lwmod@counter 0017                   stringdir 000B  
                 stringtab 0001  
