

Microchip Technology PIC LITE Macro Assembler V1.35 build -356382666 
                                                                                               Mon Apr 18 16:38:09 2016

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	16F84A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	psect	text10,local,class=CODE,merge=1,delta=2
    19                           	psect	text11,local,class=CODE,merge=1,delta=2
    20                           	psect	text12,local,class=CODE,merge=1,delta=2
    21                           	psect	text13,local,class=CODE,merge=1,delta=2
    22                           	psect	text14,local,class=CODE,merge=1,delta=2
    23                           	psect	text15,local,class=CODE,merge=1,delta=2
    24                           	psect	text16,local,class=CODE,merge=1,delta=2
    25                           	dabs	1,0x4E,2
    26  0000                     	;# 
    27  0001                     	;# 
    28  0002                     	;# 
    29  0003                     	;# 
    30  0004                     	;# 
    31  0005                     	;# 
    32  0006                     	;# 
    33  0008                     	;# 
    34  0009                     	;# 
    35  000A                     	;# 
    36  000B                     	;# 
    37  0081                     	;# 
    38  0085                     	;# 
    39  0086                     	;# 
    40  0088                     	;# 
    41  0089                     	;# 
    42  0000                     	;# 
    43  0001                     	;# 
    44  0002                     	;# 
    45  0003                     	;# 
    46  0004                     	;# 
    47  0005                     	;# 
    48  0006                     	;# 
    49  0008                     	;# 
    50  0009                     	;# 
    51  000A                     	;# 
    52  000B                     	;# 
    53  0081                     	;# 
    54  0085                     	;# 
    55  0086                     	;# 
    56  0088                     	;# 
    57  0089                     	;# 
    58  0000                     	;# 
    59  0001                     	;# 
    60  0002                     	;# 
    61  0003                     	;# 
    62  0004                     	;# 
    63  0005                     	;# 
    64  0006                     	;# 
    65  0008                     	;# 
    66  0009                     	;# 
    67  000A                     	;# 
    68  000B                     	;# 
    69  0081                     	;# 
    70  0085                     	;# 
    71  0086                     	;# 
    72  0088                     	;# 
    73  0089                     	;# 
    74  0029                     _RA1	set	41
    75  002A                     _RA2	set	42
    76  002B                     _RA3	set	43
    77  0030                     _RB0	set	48
    78  0031                     _RB1	set	49
    79  0032                     _RB2	set	50
    80  0033                     _RB3	set	51
    81  0034                     _RB4	set	52
    82  0035                     _RB5	set	53
    83  0036                     _RB6	set	54
    84  0085                     _TRISA	set	133
    85  0086                     _TRISB	set	134
    86                           
    87                           	psect	strings
    88  0000'                    __pstrings:	
    89  0000'                    stringtab:	
    90  0000'                    __stringtab:	
    91                           
    92                           ;	String table - string pointers are 1 byte each
    93  0000' 1BCF               	btfsc	btemp+1,7
    94  0001' 280A'              	ljmp	stringcode
    95  0002' 1383               	bcf	3,7
    96  0003' 184F               	btfsc	btemp+1,0
    97  0004' 1783               	bsf	3,7
    98  0005' 0800               	movf	0,w
    99  0006' 0A84               	incf	4,f
   100  0007' 1903               	skipnz
   101  0008' 0ACF               	incf	btemp+1,f
   102  0009' 0008               	return
   103  000A'                    stringcode:	
   104  000A'                    stringdir:	
   105  000A' 3000'              	movlw	high stringdir
   106  000B' 008A               	movwf	10
   107  000C' 0804               	movf	4,w
   108  000D' 0A84               	incf	4,f
   109  000E' 0782               	addwf	2,f
   110  000F'                    __stringbase:	
   111  000F' 3400               	retlw	0
   112  0010'                    __end_of__stringtab:	
   113  0010'                    STR_1:	
   114  0010' 3456               	retlw	86	;'V'
   115  0011' 346F               	retlw	111	;'o'
   116  0012' 346C               	retlw	108	;'l'
   117  0013' 3474               	retlw	116	;'t'
   118  0014' 3461               	retlw	97	;'a'
   119  0015' 3467               	retlw	103	;'g'
   120  0016' 3465               	retlw	101	;'e'
   121  0017' 343A               	retlw	58	;':'
   122  0018' 3400               	retlw	0
   123                           
   124                           ; #config settings
   125  0000                     
   126                           	psect	cinit
   127  0000'                    start_initialization:	
   128  0000'                    __initialization:	
   129  0000'                    end_of_initialization:	
   130                           ;End of C runtime variable initialization code
   131                           
   132  0000'                    __end_of__initialization:	
   133  0000' 0183               	clrf	3
   134  0001' 2800'              	ljmp	_main	;jump to C main() function
   135                           
   136                           	psect	cstackCOMMON
   137  0000'                    __pcstackCOMMON:	
   138  0000'                    ??_Lcd_Write_Int:	
   139  0000'                    ??_Lcd_Port:	
   140                           ; 0 bytes @ 0x0
   141                           
   142                           
   143                           	psect	cstackBANK0
   144  0000'                    __pcstackBANK0:	
   145                           ; 0 bytes @ 0x0
   146                           
   147  0000'                    ?_Lcd_Init:	
   148  0000'                    ?_Lcd_Clear:	
   149                           ; 0 bytes @ 0x0
   150                           
   151  0000'                    ?_main:	
   152                           ; 0 bytes @ 0x0
   153                           
   154  0000'                    ?_Lcd_Port:	
   155                           ; 0 bytes @ 0x0
   156                           
   157  0000'                    ?_Lcd_Cmd:	
   158                           ; 0 bytes @ 0x0
   159                           
   160  0000'                    ?_Lcd_Write_Char:	
   161                           ; 0 bytes @ 0x0
   162                           
   163  0000'                    ?_readADC:	
   164                           ; 0 bytes @ 0x0
   165                           
   166  0000'                    ?___lwdiv:	
   167                           ; 2 bytes @ 0x0
   168                           
   169  0000'                    ?___lwmod:	
   170                           ; 2 bytes @ 0x0
   171                           
   172  0000'                    ?___ftpack:	
   173                           ; 2 bytes @ 0x0
   174                           
   175  0000'                    Lcd_Port@a:	
   176                           ; 3 bytes @ 0x0
   177                           
   178  0000'                    ___lwdiv@divisor:	
   179                           ; 1 bytes @ 0x0
   180                           
   181  0000'                    ___lwmod@divisor:	
   182                           ; 2 bytes @ 0x0
   183                           
   184  0000'                    ___ftpack@arg:	
   185                           ; 2 bytes @ 0x0
   186                           
   187                           
   188                           ; 3 bytes @ 0x0
   189  0000'                    	ds	1
   190  0001'                    ??_Lcd_Cmd:	
   191  0001'                    ??_Lcd_Write_Char:	
   192                           ; 0 bytes @ 0x1
   193                           
   194                           
   195                           ; 0 bytes @ 0x1
   196  0001'                    	ds	1
   197  0002'                    ??_readADC:	
   198  0002'                    Lcd_Write_Char@temp:	
   199                           ; 0 bytes @ 0x2
   200                           
   201  0002'                    ___lwdiv@dividend:	
   202                           ; 1 bytes @ 0x2
   203                           
   204  0002'                    ___lwmod@dividend:	
   205                           ; 2 bytes @ 0x2
   206                           
   207                           
   208                           ; 2 bytes @ 0x2
   209  0002'                    	ds	1
   210  0003'                    Lcd_Cmd@a:	
   211  0003'                    Lcd_Write_Char@y:	
   212                           ; 1 bytes @ 0x3
   213                           
   214  0003'                    ___ftpack@exp:	
   215                           ; 1 bytes @ 0x3
   216                           
   217                           
   218                           ; 1 bytes @ 0x3
   219  0003'                    	ds	1
   220  0004'                    ??_Lcd_Init:	
   221  0004'                    ??_Lcd_Clear:	
   222                           ; 0 bytes @ 0x4
   223                           
   224  0004'                    ?_Lcd_Set_Cursor:	
   225                           ; 0 bytes @ 0x4
   226                           
   227  0004'                    ??___lwdiv:	
   228                           ; 0 bytes @ 0x4
   229                           
   230  0004'                    ??___lwmod:	
   231                           ; 0 bytes @ 0x4
   232                           
   233  0004'                    Lcd_Set_Cursor@b:	
   234                           ; 0 bytes @ 0x4
   235                           
   236  0004'                    Lcd_Write_Char@a:	
   237                           ; 1 bytes @ 0x4
   238                           
   239  0004'                    ___ftpack@sign:	
   240                           ; 1 bytes @ 0x4
   241                           
   242  0004'                    readADC@volt:	
   243                           ; 1 bytes @ 0x4
   244                           
   245                           
   246                           ; 2 bytes @ 0x4
   247  0004'                    	ds	1
   248  0005'                    ??_Lcd_Set_Cursor:	
   249  0005'                    ?_Lcd_Write_String:	
   250                           ; 0 bytes @ 0x5
   251                           
   252  0005'                    ??___ftpack:	
   253                           ; 0 bytes @ 0x5
   254                           
   255  0005'                    ___lwmod@counter:	
   256                           ; 0 bytes @ 0x5
   257                           
   258  0005'                    Lcd_Write_String@a:	
   259                           ; 1 bytes @ 0x5
   260                           
   261  0005'                    ___lwdiv@quotient:	
   262                           ; 2 bytes @ 0x5
   263                           
   264                           
   265                           ; 2 bytes @ 0x5
   266  0005'                    	ds	1
   267  0006'                    readADC@bits:	
   268                           
   269                           ; 1 bytes @ 0x6
   270  0006'                    	ds	1
   271  0007'                    ??_Lcd_Write_String:	
   272  0007'                    readADC@rxData:	
   273                           ; 0 bytes @ 0x7
   274                           
   275  0007'                    Lcd_Set_Cursor@a:	
   276                           ; 1 bytes @ 0x7
   277                           
   278  0007'                    ___lwdiv@counter:	
   279                           ; 1 bytes @ 0x7
   280                           
   281                           
   282                           ; 1 bytes @ 0x7
   283  0007'                    	ds	1
   284  0008'                    ?_utoa:	
   285  0008'                    ?___lwtoft:	
   286                           ; 1 bytes @ 0x8
   287                           
   288  0008'                    Lcd_Set_Cursor@z:	
   289                           ; 3 bytes @ 0x8
   290                           
   291  0008'                    utoa@val:	
   292                           ; 1 bytes @ 0x8
   293                           
   294  0008'                    ___lwtoft@c:	
   295                           ; 2 bytes @ 0x8
   296                           
   297                           
   298                           ; 2 bytes @ 0x8
   299  0008'                    	ds	1
   300  0009'                    Lcd_Set_Cursor@y:	
   301                           
   302                           ; 1 bytes @ 0x9
   303  0009'                    	ds	1
   304  000A'                    Lcd_Set_Cursor@temp:	
   305  000A'                    Lcd_Write_String@i:	
   306                           ; 1 bytes @ 0xA
   307                           
   308  000A'                    utoa@base:	
   309                           ; 2 bytes @ 0xA
   310                           
   311                           
   312                           ; 2 bytes @ 0xA
   313  000A'                    	ds	1
   314  000B'                    ??___lwtoft:	
   315                           
   316                           ; 0 bytes @ 0xB
   317  000B'                    	ds	1
   318  000C'                    ??_utoa:	
   319  000C'                    ?___ftmul:	
   320                           ; 0 bytes @ 0xC
   321                           
   322  000C'                    ___ftmul@f1:	
   323                           ; 3 bytes @ 0xC
   324                           
   325                           
   326                           ; 3 bytes @ 0xC
   327  000C'                    	ds	1
   328  000D'                    utoa@v:	
   329                           
   330                           ; 2 bytes @ 0xD
   331  000D'                    	ds	2
   332  000F'                    utoa@c:	
   333  000F'                    ___ftmul@f2:	
   334                           ; 1 bytes @ 0xF
   335                           
   336                           
   337                           ; 3 bytes @ 0xF
   338  000F'                    	ds	1
   339  0010'                    utoa@buf:	
   340                           
   341                           ; 1 bytes @ 0x10
   342  0010'                    	ds	1
   343  0011'                    ?_Lcd_Write_Int:	
   344  0011'                    Lcd_Write_Int@a:	
   345                           ; 0 bytes @ 0x11
   346                           
   347                           
   348                           ; 2 bytes @ 0x11
   349  0011'                    	ds	1
   350  0012'                    ??___ftmul:	
   351                           
   352                           ; 0 bytes @ 0x12
   353  0012'                    	ds	1
   354  0013'                    Lcd_Write_Int@temp:	
   355                           
   356                           ; 16 bytes @ 0x13
   357  0013'                    	ds	3
   358  0016'                    ___ftmul@exp:	
   359                           
   360                           ; 1 bytes @ 0x16
   361  0016'                    	ds	1
   362  0017'                    ___ftmul@f3_as_product:	
   363                           
   364                           ; 3 bytes @ 0x17
   365  0017'                    	ds	3
   366  001A'                    ___ftmul@cntr:	
   367                           
   368                           ; 1 bytes @ 0x1A
   369  001A'                    	ds	1
   370  001B'                    ___ftmul@sign:	
   371                           
   372                           ; 1 bytes @ 0x1B
   373  001B'                    	ds	1
   374  001C'                    ?___fttol:	
   375  001C'                    ___fttol@f1:	
   376                           ; 4 bytes @ 0x1C
   377                           
   378                           
   379                           ; 3 bytes @ 0x1C
   380  001C'                    	ds	4
   381  0020'                    ??___fttol:	
   382                           
   383                           ; 0 bytes @ 0x20
   384  0020'                    	ds	4
   385  0024'                    ___fttol@sign1:	
   386                           
   387                           ; 1 bytes @ 0x24
   388  0024'                    	ds	1
   389  0025'                    ___fttol@lval:	
   390                           
   391                           ; 4 bytes @ 0x25
   392  0025'                    	ds	4
   393  0029'                    ___fttol@exp1:	
   394                           
   395                           ; 1 bytes @ 0x29
   396  0029'                    	ds	1
   397  002A'                    ??_main:	
   398                           
   399                           ; 0 bytes @ 0x2A
   400  002A'                    	ds	3
   401  002D'                    main@voltage:	
   402                           
   403                           ; 2 bytes @ 0x2D
   404  002D'                    	ds	2
   405  002F'                    main@string:	
   406                           
   407                           ; 1 bytes @ 0x2F
   408  002F'                    	ds	1
   409                           
   410                           	psect	maintext
   411  0000'                    __pmaintext:	
   412 ;;
   413 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   414 ;;
   415 ;; *************** function _main *****************
   416 ;; Defined at:
   417 ;;		line 13 in file "main.c"
   418 ;; Parameters:    Size  Location     Type
   419 ;;		None
   420 ;; Auto vars:     Size  Location     Type
   421 ;;  string          1   47[BANK0 ] PTR unsigned char 
   422 ;;		 -> STR_1(9), 
   423 ;;  voltage         2   45[BANK0 ] unsigned int 
   424 ;; Return value:  Size  Location     Type
   425 ;;		None               void
   426 ;; Registers used:
   427 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   428 ;; Tracked objects:
   429 ;;		On entry : B00/0
   430 ;;		On exit  : 0/0
   431 ;;		Unchanged: 0/0
   432 ;; Data sizes:     COMMON   BANK0
   433 ;;      Params:         0       0
   434 ;;      Locals:         0       3
   435 ;;      Temps:          0       3
   436 ;;      Totals:         0       6
   437 ;;Total ram usage:        6 bytes
   438 ;; Hardware stack levels required when called:    4
   439 ;; This function calls:
   440 ;;		_Lcd_Clear
   441 ;;		_Lcd_Init
   442 ;;		_Lcd_Set_Cursor
   443 ;;		_Lcd_Write_Int
   444 ;;		_Lcd_Write_String
   445 ;;		___ftmul
   446 ;;		___fttol
   447 ;;		___lwtoft
   448 ;;		_readADC
   449 ;; This function is called by:
   450 ;;		Startup code after reset
   451 ;; This function uses a non-reentrant model
   452 ;;
   453                           
   454                           
   455                           ;psect for function _main
   456  0000'                    _main:	
   457                           
   458                           ;main.c: 15: TRISA = 0b00000100;
   459                           
   460                           ;incstack = 0
   461                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   462  0000' 3004               	movlw	4
   463  0001' 1683               	bsf	3,5	;RP0=1, select bank1
   464  0002' 0085               	movwf	5	;volatile
   465                           
   466                           ;main.c: 16: TRISB = 0x00;
   467  0003' 0186               	clrf	6	;volatile
   468                           
   469                           ;main.c: 18: RA3 = 1;
   470  0004' 1283               	bcf	3,5	;RP0=0, select bank0
   471  0005' 1585               	bsf	5,3	;volatile
   472                           
   473                           ;main.c: 19: RA1 = 0;
   474  0006' 1085               	bcf	5,1	;volatile
   475                           
   476                           ;main.c: 20: RB5 = 0;
   477  0007' 1286               	bcf	6,5	;volatile
   478                           
   479                           ;main.c: 21: Lcd_Init();
   480  0008' 2000'              	fcall	_Lcd_Init
   481                           
   482                           ;main.c: 22: Lcd_Clear();
   483  0009' 2000'              	fcall	_Lcd_Clear
   484                           
   485                           ;main.c: 24: unsigned int voltage = 5;
   486  000A' 3005               	movlw	5
   487  000B' 1283               	bcf	3,5	;RP0=0, select bank0
   488  000C' 00AD'              	movwf	main@voltage
   489  000D' 3000               	movlw	0
   490  000E' 00AE'              	movwf	main@voltage+1
   491  000F'                    l1317:	
   492                           ;main.c: 26: while(1)
   493                           
   494                           
   495                           ;main.c: 27: {
   496                           ;main.c: 28: Lcd_Clear();
   497  000F' 2000'              	fcall	_Lcd_Clear
   498                           
   499                           ;main.c: 30: Lcd_Set_Cursor(1,1);
   500  0010' 1283               	bcf	3,5	;RP0=0, select bank0
   501  0011' 0184'              	clrf	Lcd_Set_Cursor@b
   502  0012' 0A84'              	incf	Lcd_Set_Cursor@b,f
   503  0013' 3001               	movlw	1
   504  0014' 2000'              	fcall	_Lcd_Set_Cursor
   505                           
   506                           ;main.c: 31: char *string = "Voltage:";
   507  0015' 3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   508  0016' 1283               	bcf	3,5	;RP0=0, select bank0
   509  0017' 00AA'              	movwf	??_main
   510  0018' 082A'              	movf	??_main,w
   511  0019' 00AF'              	movwf	main@string
   512                           
   513                           ;main.c: 33: Lcd_Write_String(string);
   514  001A' 082F'              	movf	main@string,w
   515  001B' 0085'              	movwf	Lcd_Write_String@a
   516  001C' 3000               	movlw	0
   517  001D' 1D03               	btfss	3,2
   518  001E' 3080               	movlw	128
   519  001F' 0086'              	movwf	Lcd_Write_String@a+1
   520  0020' 2000'              	fcall	_Lcd_Write_String
   521                           
   522                           ;main.c: 34: Lcd_Set_Cursor(2,1);
   523  0021' 1283               	bcf	3,5	;RP0=0, select bank0
   524  0022' 0184'              	clrf	Lcd_Set_Cursor@b
   525  0023' 0A84'              	incf	Lcd_Set_Cursor@b,f
   526  0024' 3002               	movlw	2
   527  0025' 2000'              	fcall	_Lcd_Set_Cursor
   528                           
   529                           ;main.c: 36: voltage = readADC()*4.5;
   530  0026' 2000'              	fcall	_readADC
   531  0027' 1283               	bcf	3,5	;RP0=0, select bank0
   532  0028' 0801'              	movf	?_readADC+1,w
   533  0029' 0089'              	movwf	___lwtoft@c+1
   534  002A' 0800'              	movf	?_readADC,w
   535  002B' 0088'              	movwf	___lwtoft@c
   536  002C' 2000'              	fcall	___lwtoft
   537  002D' 1283               	bcf	3,5	;RP0=0, select bank0
   538  002E' 0808'              	movf	?___lwtoft,w
   539  002F' 008F'              	movwf	___ftmul@f2
   540  0030' 0809'              	movf	?___lwtoft+1,w
   541  0031' 0090'              	movwf	___ftmul@f2+1
   542  0032' 080A'              	movf	?___lwtoft+2,w
   543  0033' 0091'              	movwf	___ftmul@f2+2
   544  0034' 3000               	movlw	0
   545  0035' 008C'              	movwf	___ftmul@f1
   546  0036' 3090               	movlw	144
   547  0037' 008D'              	movwf	___ftmul@f1+1
   548  0038' 3040               	movlw	64
   549  0039' 008E'              	movwf	___ftmul@f1+2
   550  003A' 2000'              	fcall	___ftmul
   551  003B' 1283               	bcf	3,5	;RP0=0, select bank0
   552  003C' 080C'              	movf	?___ftmul,w
   553  003D' 009C'              	movwf	___fttol@f1
   554  003E' 080D'              	movf	?___ftmul+1,w
   555  003F' 009D'              	movwf	___fttol@f1+1
   556  0040' 080E'              	movf	?___ftmul+2,w
   557  0041' 009E'              	movwf	___fttol@f1+2
   558  0042' 2000'              	fcall	___fttol
   559  0043' 1283               	bcf	3,5	;RP0=0, select bank0
   560  0044' 081D'              	movf	?___fttol+1,w
   561  0045' 00AE'              	movwf	main@voltage+1
   562  0046' 081C'              	movf	?___fttol,w
   563  0047' 00AD'              	movwf	main@voltage
   564                           
   565                           ;main.c: 37: Lcd_Write_Int(voltage);
   566  0048' 082E'              	movf	main@voltage+1,w
   567  0049' 0092'              	movwf	Lcd_Write_Int@a+1
   568  004A' 082D'              	movf	main@voltage,w
   569  004B' 0091'              	movwf	Lcd_Write_Int@a
   570  004C' 2000'              	fcall	_Lcd_Write_Int
   571                           
   572                           ;main.c: 38: _delay((unsigned long)((200)*(4000000/4000.0)));
   573  004D' 3002               	movlw	2
   574  004E' 1283               	bcf	3,5	;RP0=0, select bank0
   575  004F' 00AC'              	movwf	??_main+2
   576  0050' 3004               	movlw	4
   577  0051' 00AB'              	movwf	??_main+1
   578  0052' 30BA               	movlw	186
   579  0053' 00AA'              	movwf	??_main
   580  0054'                    u1397:	
   581  0054' 0BAA'              	decfsz	??_main,f
   582  0055' 2854'              	goto	u1397
   583  0056' 0BAB'              	decfsz	??_main+1,f
   584  0057' 2854'              	goto	u1397
   585  0058' 0BAC'              	decfsz	??_main+2,f
   586  0059' 2854'              	goto	u1397
   587  005A' 0000               	nop
   588  005B' 280F'              	goto	l1317
   589  005C'                    __end_of_main:	
   590                           
   591                           	psect	text1
   592  0000'                    __ptext1:	
   593 ;; *************** function _readADC *****************
   594 ;; Defined at:
   595 ;;		line 6 in file "adc.c"
   596 ;; Parameters:    Size  Location     Type
   597 ;;		None
   598 ;; Auto vars:     Size  Location     Type
   599 ;;  volt            2    4[BANK0 ] unsigned int 
   600 ;;  rxData          1    7[BANK0 ] unsigned char 
   601 ;;  bits            1    6[BANK0 ] unsigned char 
   602 ;; Return value:  Size  Location     Type
   603 ;;                  2    0[BANK0 ] unsigned int 
   604 ;; Registers used:
   605 ;;		wreg, status,2, status,0
   606 ;; Tracked objects:
   607 ;;		On entry : 0/0
   608 ;;		On exit  : 0/0
   609 ;;		Unchanged: 0/0
   610 ;; Data sizes:     COMMON   BANK0
   611 ;;      Params:         0       2
   612 ;;      Locals:         0       4
   613 ;;      Temps:          0       2
   614 ;;      Totals:         0       8
   615 ;;Total ram usage:        8 bytes
   616 ;; Hardware stack levels used:    1
   617 ;; This function calls:
   618 ;;		Nothing
   619 ;; This function is called by:
   620 ;;		_main
   621 ;; This function uses a non-reentrant model
   622 ;;
   623                           
   624                           
   625                           ;psect for function _readADC
   626  0000'                    _readADC:	
   627                           
   628                           ;adc.c: 8: unsigned char bits;
   629                           ;adc.c: 9: unsigned char rxData = 0;
   630                           
   631                           ;incstack = 0
   632                           ; Regs used in _readADC: [wreg+status,2+status,0]
   633  0000' 1283               	bcf	3,5	;RP0=0, select bank0
   634  0001' 0187'              	clrf	readADC@rxData
   635                           
   636                           ;adc.c: 10: unsigned int volt = 0;
   637  0002' 0184'              	clrf	readADC@volt
   638  0003' 0185'              	clrf	readADC@volt+1
   639                           
   640                           ;adc.c: 12: RA3 = 0;
   641  0004' 1185               	bcf	5,3	;volatile
   642                           
   643                           ;adc.c: 15: for (bits = 0; bits < 3; bits++)
   644  0005' 0186'              	clrf	readADC@bits
   645  0006' 3003               	movlw	3
   646  0007' 0206'              	subwf	readADC@bits,w
   647  0008' 1803               	btfsc	3,0
   648  0009' 281E'              	goto	l1169
   649  000A'                    l1159:	
   650                           
   651                           ;adc.c: 16: {
   652                           ;adc.c: 17: _delay((unsigned long)((100)*(4000000/4000000.0)));
   653  000A' 3021               	movlw	33
   654  000B' 0082'              	movwf	??_readADC
   655  000C'                    u1407:	
   656  000C' 0B82'              	decfsz	??_readADC,f
   657  000D' 280C'              	goto	u1407
   658                           
   659                           ;adc.c: 18: RA1 = 1;
   660  000E' 1283               	bcf	3,5	;RP0=0, select bank0
   661  000F' 1485               	bsf	5,1	;volatile
   662                           
   663                           ;adc.c: 19: _delay((unsigned long)((100)*(4000000/4000000.0)));
   664  0010' 3021               	movlw	33
   665  0011' 0082'              	movwf	??_readADC
   666  0012'                    u1417:	
   667  0012' 0B82'              	decfsz	??_readADC,f
   668  0013' 2812'              	goto	u1417
   669                           
   670                           ;adc.c: 20: RA1 = 0;
   671  0014' 1283               	bcf	3,5	;RP0=0, select bank0
   672  0015' 1085               	bcf	5,1	;volatile
   673  0016' 3001               	movlw	1
   674  0017' 0082'              	movwf	??_readADC
   675  0018' 0802'              	movf	??_readADC,w
   676  0019' 0786'              	addwf	readADC@bits,f
   677  001A' 3003               	movlw	3
   678  001B' 0206'              	subwf	readADC@bits,w
   679  001C' 1C03               	skipc
   680  001D' 280A'              	goto	l1159
   681  001E'                    l1169:	
   682                           
   683                           ;adc.c: 21: }
   684                           ;adc.c: 24: for (bits = 0; bits < 8; bits++)
   685  001E' 0186'              	clrf	readADC@bits
   686  001F' 3008               	movlw	8
   687  0020' 0206'              	subwf	readADC@bits,w
   688  0021' 1803               	btfsc	3,0
   689  0022' 2847'              	goto	l44
   690  0023'                    l1175:	
   691                           
   692                           ;adc.c: 25: {
   693                           ;adc.c: 27: _delay((unsigned long)((100)*(4000000/4000000.0)));
   694  0023' 3021               	movlw	33
   695  0024' 0082'              	movwf	??_readADC
   696  0025'                    u1427:	
   697  0025' 0B82'              	decfsz	??_readADC,f
   698  0026' 2825'              	goto	u1427
   699                           
   700                           ;adc.c: 28: RA1 = 1;
   701  0027' 1283               	bcf	3,5	;RP0=0, select bank0
   702  0028' 1485               	bsf	5,1	;volatile
   703                           
   704                           ;adc.c: 31: rxData = rxData << 1;
   705  0029' 0807'              	movf	readADC@rxData,w
   706  002A' 0082'              	movwf	??_readADC
   707  002B' 0702'              	addwf	??_readADC,w
   708  002C' 0083'              	movwf	??_readADC+1
   709  002D' 0803'              	movf	??_readADC+1,w
   710  002E' 0087'              	movwf	readADC@rxData
   711                           
   712                           ;adc.c: 34: if(RA2 == 1)
   713  002F' 1D05               	btfss	5,2	;volatile
   714  0030' 2834'              	goto	l1185
   715                           
   716                           ;adc.c: 35: rxData = rxData | 0x01;
   717  0031' 0807'              	movf	readADC@rxData,w
   718  0032' 3801               	iorlw	1
   719  0033' 2836'              	goto	L1
   720  0034'                    l1185:	
   721                           
   722                           ;adc.c: 36: else
   723                           ;adc.c: 37: rxData = rxData & 0xfe;
   724  0034' 0807'              	movf	readADC@rxData,w
   725  0035' 39FE               	andlw	254
   726  0036'                    L1:	
   727  0036' 0082'              	movwf	??_readADC
   728  0037' 0802'              	movf	??_readADC,w
   729  0038' 0087'              	movwf	readADC@rxData
   730                           
   731                           ;adc.c: 39: _delay((unsigned long)((100)*(4000000/4000000.0)));
   732  0039' 3021               	movlw	33
   733  003A' 0082'              	movwf	??_readADC
   734  003B'                    u1437:	
   735  003B' 0B82'              	decfsz	??_readADC,f
   736  003C' 283B'              	goto	u1437
   737                           
   738                           ;adc.c: 40: RA1 = 0;
   739  003D' 1283               	bcf	3,5	;RP0=0, select bank0
   740  003E' 1085               	bcf	5,1	;volatile
   741  003F' 3001               	movlw	1
   742  0040' 0082'              	movwf	??_readADC
   743  0041' 0802'              	movf	??_readADC,w
   744  0042' 0786'              	addwf	readADC@bits,f
   745  0043' 3008               	movlw	8
   746  0044' 0206'              	subwf	readADC@bits,w
   747  0045' 1C03               	skipc
   748  0046' 2823'              	goto	l1175
   749  0047'                    l44:	
   750                           
   751                           ;adc.c: 41: }
   752                           ;adc.c: 44: RA3 = 1;
   753  0047' 1585               	bsf	5,3	;volatile
   754                           
   755                           ;adc.c: 47: volt = (rxData << 2);
   756  0048' 0807'              	movf	readADC@rxData,w
   757  0049' 0082'              	movwf	??_readADC
   758  004A' 0183'              	clrf	??_readADC+1
   759  004B' 1003               	clrc
   760  004C' 0D82'              	rlf	??_readADC,f
   761  004D' 0D83'              	rlf	??_readADC+1,f
   762  004E' 1003               	clrc
   763  004F' 0D82'              	rlf	??_readADC,f
   764  0050' 0D83'              	rlf	??_readADC+1,f
   765  0051' 0802'              	movf	??_readADC,w
   766  0052' 0084'              	movwf	readADC@volt
   767  0053' 0803'              	movf	??_readADC+1,w
   768  0054' 0085'              	movwf	readADC@volt+1
   769                           
   770                           ;adc.c: 48: return volt;
   771  0055' 0805'              	movf	readADC@volt+1,w
   772  0056' 0081'              	movwf	?_readADC+1
   773  0057' 0804'              	movf	readADC@volt,w
   774  0058' 0080'              	movwf	?_readADC
   775  0059' 0008               	return
   776  005A'                    __end_of_readADC:	
   777                           
   778                           	psect	text2
   779  0000'                    __ptext2:	
   780 ;; *************** function ___lwtoft *****************
   781 ;; Defined at:
   782 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwtoft.c"
   783 ;; Parameters:    Size  Location     Type
   784 ;;  c               2    8[BANK0 ] unsigned int 
   785 ;; Auto vars:     Size  Location     Type
   786 ;;		None
   787 ;; Return value:  Size  Location     Type
   788 ;;                  3    8[BANK0 ] float 
   789 ;; Registers used:
   790 ;;		wreg, status,2, status,0, pclath, cstack
   791 ;; Tracked objects:
   792 ;;		On entry : 0/0
   793 ;;		On exit  : 0/0
   794 ;;		Unchanged: 0/0
   795 ;; Data sizes:     COMMON   BANK0
   796 ;;      Params:         0       3
   797 ;;      Locals:         0       0
   798 ;;      Temps:          0       1
   799 ;;      Totals:         0       4
   800 ;;Total ram usage:        4 bytes
   801 ;; Hardware stack levels used:    1
   802 ;; Hardware stack levels required when called:    1
   803 ;; This function calls:
   804 ;;		___ftpack
   805 ;; This function is called by:
   806 ;;		_main
   807 ;; This function uses a non-reentrant model
   808 ;;
   809                           
   810                           
   811                           ;psect for function ___lwtoft
   812  0000'                    ___lwtoft:	
   813                           
   814                           ;incstack = 0
   815                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
   816  0000' 1283               	bcf	3,5	;RP0=0, select bank0
   817  0001' 0808'              	movf	___lwtoft@c,w
   818  0002' 0080'              	movwf	___ftpack@arg
   819  0003' 0809'              	movf	___lwtoft@c+1,w
   820  0004' 0081'              	movwf	___ftpack@arg+1
   821  0005' 0182'              	clrf	___ftpack@arg+2
   822  0006' 308E               	movlw	142
   823  0007' 008B'              	movwf	??___lwtoft
   824  0008' 080B'              	movf	??___lwtoft,w
   825  0009' 0083'              	movwf	___ftpack@exp
   826  000A' 0184'              	clrf	___ftpack@sign
   827  000B' 2000'              	fcall	___ftpack
   828  000C' 1283               	bcf	3,5	;RP0=0, select bank0
   829  000D' 0800'              	movf	?___ftpack,w
   830  000E' 0088'              	movwf	?___lwtoft
   831  000F' 0801'              	movf	?___ftpack+1,w
   832  0010' 0089'              	movwf	?___lwtoft+1
   833  0011' 0802'              	movf	?___ftpack+2,w
   834  0012' 008A'              	movwf	?___lwtoft+2
   835  0013' 0008               	return
   836  0014'                    __end_of___lwtoft:	
   837                           
   838                           	psect	text3
   839  0000'                    __ptext3:	
   840 ;; *************** function ___fttol *****************
   841 ;; Defined at:
   842 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\fttol.c"
   843 ;; Parameters:    Size  Location     Type
   844 ;;  f1              3   28[BANK0 ] float 
   845 ;; Auto vars:     Size  Location     Type
   846 ;;  lval            4   37[BANK0 ] unsigned long 
   847 ;;  exp1            1   41[BANK0 ] unsigned char 
   848 ;;  sign1           1   36[BANK0 ] unsigned char 
   849 ;; Return value:  Size  Location     Type
   850 ;;                  4   28[BANK0 ] long 
   851 ;; Registers used:
   852 ;;		wreg, status,2, status,0
   853 ;; Tracked objects:
   854 ;;		On entry : 0/0
   855 ;;		On exit  : 0/0
   856 ;;		Unchanged: 0/0
   857 ;; Data sizes:     COMMON   BANK0
   858 ;;      Params:         0       4
   859 ;;      Locals:         0       6
   860 ;;      Temps:          0       4
   861 ;;      Totals:         0      14
   862 ;;Total ram usage:       14 bytes
   863 ;; Hardware stack levels used:    1
   864 ;; This function calls:
   865 ;;		Nothing
   866 ;; This function is called by:
   867 ;;		_main
   868 ;; This function uses a non-reentrant model
   869 ;;
   870                           
   871                           
   872                           ;psect for function ___fttol
   873  0000'                    ___fttol:	
   874                           
   875                           ;incstack = 0
   876                           ; Regs used in ___fttol: [wreg+status,2+status,0]
   877  0000' 1283               	bcf	3,5	;RP0=0, select bank0
   878  0001' 081C'              	movf	___fttol@f1,w
   879  0002' 00A0'              	movwf	??___fttol
   880  0003' 081D'              	movf	___fttol@f1+1,w
   881  0004' 00A1'              	movwf	??___fttol+1
   882  0005' 081E'              	movf	___fttol@f1+2,w
   883  0006' 00A2'              	movwf	??___fttol+2
   884  0007' 1003               	clrc
   885  0008' 0D21'              	rlf	??___fttol+1,w
   886  0009' 0D22'              	rlf	??___fttol+2,w
   887  000A' 00A3'              	movwf	??___fttol+3
   888  000B' 0823'              	movf	??___fttol+3,w
   889  000C' 00A9'              	movwf	___fttol@exp1
   890  000D' 0829'              	movf	___fttol@exp1,w
   891  000E' 1D03               	btfss	3,2
   892  000F' 2819'              	goto	l1261
   893  0010' 3000               	movlw	0
   894  0011' 009F'              	movwf	?___fttol+3
   895  0012' 3000               	movlw	0
   896  0013' 009E'              	movwf	?___fttol+2
   897  0014' 3000               	movlw	0
   898  0015' 009D'              	movwf	?___fttol+1
   899  0016' 3000               	movlw	0
   900  0017' 009C'              	movwf	?___fttol
   901  0018' 0008               	return
   902  0019'                    l1261:	
   903  0019' 081C'              	movf	___fttol@f1,w
   904  001A' 00A0'              	movwf	??___fttol
   905  001B' 081D'              	movf	___fttol@f1+1,w
   906  001C' 00A1'              	movwf	??___fttol+1
   907  001D' 081E'              	movf	___fttol@f1+2,w
   908  001E' 00A2'              	movwf	??___fttol+2
   909  001F' 3017               	movlw	23
   910  0020'                    u1305:	
   911  0020' 1003               	clrc
   912  0021' 0CA2'              	rrf	??___fttol+2,f
   913  0022' 0CA1'              	rrf	??___fttol+1,f
   914  0023' 0CA0'              	rrf	??___fttol,f
   915  0024' 3EFF               	addlw	-1
   916  0025' 1D03               	skipz
   917  0026' 2820'              	goto	u1305
   918  0027' 0820'              	movf	??___fttol,w
   919  0028' 00A3'              	movwf	??___fttol+3
   920  0029' 0823'              	movf	??___fttol+3,w
   921  002A' 00A4'              	movwf	___fttol@sign1
   922  002B' 179D'              	bsf	___fttol@f1+1,7
   923  002C' 30FF               	movlw	255
   924  002D' 059C'              	andwf	___fttol@f1,f
   925  002E' 30FF               	movlw	255
   926  002F' 059D'              	andwf	___fttol@f1+1,f
   927  0030' 3000               	movlw	0
   928  0031' 059E'              	andwf	___fttol@f1+2,f
   929  0032' 081C'              	movf	___fttol@f1,w
   930  0033' 00A5'              	movwf	___fttol@lval
   931  0034' 081D'              	movf	___fttol@f1+1,w
   932  0035' 00A6'              	movwf	___fttol@lval+1
   933  0036' 081E'              	movf	___fttol@f1+2,w
   934  0037' 00A7'              	movwf	___fttol@lval+2
   935  0038' 01A8'              	clrf	___fttol@lval+3
   936  0039' 308E               	movlw	142
   937  003A' 02A9'              	subwf	___fttol@exp1,f
   938  003B' 1FA9'              	btfss	___fttol@exp1,7
   939  003C' 285B'              	goto	l1281
   940  003D' 0829'              	movf	___fttol@exp1,w
   941  003E' 3A80               	xorlw	128
   942  003F' 3E8F               	addlw	143
   943  0040' 1803               	skipnc
   944  0041' 284B'              	goto	l1279
   945  0042' 3000               	movlw	0
   946  0043' 009F'              	movwf	?___fttol+3
   947  0044' 3000               	movlw	0
   948  0045' 009E'              	movwf	?___fttol+2
   949  0046' 3000               	movlw	0
   950  0047' 009D'              	movwf	?___fttol+1
   951  0048' 3000               	movlw	0
   952  0049' 009C'              	movwf	?___fttol
   953  004A' 0008               	return
   954  004B'                    l1279:	
   955  004B' 3001               	movlw	1
   956  004C'                    u1335:	
   957  004C' 1003               	clrc
   958  004D' 0CA8'              	rrf	___fttol@lval+3,f
   959  004E' 0CA7'              	rrf	___fttol@lval+2,f
   960  004F' 0CA6'              	rrf	___fttol@lval+1,f
   961  0050' 0CA5'              	rrf	___fttol@lval,f
   962  0051' 3EFF               	addlw	-1
   963  0052' 1D03               	skipz
   964  0053' 284C'              	goto	u1335
   965  0054' 3001               	movlw	1
   966  0055' 00A0'              	movwf	??___fttol
   967  0056' 0820'              	movf	??___fttol,w
   968  0057' 07A9'              	addwf	___fttol@exp1,f
   969  0058' 1903               	btfsc	3,2
   970  0059' 2876'              	goto	l1289
   971  005A' 284B'              	goto	l1279
   972  005B'                    l1281:	
   973  005B' 3018               	movlw	24
   974  005C' 0229'              	subwf	___fttol@exp1,w
   975  005D' 1C03               	skipc
   976  005E' 2873'              	goto	l443
   977  005F' 3000               	movlw	0
   978  0060' 009F'              	movwf	?___fttol+3
   979  0061' 3000               	movlw	0
   980  0062' 009E'              	movwf	?___fttol+2
   981  0063' 3000               	movlw	0
   982  0064' 009D'              	movwf	?___fttol+1
   983  0065' 3000               	movlw	0
   984  0066' 009C'              	movwf	?___fttol
   985  0067' 0008               	return
   986  0068'                    l1287:	
   987  0068' 3001               	movlw	1
   988  0069' 00A0'              	movwf	??___fttol
   989  006A'                    u1365:	
   990  006A' 1003               	clrc
   991  006B' 0DA5'              	rlf	___fttol@lval,f
   992  006C' 0DA6'              	rlf	___fttol@lval+1,f
   993  006D' 0DA7'              	rlf	___fttol@lval+2,f
   994  006E' 0DA8'              	rlf	___fttol@lval+3,f
   995  006F' 0BA0'              	decfsz	??___fttol,f
   996  0070' 286A'              	goto	u1365
   997  0071' 3001               	movlw	1
   998  0072' 02A9'              	subwf	___fttol@exp1,f
   999  0073'                    l443:	
  1000  0073' 0829'              	movf	___fttol@exp1,w
  1001  0074' 1D03               	btfss	3,2
  1002  0075' 2868'              	goto	l1287
  1003  0076'                    l1289:	
  1004  0076' 0824'              	movf	___fttol@sign1,w
  1005  0077' 1903               	btfsc	3,2
  1006  0078' 2884'              	goto	l1293
  1007  0079' 09A5'              	comf	___fttol@lval,f
  1008  007A' 09A6'              	comf	___fttol@lval+1,f
  1009  007B' 09A7'              	comf	___fttol@lval+2,f
  1010  007C' 09A8'              	comf	___fttol@lval+3,f
  1011  007D' 0AA5'              	incf	___fttol@lval,f
  1012  007E' 1903               	skipnz
  1013  007F' 0AA6'              	incf	___fttol@lval+1,f
  1014  0080' 1903               	skipnz
  1015  0081' 0AA7'              	incf	___fttol@lval+2,f
  1016  0082' 1903               	skipnz
  1017  0083' 0AA8'              	incf	___fttol@lval+3,f
  1018  0084'                    l1293:	
  1019  0084' 0828'              	movf	___fttol@lval+3,w
  1020  0085' 009F'              	movwf	?___fttol+3
  1021  0086' 0827'              	movf	___fttol@lval+2,w
  1022  0087' 009E'              	movwf	?___fttol+2
  1023  0088' 0826'              	movf	___fttol@lval+1,w
  1024  0089' 009D'              	movwf	?___fttol+1
  1025  008A' 0825'              	movf	___fttol@lval,w
  1026  008B' 009C'              	movwf	?___fttol
  1027  008C' 0008               	return
  1028  008D'                    __end_of___fttol:	
  1029                           
  1030                           	psect	text4
  1031  0000'                    __ptext4:	
  1032 ;; *************** function ___ftmul *****************
  1033 ;; Defined at:
  1034 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftmul.c"
  1035 ;; Parameters:    Size  Location     Type
  1036 ;;  f1              3   12[BANK0 ] float 
  1037 ;;  f2              3   15[BANK0 ] float 
  1038 ;; Auto vars:     Size  Location     Type
  1039 ;;  f3_as_produc    3   23[BANK0 ] unsigned um
  1040 ;;  sign            1   27[BANK0 ] unsigned char 
  1041 ;;  cntr            1   26[BANK0 ] unsigned char 
  1042 ;;  exp             1   22[BANK0 ] unsigned char 
  1043 ;; Return value:  Size  Location     Type
  1044 ;;                  3   12[BANK0 ] float 
  1045 ;; Registers used:
  1046 ;;		wreg, status,2, status,0, pclath, cstack
  1047 ;; Tracked objects:
  1048 ;;		On entry : 0/0
  1049 ;;		On exit  : 0/0
  1050 ;;		Unchanged: 0/0
  1051 ;; Data sizes:     COMMON   BANK0
  1052 ;;      Params:         0       6
  1053 ;;      Locals:         0       6
  1054 ;;      Temps:          0       4
  1055 ;;      Totals:         0      16
  1056 ;;Total ram usage:       16 bytes
  1057 ;; Hardware stack levels used:    1
  1058 ;; Hardware stack levels required when called:    1
  1059 ;; This function calls:
  1060 ;;		___ftpack
  1061 ;; This function is called by:
  1062 ;;		_main
  1063 ;; This function uses a non-reentrant model
  1064 ;;
  1065                           
  1066                           
  1067                           ;psect for function ___ftmul
  1068  0000'                    ___ftmul:	
  1069                           
  1070                           ;incstack = 0
  1071                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  1072  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1073  0001' 080C'              	movf	___ftmul@f1,w
  1074  0002' 0092'              	movwf	??___ftmul
  1075  0003' 080D'              	movf	___ftmul@f1+1,w
  1076  0004' 0093'              	movwf	??___ftmul+1
  1077  0005' 080E'              	movf	___ftmul@f1+2,w
  1078  0006' 0094'              	movwf	??___ftmul+2
  1079  0007' 1003               	clrc
  1080  0008' 0D13'              	rlf	??___ftmul+1,w
  1081  0009' 0D14'              	rlf	??___ftmul+2,w
  1082  000A' 0095'              	movwf	??___ftmul+3
  1083  000B' 0815'              	movf	??___ftmul+3,w
  1084  000C' 0096'              	movwf	___ftmul@exp
  1085  000D' 0816'              	movf	___ftmul@exp,w
  1086  000E' 1D03               	btfss	3,2
  1087  000F' 2817'              	goto	l1211
  1088  0010' 3000               	movlw	0
  1089  0011' 008C'              	movwf	?___ftmul
  1090  0012' 3000               	movlw	0
  1091  0013' 008D'              	movwf	?___ftmul+1
  1092  0014' 3000               	movlw	0
  1093  0015' 008E'              	movwf	?___ftmul+2
  1094  0016' 0008               	return
  1095  0017'                    l1211:	
  1096  0017' 080F'              	movf	___ftmul@f2,w
  1097  0018' 0092'              	movwf	??___ftmul
  1098  0019' 0810'              	movf	___ftmul@f2+1,w
  1099  001A' 0093'              	movwf	??___ftmul+1
  1100  001B' 0811'              	movf	___ftmul@f2+2,w
  1101  001C' 0094'              	movwf	??___ftmul+2
  1102  001D' 1003               	clrc
  1103  001E' 0D13'              	rlf	??___ftmul+1,w
  1104  001F' 0D14'              	rlf	??___ftmul+2,w
  1105  0020' 0095'              	movwf	??___ftmul+3
  1106  0021' 0815'              	movf	??___ftmul+3,w
  1107  0022' 009B'              	movwf	___ftmul@sign
  1108  0023' 081B'              	movf	___ftmul@sign,w
  1109  0024' 1D03               	btfss	3,2
  1110  0025' 282D'              	goto	l1217
  1111  0026' 3000               	movlw	0
  1112  0027' 008C'              	movwf	?___ftmul
  1113  0028' 3000               	movlw	0
  1114  0029' 008D'              	movwf	?___ftmul+1
  1115  002A' 3000               	movlw	0
  1116  002B' 008E'              	movwf	?___ftmul+2
  1117  002C' 0008               	return
  1118  002D'                    l1217:	
  1119  002D' 081B'              	movf	___ftmul@sign,w
  1120  002E' 3E7B               	addlw	123
  1121  002F' 0092'              	movwf	??___ftmul
  1122  0030' 0812'              	movf	??___ftmul,w
  1123  0031' 0796'              	addwf	___ftmul@exp,f
  1124  0032' 080C'              	movf	___ftmul@f1,w
  1125  0033' 0092'              	movwf	??___ftmul
  1126  0034' 080D'              	movf	___ftmul@f1+1,w
  1127  0035' 0093'              	movwf	??___ftmul+1
  1128  0036' 080E'              	movf	___ftmul@f1+2,w
  1129  0037' 0094'              	movwf	??___ftmul+2
  1130  0038' 3010               	movlw	16
  1131  0039'                    u1175:	
  1132  0039' 1003               	clrc
  1133  003A' 0C94'              	rrf	??___ftmul+2,f
  1134  003B' 0C93'              	rrf	??___ftmul+1,f
  1135  003C' 0C92'              	rrf	??___ftmul,f
  1136  003D' 3EFF               	addlw	-1
  1137  003E' 1D03               	skipz
  1138  003F' 2839'              	goto	u1175
  1139  0040' 0812'              	movf	??___ftmul,w
  1140  0041' 0095'              	movwf	??___ftmul+3
  1141  0042' 0815'              	movf	??___ftmul+3,w
  1142  0043' 009B'              	movwf	___ftmul@sign
  1143  0044' 080F'              	movf	___ftmul@f2,w
  1144  0045' 0092'              	movwf	??___ftmul
  1145  0046' 0810'              	movf	___ftmul@f2+1,w
  1146  0047' 0093'              	movwf	??___ftmul+1
  1147  0048' 0811'              	movf	___ftmul@f2+2,w
  1148  0049' 0094'              	movwf	??___ftmul+2
  1149  004A' 3010               	movlw	16
  1150  004B'                    u1185:	
  1151  004B' 1003               	clrc
  1152  004C' 0C94'              	rrf	??___ftmul+2,f
  1153  004D' 0C93'              	rrf	??___ftmul+1,f
  1154  004E' 0C92'              	rrf	??___ftmul,f
  1155  004F' 3EFF               	addlw	-1
  1156  0050' 1D03               	skipz
  1157  0051' 284B'              	goto	u1185
  1158  0052' 0812'              	movf	??___ftmul,w
  1159  0053' 0095'              	movwf	??___ftmul+3
  1160  0054' 0815'              	movf	??___ftmul+3,w
  1161  0055' 069B'              	xorwf	___ftmul@sign,f
  1162  0056' 3080               	movlw	128
  1163  0057' 0092'              	movwf	??___ftmul
  1164  0058' 0812'              	movf	??___ftmul,w
  1165  0059' 059B'              	andwf	___ftmul@sign,f
  1166  005A' 178D'              	bsf	___ftmul@f1+1,7
  1167  005B' 1790'              	bsf	___ftmul@f2+1,7
  1168  005C' 30FF               	movlw	255
  1169  005D' 058F'              	andwf	___ftmul@f2,f
  1170  005E' 30FF               	movlw	255
  1171  005F' 0590'              	andwf	___ftmul@f2+1,f
  1172  0060' 3000               	movlw	0
  1173  0061' 0591'              	andwf	___ftmul@f2+2,f
  1174  0062' 3000               	movlw	0
  1175  0063' 0097'              	movwf	___ftmul@f3_as_product
  1176  0064' 3000               	movlw	0
  1177  0065' 0098'              	movwf	___ftmul@f3_as_product+1
  1178  0066' 3000               	movlw	0
  1179  0067' 0099'              	movwf	___ftmul@f3_as_product+2
  1180  0068' 3007               	movlw	7
  1181  0069' 0092'              	movwf	??___ftmul
  1182  006A' 0812'              	movf	??___ftmul,w
  1183  006B' 009A'              	movwf	___ftmul@cntr
  1184  006C'                    l1229:	
  1185  006C' 1C0C'              	btfss	___ftmul@f1,0
  1186  006D' 287C'              	goto	l1233
  1187  006E' 080F'              	movf	___ftmul@f2,w
  1188  006F' 0797'              	addwf	___ftmul@f3_as_product,f
  1189  0070' 0810'              	movf	___ftmul@f2+1,w
  1190  0071' 1103               	clrz
  1191  0072' 1803               	skipnc
  1192  0073' 0A10'              	incf	___ftmul@f2+1,w
  1193  0074' 1D03               	btfss	3,2
  1194  0075' 0798'              	addwf	___ftmul@f3_as_product+1,f
  1195  0076' 0811'              	movf	___ftmul@f2+2,w
  1196  0077' 1103               	clrz
  1197  0078' 1803               	skipnc
  1198  0079' 0A11'              	incf	___ftmul@f2+2,w
  1199  007A' 1D03               	btfss	3,2
  1200  007B' 0799'              	addwf	___ftmul@f3_as_product+2,f
  1201  007C'                    l1233:	
  1202  007C' 3001               	movlw	1
  1203  007D'                    u1215:	
  1204  007D' 1003               	clrc
  1205  007E' 0C8E'              	rrf	___ftmul@f1+2,f
  1206  007F' 0C8D'              	rrf	___ftmul@f1+1,f
  1207  0080' 0C8C'              	rrf	___ftmul@f1,f
  1208  0081' 3EFF               	addlw	-1
  1209  0082' 1D03               	skipz
  1210  0083' 287D'              	goto	u1215
  1211  0084' 3001               	movlw	1
  1212  0085'                    u1225:	
  1213  0085' 1003               	clrc
  1214  0086' 0D8F'              	rlf	___ftmul@f2,f
  1215  0087' 0D90'              	rlf	___ftmul@f2+1,f
  1216  0088' 0D91'              	rlf	___ftmul@f2+2,f
  1217  0089' 3EFF               	addlw	-1
  1218  008A' 1D03               	skipz
  1219  008B' 2885'              	goto	u1225
  1220  008C' 3001               	movlw	1
  1221  008D' 029A'              	subwf	___ftmul@cntr,f
  1222  008E' 1D03               	btfss	3,2
  1223  008F' 286C'              	goto	l1229
  1224  0090' 3009               	movlw	9
  1225  0091' 0092'              	movwf	??___ftmul
  1226  0092' 0812'              	movf	??___ftmul,w
  1227  0093' 009A'              	movwf	___ftmul@cntr
  1228  0094'                    l1241:	
  1229  0094' 1C0C'              	btfss	___ftmul@f1,0
  1230  0095' 28A4'              	goto	l1245
  1231  0096' 080F'              	movf	___ftmul@f2,w
  1232  0097' 0797'              	addwf	___ftmul@f3_as_product,f
  1233  0098' 0810'              	movf	___ftmul@f2+1,w
  1234  0099' 1103               	clrz
  1235  009A' 1803               	skipnc
  1236  009B' 0A10'              	incf	___ftmul@f2+1,w
  1237  009C' 1D03               	btfss	3,2
  1238  009D' 0798'              	addwf	___ftmul@f3_as_product+1,f
  1239  009E' 0811'              	movf	___ftmul@f2+2,w
  1240  009F' 1103               	clrz
  1241  00A0' 1803               	skipnc
  1242  00A1' 0A11'              	incf	___ftmul@f2+2,w
  1243  00A2' 1D03               	btfss	3,2
  1244  00A3' 0799'              	addwf	___ftmul@f3_as_product+2,f
  1245  00A4'                    l1245:	
  1246  00A4' 3001               	movlw	1
  1247  00A5'                    u1265:	
  1248  00A5' 1003               	clrc
  1249  00A6' 0C8E'              	rrf	___ftmul@f1+2,f
  1250  00A7' 0C8D'              	rrf	___ftmul@f1+1,f
  1251  00A8' 0C8C'              	rrf	___ftmul@f1,f
  1252  00A9' 3EFF               	addlw	-1
  1253  00AA' 1D03               	skipz
  1254  00AB' 28A5'              	goto	u1265
  1255  00AC' 3001               	movlw	1
  1256  00AD'                    u1275:	
  1257  00AD' 1003               	clrc
  1258  00AE' 0C99'              	rrf	___ftmul@f3_as_product+2,f
  1259  00AF' 0C98'              	rrf	___ftmul@f3_as_product+1,f
  1260  00B0' 0C97'              	rrf	___ftmul@f3_as_product,f
  1261  00B1' 3EFF               	addlw	-1
  1262  00B2' 1D03               	skipz
  1263  00B3' 28AD'              	goto	u1275
  1264  00B4' 3001               	movlw	1
  1265  00B5' 029A'              	subwf	___ftmul@cntr,f
  1266  00B6' 1D03               	btfss	3,2
  1267  00B7' 2894'              	goto	l1241
  1268  00B8' 0817'              	movf	___ftmul@f3_as_product,w
  1269  00B9' 0080'              	movwf	___ftpack@arg
  1270  00BA' 0818'              	movf	___ftmul@f3_as_product+1,w
  1271  00BB' 0081'              	movwf	___ftpack@arg+1
  1272  00BC' 0819'              	movf	___ftmul@f3_as_product+2,w
  1273  00BD' 0082'              	movwf	___ftpack@arg+2
  1274  00BE' 0816'              	movf	___ftmul@exp,w
  1275  00BF' 0092'              	movwf	??___ftmul
  1276  00C0' 0812'              	movf	??___ftmul,w
  1277  00C1' 0083'              	movwf	___ftpack@exp
  1278  00C2' 081B'              	movf	___ftmul@sign,w
  1279  00C3' 0093'              	movwf	??___ftmul+1
  1280  00C4' 0813'              	movf	??___ftmul+1,w
  1281  00C5' 0084'              	movwf	___ftpack@sign
  1282  00C6' 2000'              	fcall	___ftpack
  1283  00C7' 1283               	bcf	3,5	;RP0=0, select bank0
  1284  00C8' 0800'              	movf	?___ftpack,w
  1285  00C9' 008C'              	movwf	?___ftmul
  1286  00CA' 0801'              	movf	?___ftpack+1,w
  1287  00CB' 008D'              	movwf	?___ftmul+1
  1288  00CC' 0802'              	movf	?___ftpack+2,w
  1289  00CD' 008E'              	movwf	?___ftmul+2
  1290  00CE' 0008               	return
  1291  00CF'                    __end_of___ftmul:	
  1292                           
  1293                           	psect	text5
  1294  0000'                    __ptext5:	
  1295 ;; *************** function ___ftpack *****************
  1296 ;; Defined at:
  1297 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\float.c"
  1298 ;; Parameters:    Size  Location     Type
  1299 ;;  arg             3    0[BANK0 ] unsigned um
  1300 ;;  exp             1    3[BANK0 ] unsigned char 
  1301 ;;  sign            1    4[BANK0 ] unsigned char 
  1302 ;; Auto vars:     Size  Location     Type
  1303 ;;		None
  1304 ;; Return value:  Size  Location     Type
  1305 ;;                  3    0[BANK0 ] float 
  1306 ;; Registers used:
  1307 ;;		wreg, status,2, status,0
  1308 ;; Tracked objects:
  1309 ;;		On entry : 0/0
  1310 ;;		On exit  : 0/0
  1311 ;;		Unchanged: 0/0
  1312 ;; Data sizes:     COMMON   BANK0
  1313 ;;      Params:         0       5
  1314 ;;      Locals:         0       0
  1315 ;;      Temps:          0       3
  1316 ;;      Totals:         0       8
  1317 ;;Total ram usage:        8 bytes
  1318 ;; Hardware stack levels used:    1
  1319 ;; This function calls:
  1320 ;;		Nothing
  1321 ;; This function is called by:
  1322 ;;		___ftmul
  1323 ;;		___lwtoft
  1324 ;; This function uses a non-reentrant model
  1325 ;;
  1326                           
  1327                           
  1328                           ;psect for function ___ftpack
  1329  0000'                    ___ftpack:	
  1330                           
  1331                           ;incstack = 0
  1332                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  1333  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1334  0001' 0803'              	movf	___ftpack@exp,w
  1335  0002' 1903               	btfsc	3,2
  1336  0003' 2809'              	goto	l1089
  1337  0004' 0802'              	movf	___ftpack@arg+2,w
  1338  0005' 0401'              	iorwf	___ftpack@arg+1,w
  1339  0006' 0400'              	iorwf	___ftpack@arg,w
  1340  0007' 1D03               	skipz
  1341  0008' 281C'              	goto	l1095
  1342  0009'                    l1089:	
  1343  0009' 3000               	movlw	0
  1344  000A' 0080'              	movwf	?___ftpack
  1345  000B' 3000               	movlw	0
  1346  000C' 0081'              	movwf	?___ftpack+1
  1347  000D' 3000               	movlw	0
  1348  000E' 0082'              	movwf	?___ftpack+2
  1349  000F' 0008               	return
  1350  0010'                    l1093:	
  1351  0010' 3001               	movlw	1
  1352  0011' 0085'              	movwf	??___ftpack
  1353  0012' 0805'              	movf	??___ftpack,w
  1354  0013' 0783'              	addwf	___ftpack@exp,f
  1355  0014' 3001               	movlw	1
  1356  0015'                    u965:	
  1357  0015' 1003               	clrc
  1358  0016' 0C82'              	rrf	___ftpack@arg+2,f
  1359  0017' 0C81'              	rrf	___ftpack@arg+1,f
  1360  0018' 0C80'              	rrf	___ftpack@arg,f
  1361  0019' 3EFF               	addlw	-1
  1362  001A' 1D03               	skipz
  1363  001B' 2815'              	goto	u965
  1364  001C'                    l1095:	
  1365  001C' 30FE               	movlw	254
  1366  001D' 0502'              	andwf	___ftpack@arg+2,w
  1367  001E' 1903               	btfsc	3,2
  1368  001F' 2837'              	goto	l352
  1369  0020' 2810'              	goto	l1093
  1370  0021'                    l1097:	
  1371  0021' 3001               	movlw	1
  1372  0022' 0085'              	movwf	??___ftpack
  1373  0023' 0805'              	movf	??___ftpack,w
  1374  0024' 0783'              	addwf	___ftpack@exp,f
  1375  0025' 3001               	movlw	1
  1376  0026' 0780'              	addwf	___ftpack@arg,f
  1377  0027' 3000               	movlw	0
  1378  0028' 1803               	skipnc
  1379  0029' 3001               	movlw	1
  1380  002A' 0781'              	addwf	___ftpack@arg+1,f
  1381  002B' 3000               	movlw	0
  1382  002C' 1803               	skipnc
  1383  002D' 3001               	movlw	1
  1384  002E' 0782'              	addwf	___ftpack@arg+2,f
  1385  002F' 3001               	movlw	1
  1386  0030'                    u985:	
  1387  0030' 1003               	clrc
  1388  0031' 0C82'              	rrf	___ftpack@arg+2,f
  1389  0032' 0C81'              	rrf	___ftpack@arg+1,f
  1390  0033' 0C80'              	rrf	___ftpack@arg,f
  1391  0034' 3EFF               	addlw	-1
  1392  0035' 1D03               	skipz
  1393  0036' 2830'              	goto	u985
  1394  0037'                    l352:	
  1395  0037' 30FF               	movlw	255
  1396  0038' 0502'              	andwf	___ftpack@arg+2,w
  1397  0039' 1903               	btfsc	3,2
  1398  003A' 2846'              	goto	l1105
  1399  003B' 2821'              	goto	l1097
  1400  003C'                    l1103:	
  1401  003C' 3001               	movlw	1
  1402  003D' 0283'              	subwf	___ftpack@exp,f
  1403  003E' 3001               	movlw	1
  1404  003F'                    u1005:	
  1405  003F' 1003               	clrc
  1406  0040' 0D80'              	rlf	___ftpack@arg,f
  1407  0041' 0D81'              	rlf	___ftpack@arg+1,f
  1408  0042' 0D82'              	rlf	___ftpack@arg+2,f
  1409  0043' 3EFF               	addlw	-1
  1410  0044' 1D03               	skipz
  1411  0045' 283F'              	goto	u1005
  1412  0046'                    l1105:	
  1413  0046' 1B81'              	btfsc	___ftpack@arg+1,7
  1414  0047' 284C'              	goto	l359
  1415  0048' 3002               	movlw	2
  1416  0049' 0203'              	subwf	___ftpack@exp,w
  1417  004A' 1803               	skipnc
  1418  004B' 283C'              	goto	l1103
  1419  004C'                    l359:	
  1420  004C' 1803'              	btfsc	___ftpack@exp,0
  1421  004D' 2854'              	goto	l360
  1422  004E' 30FF               	movlw	255
  1423  004F' 0580'              	andwf	___ftpack@arg,f
  1424  0050' 307F               	movlw	127
  1425  0051' 0581'              	andwf	___ftpack@arg+1,f
  1426  0052' 30FF               	movlw	255
  1427  0053' 0582'              	andwf	___ftpack@arg+2,f
  1428  0054'                    l360:	
  1429  0054' 1003               	clrc
  1430  0055' 0C83'              	rrf	___ftpack@exp,f
  1431  0056' 0803'              	movf	___ftpack@exp,w
  1432  0057' 0085'              	movwf	??___ftpack
  1433  0058' 0186'              	clrf	??___ftpack+1
  1434  0059' 0187'              	clrf	??___ftpack+2
  1435  005A' 3010               	movlw	16
  1436  005B'                    u1045:	
  1437  005B' 1003               	clrc
  1438  005C' 0D85'              	rlf	??___ftpack,f
  1439  005D' 0D86'              	rlf	??___ftpack+1,f
  1440  005E' 0D87'              	rlf	??___ftpack+2,f
  1441  005F' 3EFF               	addlw	-1
  1442  0060' 1D03               	skipz
  1443  0061' 285B'              	goto	u1045
  1444  0062' 0805'              	movf	??___ftpack,w
  1445  0063' 0480'              	iorwf	___ftpack@arg,f
  1446  0064' 0806'              	movf	??___ftpack+1,w
  1447  0065' 0481'              	iorwf	___ftpack@arg+1,f
  1448  0066' 0807'              	movf	??___ftpack+2,w
  1449  0067' 0482'              	iorwf	___ftpack@arg+2,f
  1450  0068' 0804'              	movf	___ftpack@sign,w
  1451  0069' 1903               	btfsc	3,2
  1452  006A' 0008               	return
  1453  006B' 1782'              	bsf	___ftpack@arg+2,7
  1454  006C' 0008               	return
  1455  006D'                    __end_of___ftpack:	
  1456                           
  1457                           	psect	text6
  1458  0000'                    __ptext6:	
  1459 ;; *************** function _Lcd_Write_Int *****************
  1460 ;; Defined at:
  1461 ;;		line 120 in file "lcd.c"
  1462 ;; Parameters:    Size  Location     Type
  1463 ;;  a               2   17[BANK0 ] unsigned int 
  1464 ;; Auto vars:     Size  Location     Type
  1465 ;;  temp           16   19[BANK0 ] unsigned char [16]
  1466 ;; Return value:  Size  Location     Type
  1467 ;;		None               void
  1468 ;; Registers used:
  1469 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1470 ;; Tracked objects:
  1471 ;;		On entry : 0/0
  1472 ;;		On exit  : 0/0
  1473 ;;		Unchanged: 0/0
  1474 ;; Data sizes:     COMMON   BANK0
  1475 ;;      Params:         0       2
  1476 ;;      Locals:         0      16
  1477 ;;      Temps:          0       0
  1478 ;;      Totals:         0      18
  1479 ;;Total ram usage:       18 bytes
  1480 ;; Hardware stack levels used:    1
  1481 ;; Hardware stack levels required when called:    3
  1482 ;; This function calls:
  1483 ;;		_Lcd_Write_String
  1484 ;;		_utoa
  1485 ;; This function is called by:
  1486 ;;		_main
  1487 ;; This function uses a non-reentrant model
  1488 ;;
  1489                           
  1490                           
  1491                           ;psect for function _Lcd_Write_Int
  1492  0000'                    _Lcd_Write_Int:	
  1493                           
  1494                           ;lcd.c: 122: char temp[16];
  1495                           ;lcd.c: 123: utoa((char*)temp, a, 10);
  1496                           
  1497                           ;incstack = 0
  1498                           ; Regs used in _Lcd_Write_Int: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1499  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1500  0001' 0812'              	movf	Lcd_Write_Int@a+1,w
  1501  0002' 0089'              	movwf	utoa@val+1
  1502  0003' 0811'              	movf	Lcd_Write_Int@a,w
  1503  0004' 0088'              	movwf	utoa@val
  1504  0005' 300A               	movlw	10
  1505  0006' 008A'              	movwf	utoa@base
  1506  0007' 3000               	movlw	0
  1507  0008' 008B'              	movwf	utoa@base+1
  1508  0009' 3000'              	movlw	(low (Lcd_Write_Int@temp| 0))& (0+255)
  1509  000A' 2000'              	fcall	_utoa
  1510                           
  1511                           ;lcd.c: 124: Lcd_Write_String(temp);
  1512  000B' 3000'              	movlw	(low (Lcd_Write_Int@temp| 0))& (0+255)
  1513  000C' 1283               	bcf	3,5	;RP0=0, select bank0
  1514  000D' 0085'              	movwf	Lcd_Write_String@a
  1515  000E' 3000               	movlw	0
  1516  000F' 0086'              	movwf	Lcd_Write_String@a+1
  1517  0010' 2000'              	fcall	_Lcd_Write_String
  1518  0011' 0008               	return
  1519  0012'                    __end_of_Lcd_Write_Int:	
  1520                           
  1521                           	psect	text7
  1522  0000'                    __ptext7:	
  1523 ;; *************** function _utoa *****************
  1524 ;; Defined at:
  1525 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\itoa.c"
  1526 ;; Parameters:    Size  Location     Type
  1527 ;;  buf             1    wreg     PTR unsigned char 
  1528 ;;		 -> Lcd_Write_Int@temp(16), 
  1529 ;;  val             2    8[BANK0 ] unsigned int 
  1530 ;;  base            2   10[BANK0 ] int 
  1531 ;; Auto vars:     Size  Location     Type
  1532 ;;  buf             1   16[BANK0 ] PTR unsigned char 
  1533 ;;		 -> Lcd_Write_Int@temp(16), 
  1534 ;;  v               2   13[BANK0 ] unsigned int 
  1535 ;;  c               1   15[BANK0 ] unsigned char 
  1536 ;; Return value:  Size  Location     Type
  1537 ;;                  1    wreg      PTR unsigned char 
  1538 ;; Registers used:
  1539 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1540 ;; Tracked objects:
  1541 ;;		On entry : 0/0
  1542 ;;		On exit  : 0/0
  1543 ;;		Unchanged: 0/0
  1544 ;; Data sizes:     COMMON   BANK0
  1545 ;;      Params:         0       4
  1546 ;;      Locals:         0       4
  1547 ;;      Temps:          0       1
  1548 ;;      Totals:         0       9
  1549 ;;Total ram usage:        9 bytes
  1550 ;; Hardware stack levels used:    1
  1551 ;; Hardware stack levels required when called:    1
  1552 ;; This function calls:
  1553 ;;		___lwdiv
  1554 ;;		___lwmod
  1555 ;; This function is called by:
  1556 ;;		_Lcd_Write_Int
  1557 ;; This function uses a non-reentrant model
  1558 ;;
  1559                           
  1560                           
  1561                           ;psect for function _utoa
  1562  0000'                    _utoa:	
  1563                           
  1564                           ;incstack = 0
  1565                           ; Regs used in _utoa: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1566                           ;utoa@buf stored from wreg
  1567  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1568  0001' 0090'              	movwf	utoa@buf
  1569  0002' 0809'              	movf	utoa@val+1,w
  1570  0003' 008E'              	movwf	utoa@v+1
  1571  0004' 0808'              	movf	utoa@val,w
  1572  0005' 008D'              	movwf	utoa@v
  1573  0006'                    l1057:	
  1574  0006' 080B'              	movf	utoa@base+1,w
  1575  0007' 0081'              	movwf	___lwdiv@divisor+1
  1576  0008' 080A'              	movf	utoa@base,w
  1577  0009' 0080'              	movwf	___lwdiv@divisor
  1578  000A' 080E'              	movf	utoa@v+1,w
  1579  000B' 0083'              	movwf	___lwdiv@dividend+1
  1580  000C' 080D'              	movf	utoa@v,w
  1581  000D' 0082'              	movwf	___lwdiv@dividend
  1582  000E' 2000'              	fcall	___lwdiv
  1583  000F' 1283               	bcf	3,5	;RP0=0, select bank0
  1584  0010' 0801'              	movf	?___lwdiv+1,w
  1585  0011' 008E'              	movwf	utoa@v+1
  1586  0012' 0800'              	movf	?___lwdiv,w
  1587  0013' 008D'              	movwf	utoa@v
  1588  0014' 3001               	movlw	1
  1589  0015' 008C'              	movwf	??_utoa
  1590  0016' 080C'              	movf	??_utoa,w
  1591  0017' 0790'              	addwf	utoa@buf,f
  1592  0018' 080D'              	movf	utoa@v,w
  1593  0019' 040E'              	iorwf	utoa@v+1,w
  1594  001A' 1D03               	btfss	3,2
  1595  001B' 2806'              	goto	l1057
  1596  001C' 0810'              	movf	utoa@buf,w
  1597  001D' 0084               	movwf	4
  1598  001E' 1383               	bcf	3,7	;select IRP bank0
  1599  001F' 0180               	clrf	0
  1600  0020' 3001               	movlw	1
  1601  0021' 0290'              	subwf	utoa@buf,f
  1602  0022'                    l1067:	
  1603  0022' 080B'              	movf	utoa@base+1,w
  1604  0023' 0081'              	movwf	___lwmod@divisor+1
  1605  0024' 080A'              	movf	utoa@base,w
  1606  0025' 0080'              	movwf	___lwmod@divisor
  1607  0026' 0809'              	movf	utoa@val+1,w
  1608  0027' 0083'              	movwf	___lwmod@dividend+1
  1609  0028' 0808'              	movf	utoa@val,w
  1610  0029' 0082'              	movwf	___lwmod@dividend
  1611  002A' 2000'              	fcall	___lwmod
  1612  002B' 1283               	bcf	3,5	;RP0=0, select bank0
  1613  002C' 0800'              	movf	?___lwmod,w
  1614  002D' 008C'              	movwf	??_utoa
  1615  002E' 080C'              	movf	??_utoa,w
  1616  002F' 008F'              	movwf	utoa@c
  1617  0030' 080B'              	movf	utoa@base+1,w
  1618  0031' 0081'              	movwf	___lwdiv@divisor+1
  1619  0032' 080A'              	movf	utoa@base,w
  1620  0033' 0080'              	movwf	___lwdiv@divisor
  1621  0034' 0809'              	movf	utoa@val+1,w
  1622  0035' 0083'              	movwf	___lwdiv@dividend+1
  1623  0036' 0808'              	movf	utoa@val,w
  1624  0037' 0082'              	movwf	___lwdiv@dividend
  1625  0038' 2000'              	fcall	___lwdiv
  1626  0039' 1283               	bcf	3,5	;RP0=0, select bank0
  1627  003A' 0801'              	movf	?___lwdiv+1,w
  1628  003B' 0089'              	movwf	utoa@val+1
  1629  003C' 0800'              	movf	?___lwdiv,w
  1630  003D' 0088'              	movwf	utoa@val
  1631  003E' 300A               	movlw	10
  1632  003F' 020F'              	subwf	utoa@c,w
  1633  0040' 1C03               	skipc
  1634  0041' 2846'              	goto	l458
  1635  0042' 3007               	movlw	7
  1636  0043' 008C'              	movwf	??_utoa
  1637  0044' 080C'              	movf	??_utoa,w
  1638  0045' 078F'              	addwf	utoa@c,f
  1639  0046'                    l458:	
  1640  0046' 3030               	movlw	48
  1641  0047' 008C'              	movwf	??_utoa
  1642  0048' 080C'              	movf	??_utoa,w
  1643  0049' 078F'              	addwf	utoa@c,f
  1644  004A' 080F'              	movf	utoa@c,w
  1645  004B' 008C'              	movwf	??_utoa
  1646  004C' 0810'              	movf	utoa@buf,w
  1647  004D' 0084               	movwf	4
  1648  004E' 080C'              	movf	??_utoa,w
  1649  004F' 1383               	bcf	3,7	;select IRP bank0
  1650  0050' 0080               	movwf	0
  1651  0051' 3001               	movlw	1
  1652  0052' 0290'              	subwf	utoa@buf,f
  1653  0053' 0808'              	movf	utoa@val,w
  1654  0054' 0409'              	iorwf	utoa@val+1,w
  1655  0055' 1D03               	btfss	3,2
  1656  0056' 2822'              	goto	l1067
  1657                           
  1658                           ;	Return value of _utoa is never used
  1659  0057' 3001               	movlw	1
  1660  0058' 008C'              	movwf	??_utoa
  1661  0059' 080C'              	movf	??_utoa,w
  1662  005A' 0790'              	addwf	utoa@buf,f
  1663  005B' 0008               	return
  1664  005C'                    __end_of_utoa:	
  1665                           
  1666                           	psect	text8
  1667  0000'                    __ptext8:	
  1668 ;; *************** function ___lwmod *****************
  1669 ;; Defined at:
  1670 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  1671 ;; Parameters:    Size  Location     Type
  1672 ;;  divisor         2    0[BANK0 ] unsigned int 
  1673 ;;  dividend        2    2[BANK0 ] unsigned int 
  1674 ;; Auto vars:     Size  Location     Type
  1675 ;;  counter         1    5[BANK0 ] unsigned char 
  1676 ;; Return value:  Size  Location     Type
  1677 ;;                  2    0[BANK0 ] unsigned int 
  1678 ;; Registers used:
  1679 ;;		wreg, status,2, status,0
  1680 ;; Tracked objects:
  1681 ;;		On entry : 0/0
  1682 ;;		On exit  : 0/0
  1683 ;;		Unchanged: 0/0
  1684 ;; Data sizes:     COMMON   BANK0
  1685 ;;      Params:         0       4
  1686 ;;      Locals:         0       1
  1687 ;;      Temps:          0       1
  1688 ;;      Totals:         0       6
  1689 ;;Total ram usage:        6 bytes
  1690 ;; Hardware stack levels used:    1
  1691 ;; This function calls:
  1692 ;;		Nothing
  1693 ;; This function is called by:
  1694 ;;		_utoa
  1695 ;; This function uses a non-reentrant model
  1696 ;;
  1697                           
  1698                           
  1699                           ;psect for function ___lwmod
  1700  0000'                    ___lwmod:	
  1701                           
  1702                           ;incstack = 0
  1703                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1704  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1705  0001' 0800'              	movf	___lwmod@divisor,w
  1706  0002' 0401'              	iorwf	___lwmod@divisor+1,w
  1707  0003' 1903               	btfsc	3,2
  1708  0004' 282E'              	goto	l1033
  1709  0005' 0185'              	clrf	___lwmod@counter
  1710  0006' 0A85'              	incf	___lwmod@counter,f
  1711  0007'                    l1023:	
  1712  0007' 1B81'              	btfsc	___lwmod@divisor+1,7
  1713  0008' 2815'              	goto	l1025
  1714  0009' 3001               	movlw	1
  1715  000A'                    u835:	
  1716  000A' 1003               	clrc
  1717  000B' 0D80'              	rlf	___lwmod@divisor,f
  1718  000C' 0D81'              	rlf	___lwmod@divisor+1,f
  1719  000D' 3EFF               	addlw	-1
  1720  000E' 1D03               	skipz
  1721  000F' 280A'              	goto	u835
  1722  0010' 3001               	movlw	1
  1723  0011' 0084'              	movwf	??___lwmod
  1724  0012' 0804'              	movf	??___lwmod,w
  1725  0013' 0785'              	addwf	___lwmod@counter,f
  1726  0014' 2807'              	goto	l1023
  1727  0015'                    l1025:	
  1728  0015' 0801'              	movf	___lwmod@divisor+1,w
  1729  0016' 0203'              	subwf	___lwmod@dividend+1,w
  1730  0017' 1D03               	skipz
  1731  0018' 281B'              	goto	u855
  1732  0019' 0800'              	movf	___lwmod@divisor,w
  1733  001A' 0202'              	subwf	___lwmod@dividend,w
  1734  001B'                    u855:	
  1735  001B' 1C03               	skipc
  1736  001C' 2823'              	goto	l1029
  1737  001D' 0800'              	movf	___lwmod@divisor,w
  1738  001E' 0282'              	subwf	___lwmod@dividend,f
  1739  001F' 0801'              	movf	___lwmod@divisor+1,w
  1740  0020' 1C03               	skipc
  1741  0021' 0383'              	decf	___lwmod@dividend+1,f
  1742  0022' 0283'              	subwf	___lwmod@dividend+1,f
  1743  0023'                    l1029:	
  1744  0023' 3001               	movlw	1
  1745  0024'                    u865:	
  1746  0024' 1003               	clrc
  1747  0025' 0C81'              	rrf	___lwmod@divisor+1,f
  1748  0026' 0C80'              	rrf	___lwmod@divisor,f
  1749  0027' 3EFF               	addlw	-1
  1750  0028' 1D03               	skipz
  1751  0029' 2824'              	goto	u865
  1752  002A' 3001               	movlw	1
  1753  002B' 0285'              	subwf	___lwmod@counter,f
  1754  002C' 1D03               	btfss	3,2
  1755  002D' 2815'              	goto	l1025
  1756  002E'                    l1033:	
  1757  002E' 0803'              	movf	___lwmod@dividend+1,w
  1758  002F' 0081'              	movwf	?___lwmod+1
  1759  0030' 0802'              	movf	___lwmod@dividend,w
  1760  0031' 0080'              	movwf	?___lwmod
  1761  0032' 0008               	return
  1762  0033'                    __end_of___lwmod:	
  1763                           
  1764                           	psect	text9
  1765  0000'                    __ptext9:	
  1766 ;; *************** function ___lwdiv *****************
  1767 ;; Defined at:
  1768 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  1769 ;; Parameters:    Size  Location     Type
  1770 ;;  divisor         2    0[BANK0 ] unsigned int 
  1771 ;;  dividend        2    2[BANK0 ] unsigned int 
  1772 ;; Auto vars:     Size  Location     Type
  1773 ;;  quotient        2    5[BANK0 ] unsigned int 
  1774 ;;  counter         1    7[BANK0 ] unsigned char 
  1775 ;; Return value:  Size  Location     Type
  1776 ;;                  2    0[BANK0 ] unsigned int 
  1777 ;; Registers used:
  1778 ;;		wreg, status,2, status,0
  1779 ;; Tracked objects:
  1780 ;;		On entry : 0/0
  1781 ;;		On exit  : 0/0
  1782 ;;		Unchanged: 0/0
  1783 ;; Data sizes:     COMMON   BANK0
  1784 ;;      Params:         0       4
  1785 ;;      Locals:         0       3
  1786 ;;      Temps:          0       1
  1787 ;;      Totals:         0       8
  1788 ;;Total ram usage:        8 bytes
  1789 ;; Hardware stack levels used:    1
  1790 ;; This function calls:
  1791 ;;		Nothing
  1792 ;; This function is called by:
  1793 ;;		_utoa
  1794 ;; This function uses a non-reentrant model
  1795 ;;
  1796                           
  1797                           
  1798                           ;psect for function ___lwdiv
  1799  0000'                    ___lwdiv:	
  1800                           
  1801                           ;incstack = 0
  1802                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1803  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1804  0001' 0185'              	clrf	___lwdiv@quotient
  1805  0002' 0186'              	clrf	___lwdiv@quotient+1
  1806  0003' 0800'              	movf	___lwdiv@divisor,w
  1807  0004' 0401'              	iorwf	___lwdiv@divisor+1,w
  1808  0005' 1903               	btfsc	3,2
  1809  0006' 2838'              	goto	l1011
  1810  0007' 0187'              	clrf	___lwdiv@counter
  1811  0008' 0A87'              	incf	___lwdiv@counter,f
  1812  0009'                    l999:	
  1813  0009' 1B81'              	btfsc	___lwdiv@divisor+1,7
  1814  000A' 2817'              	goto	l1001
  1815  000B' 3001               	movlw	1
  1816  000C'                    u765:	
  1817  000C' 1003               	clrc
  1818  000D' 0D80'              	rlf	___lwdiv@divisor,f
  1819  000E' 0D81'              	rlf	___lwdiv@divisor+1,f
  1820  000F' 3EFF               	addlw	-1
  1821  0010' 1D03               	skipz
  1822  0011' 280C'              	goto	u765
  1823  0012' 3001               	movlw	1
  1824  0013' 0084'              	movwf	??___lwdiv
  1825  0014' 0804'              	movf	??___lwdiv,w
  1826  0015' 0787'              	addwf	___lwdiv@counter,f
  1827  0016' 2809'              	goto	l999
  1828  0017'                    l1001:	
  1829  0017' 3001               	movlw	1
  1830  0018'                    u785:	
  1831  0018' 1003               	clrc
  1832  0019' 0D85'              	rlf	___lwdiv@quotient,f
  1833  001A' 0D86'              	rlf	___lwdiv@quotient+1,f
  1834  001B' 3EFF               	addlw	-1
  1835  001C' 1D03               	skipz
  1836  001D' 2818'              	goto	u785
  1837  001E' 0801'              	movf	___lwdiv@divisor+1,w
  1838  001F' 0203'              	subwf	___lwdiv@dividend+1,w
  1839  0020' 1D03               	skipz
  1840  0021' 2824'              	goto	u795
  1841  0022' 0800'              	movf	___lwdiv@divisor,w
  1842  0023' 0202'              	subwf	___lwdiv@dividend,w
  1843  0024'                    u795:	
  1844  0024' 1C03               	skipc
  1845  0025' 282D'              	goto	l1007
  1846  0026' 0800'              	movf	___lwdiv@divisor,w
  1847  0027' 0282'              	subwf	___lwdiv@dividend,f
  1848  0028' 0801'              	movf	___lwdiv@divisor+1,w
  1849  0029' 1C03               	skipc
  1850  002A' 0383'              	decf	___lwdiv@dividend+1,f
  1851  002B' 0283'              	subwf	___lwdiv@dividend+1,f
  1852  002C' 1405'              	bsf	___lwdiv@quotient,0
  1853  002D'                    l1007:	
  1854  002D' 3001               	movlw	1
  1855  002E'                    u805:	
  1856  002E' 1003               	clrc
  1857  002F' 0C81'              	rrf	___lwdiv@divisor+1,f
  1858  0030' 0C80'              	rrf	___lwdiv@divisor,f
  1859  0031' 3EFF               	addlw	-1
  1860  0032' 1D03               	skipz
  1861  0033' 282E'              	goto	u805
  1862  0034' 3001               	movlw	1
  1863  0035' 0287'              	subwf	___lwdiv@counter,f
  1864  0036' 1D03               	btfss	3,2
  1865  0037' 2817'              	goto	l1001
  1866  0038'                    l1011:	
  1867  0038' 0806'              	movf	___lwdiv@quotient+1,w
  1868  0039' 0081'              	movwf	?___lwdiv+1
  1869  003A' 0805'              	movf	___lwdiv@quotient,w
  1870  003B' 0080'              	movwf	?___lwdiv
  1871  003C' 0008               	return
  1872  003D'                    __end_of___lwdiv:	
  1873                           
  1874                           	psect	text10
  1875  0000'                    __ptext10:	
  1876 ;; *************** function _Lcd_Write_String *****************
  1877 ;; Defined at:
  1878 ;;		line 110 in file "lcd.c"
  1879 ;; Parameters:    Size  Location     Type
  1880 ;;  a               2    5[BANK0 ] PTR unsigned char 
  1881 ;;		 -> Lcd_Write_Int@temp(16), STR_1(9), 
  1882 ;; Auto vars:     Size  Location     Type
  1883 ;;  i               2   10[BANK0 ] int 
  1884 ;; Return value:  Size  Location     Type
  1885 ;;		None               void
  1886 ;; Registers used:
  1887 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1888 ;; Tracked objects:
  1889 ;;		On entry : 0/0
  1890 ;;		On exit  : 0/0
  1891 ;;		Unchanged: 0/0
  1892 ;; Data sizes:     COMMON   BANK0
  1893 ;;      Params:         0       2
  1894 ;;      Locals:         0       2
  1895 ;;      Temps:          0       3
  1896 ;;      Totals:         0       7
  1897 ;;Total ram usage:        7 bytes
  1898 ;; Hardware stack levels used:    1
  1899 ;; Hardware stack levels required when called:    2
  1900 ;; This function calls:
  1901 ;;		_Lcd_Write_Char
  1902 ;; This function is called by:
  1903 ;;		_main
  1904 ;;		_Lcd_Write_Int
  1905 ;; This function uses a non-reentrant model
  1906 ;;
  1907                           
  1908                           
  1909                           ;psect for function _Lcd_Write_String
  1910  0000'                    _Lcd_Write_String:	
  1911                           
  1912                           ;lcd.c: 112: int i;
  1913                           ;lcd.c: 113: for(i=0;a[i]!='\0';i++)
  1914                           
  1915                           ;incstack = 0
  1916                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1917  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1918  0001' 018A'              	clrf	Lcd_Write_String@i
  1919  0002' 018B'              	clrf	Lcd_Write_String@i+1
  1920  0003'                    l1043:	
  1921  0003' 080A'              	movf	Lcd_Write_String@i,w
  1922  0004' 0705'              	addwf	Lcd_Write_String@a,w
  1923  0005' 0088'              	movwf	??_Lcd_Write_String+1
  1924  0006' 0806'              	movf	Lcd_Write_String@a+1,w
  1925  0007' 0087'              	movwf	??_Lcd_Write_String
  1926  0008' 1803               	skipnc
  1927  0009' 0A87'              	incf	??_Lcd_Write_String,f
  1928  000A' 1B8A'              	btfsc	Lcd_Write_String@i,7
  1929  000B' 0387'              	decf	??_Lcd_Write_String,f
  1930  000C' 1283               	bcf	3,5	;RP0=0, select bank0
  1931  000D' 0807'              	movf	??_Lcd_Write_String,w
  1932  000E' 0089'              	movwf	??_Lcd_Write_String+2
  1933  000F' 0809'              	movf	??_Lcd_Write_String+2,w
  1934  0010' 00CF               	movwf	79
  1935  0011' 0808'              	movf	??_Lcd_Write_String+1,w
  1936  0012' 0084               	movwf	4
  1937  0013' 2000'              	fcall	stringtab
  1938  0014' 3A00               	xorlw	0
  1939  0015' 1903               	btfsc	3,2
  1940  0016' 0008               	return
  1941                           
  1942                           ;lcd.c: 114: {
  1943                           ;lcd.c: 115: Lcd_Write_Char(a[i]);
  1944  0017' 080A'              	movf	Lcd_Write_String@i,w
  1945  0018' 0705'              	addwf	Lcd_Write_String@a,w
  1946  0019' 0088'              	movwf	??_Lcd_Write_String+1
  1947  001A' 0806'              	movf	Lcd_Write_String@a+1,w
  1948  001B' 0087'              	movwf	??_Lcd_Write_String
  1949  001C' 1803               	skipnc
  1950  001D' 0A87'              	incf	??_Lcd_Write_String,f
  1951  001E' 1B8A'              	btfsc	Lcd_Write_String@i,7
  1952  001F' 0387'              	decf	??_Lcd_Write_String,f
  1953  0020' 1283               	bcf	3,5	;RP0=0, select bank0
  1954  0021' 0807'              	movf	??_Lcd_Write_String,w
  1955  0022' 0089'              	movwf	??_Lcd_Write_String+2
  1956  0023' 0809'              	movf	??_Lcd_Write_String+2,w
  1957  0024' 00CF               	movwf	79
  1958  0025' 0808'              	movf	??_Lcd_Write_String+1,w
  1959  0026' 0084               	movwf	4
  1960  0027' 2000'              	fcall	stringtab
  1961  0028' 2000'              	fcall	_Lcd_Write_Char
  1962  0029' 3001               	movlw	1
  1963  002A' 1283               	bcf	3,5	;RP0=0, select bank0
  1964  002B' 078A'              	addwf	Lcd_Write_String@i,f
  1965  002C' 1803               	skipnc
  1966  002D' 0A8B'              	incf	Lcd_Write_String@i+1,f
  1967  002E' 3000               	movlw	0
  1968  002F' 078B'              	addwf	Lcd_Write_String@i+1,f
  1969  0030' 2803'              	goto	l1043
  1970  0031'                    __end_of_Lcd_Write_String:	
  1971                           
  1972                           	psect	text11
  1973  0000'                    __ptext11:	
  1974 ;; *************** function _Lcd_Write_Char *****************
  1975 ;; Defined at:
  1976 ;;		line 93 in file "lcd.c"
  1977 ;; Parameters:    Size  Location     Type
  1978 ;;  a               1    wreg     unsigned char 
  1979 ;; Auto vars:     Size  Location     Type
  1980 ;;  a               1    4[BANK0 ] unsigned char 
  1981 ;;  y               1    3[BANK0 ] unsigned char 
  1982 ;;  temp            1    2[BANK0 ] unsigned char 
  1983 ;; Return value:  Size  Location     Type
  1984 ;;		None               void
  1985 ;; Registers used:
  1986 ;;		wreg, status,2, status,0, pclath, cstack
  1987 ;; Tracked objects:
  1988 ;;		On entry : 0/0
  1989 ;;		On exit  : 0/0
  1990 ;;		Unchanged: 0/0
  1991 ;; Data sizes:     COMMON   BANK0
  1992 ;;      Params:         0       0
  1993 ;;      Locals:         0       3
  1994 ;;      Temps:          0       1
  1995 ;;      Totals:         0       4
  1996 ;;Total ram usage:        4 bytes
  1997 ;; Hardware stack levels used:    1
  1998 ;; Hardware stack levels required when called:    1
  1999 ;; This function calls:
  2000 ;;		_Lcd_Port
  2001 ;; This function is called by:
  2002 ;;		_Lcd_Write_String
  2003 ;; This function uses a non-reentrant model
  2004 ;;
  2005                           
  2006                           
  2007                           ;psect for function _Lcd_Write_Char
  2008  0000'                    _Lcd_Write_Char:	
  2009                           
  2010                           ;incstack = 0
  2011                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  2012                           ;Lcd_Write_Char@a stored from wreg
  2013  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  2014  0001' 0084'              	movwf	Lcd_Write_Char@a
  2015                           
  2016                           ;lcd.c: 95: char temp,y;
  2017                           ;lcd.c: 96: temp = a&0x0F;
  2018  0002' 0804'              	movf	Lcd_Write_Char@a,w
  2019  0003' 390F               	andlw	15
  2020  0004' 0081'              	movwf	??_Lcd_Write_Char
  2021  0005' 0801'              	movf	??_Lcd_Write_Char,w
  2022  0006' 0082'              	movwf	Lcd_Write_Char@temp
  2023                           
  2024                           ;lcd.c: 97: y = a&0xF0;
  2025  0007' 0804'              	movf	Lcd_Write_Char@a,w
  2026  0008' 39F0               	andlw	240
  2027  0009' 0081'              	movwf	??_Lcd_Write_Char
  2028  000A' 0801'              	movf	??_Lcd_Write_Char,w
  2029  000B' 0083'              	movwf	Lcd_Write_Char@y
  2030                           
  2031                           ;lcd.c: 98: RB4 = 1;
  2032  000C' 1606               	bsf	6,4	;volatile
  2033                           
  2034                           ;lcd.c: 99: Lcd_Port(y>>4);
  2035  000D' 0803'              	movf	Lcd_Write_Char@y,w
  2036  000E' 0081'              	movwf	??_Lcd_Write_Char
  2037  000F' 3004               	movlw	4
  2038  0010'                    u745:	
  2039  0010' 1003               	clrc
  2040  0011' 0C81'              	rrf	??_Lcd_Write_Char,f
  2041  0012' 3EFF               	addlw	-1
  2042  0013' 1D03               	skipz
  2043  0014' 2810'              	goto	u745
  2044  0015' 0801'              	movf	??_Lcd_Write_Char,w
  2045  0016' 2000'              	fcall	_Lcd_Port
  2046                           
  2047                           ;lcd.c: 100: RB6 = 1;
  2048  0017' 1283               	bcf	3,5	;RP0=0, select bank0
  2049  0018' 1706               	bsf	6,6	;volatile
  2050                           
  2051                           ;lcd.c: 101: _delay((unsigned long)((40)*(4000000/4000000.0)));
  2052  0019' 300D               	movlw	13
  2053  001A' 0081'              	movwf	??_Lcd_Write_Char
  2054  001B'                    u1447:	
  2055  001B' 0B81'              	decfsz	??_Lcd_Write_Char,f
  2056  001C' 281B'              	goto	u1447
  2057                           
  2058                           ;lcd.c: 102: RB6 = 0;
  2059  001D' 1283               	bcf	3,5	;RP0=0, select bank0
  2060  001E' 1306               	bcf	6,6	;volatile
  2061                           
  2062                           ;lcd.c: 103: Lcd_Port(temp);
  2063  001F' 0802'              	movf	Lcd_Write_Char@temp,w
  2064  0020' 2000'              	fcall	_Lcd_Port
  2065                           
  2066                           ;lcd.c: 104: RB6 = 1;
  2067  0021' 1283               	bcf	3,5	;RP0=0, select bank0
  2068  0022' 1706               	bsf	6,6	;volatile
  2069                           
  2070                           ;lcd.c: 105: _delay((unsigned long)((40)*(4000000/4000000.0)));
  2071  0023' 300D               	movlw	13
  2072  0024' 0081'              	movwf	??_Lcd_Write_Char
  2073  0025'                    u1457:	
  2074  0025' 0B81'              	decfsz	??_Lcd_Write_Char,f
  2075  0026' 2825'              	goto	u1457
  2076                           
  2077                           ;lcd.c: 106: RB6 = 0;
  2078  0027' 1283               	bcf	3,5	;RP0=0, select bank0
  2079  0028' 1306               	bcf	6,6	;volatile
  2080  0029' 0008               	return
  2081  002A'                    __end_of_Lcd_Write_Char:	
  2082                           
  2083                           	psect	text12
  2084  0000'                    __ptext12:	
  2085 ;; *************** function _Lcd_Set_Cursor *****************
  2086 ;; Defined at:
  2087 ;;		line 51 in file "lcd.c"
  2088 ;; Parameters:    Size  Location     Type
  2089 ;;  a               1    wreg     unsigned char 
  2090 ;;  b               1    4[BANK0 ] unsigned char 
  2091 ;; Auto vars:     Size  Location     Type
  2092 ;;  a               1    7[BANK0 ] unsigned char 
  2093 ;;  temp            1   10[BANK0 ] unsigned char 
  2094 ;;  y               1    9[BANK0 ] unsigned char 
  2095 ;;  z               1    8[BANK0 ] unsigned char 
  2096 ;; Return value:  Size  Location     Type
  2097 ;;		None               void
  2098 ;; Registers used:
  2099 ;;		wreg, status,2, status,0, pclath, cstack
  2100 ;; Tracked objects:
  2101 ;;		On entry : 0/0
  2102 ;;		On exit  : 0/0
  2103 ;;		Unchanged: 0/0
  2104 ;; Data sizes:     COMMON   BANK0
  2105 ;;      Params:         0       1
  2106 ;;      Locals:         0       4
  2107 ;;      Temps:          0       2
  2108 ;;      Totals:         0       7
  2109 ;;Total ram usage:        7 bytes
  2110 ;; Hardware stack levels used:    1
  2111 ;; Hardware stack levels required when called:    2
  2112 ;; This function calls:
  2113 ;;		_Lcd_Cmd
  2114 ;; This function is called by:
  2115 ;;		_main
  2116 ;; This function uses a non-reentrant model
  2117 ;;
  2118                           
  2119                           
  2120                           ;psect for function _Lcd_Set_Cursor
  2121  0000'                    _Lcd_Set_Cursor:	
  2122                           
  2123                           ;incstack = 0
  2124                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  2125                           ;Lcd_Set_Cursor@a stored from wreg
  2126  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  2127  0001' 0087'              	movwf	Lcd_Set_Cursor@a
  2128                           
  2129                           ;lcd.c: 53: char temp,z,y;
  2130                           ;lcd.c: 54: if(a == 1)
  2131  0002' 0307'              	decf	Lcd_Set_Cursor@a,w
  2132  0003' 1D03               	btfss	3,2
  2133  0004' 2821'              	goto	l1141
  2134                           
  2135                           ;lcd.c: 55: {
  2136                           ;lcd.c: 56: temp = (char) (0x80 + b - 1);
  2137  0005' 0804'              	movf	Lcd_Set_Cursor@b,w
  2138  0006' 3E7F               	addlw	127
  2139  0007' 0085'              	movwf	??_Lcd_Set_Cursor
  2140  0008' 0805'              	movf	??_Lcd_Set_Cursor,w
  2141  0009' 008A'              	movwf	Lcd_Set_Cursor@temp
  2142                           
  2143                           ;lcd.c: 57: z = temp>>4;
  2144  000A' 080A'              	movf	Lcd_Set_Cursor@temp,w
  2145  000B' 0085'              	movwf	??_Lcd_Set_Cursor
  2146  000C' 3004               	movlw	4
  2147  000D'                    u1075:	
  2148  000D' 1003               	clrc
  2149  000E' 0C85'              	rrf	??_Lcd_Set_Cursor,f
  2150  000F' 3EFF               	addlw	-1
  2151  0010' 1D03               	skipz
  2152  0011' 280D'              	goto	u1075
  2153  0012' 0805'              	movf	??_Lcd_Set_Cursor,w
  2154  0013' 0086'              	movwf	??_Lcd_Set_Cursor+1
  2155  0014' 0806'              	movf	??_Lcd_Set_Cursor+1,w
  2156  0015' 0088'              	movwf	Lcd_Set_Cursor@z
  2157                           
  2158                           ;lcd.c: 58: y = temp & 0x0F;
  2159  0016' 080A'              	movf	Lcd_Set_Cursor@temp,w
  2160  0017' 390F               	andlw	15
  2161  0018' 0085'              	movwf	??_Lcd_Set_Cursor
  2162  0019' 0805'              	movf	??_Lcd_Set_Cursor,w
  2163  001A' 0089'              	movwf	Lcd_Set_Cursor@y
  2164                           
  2165                           ;lcd.c: 59: Lcd_Cmd(z);
  2166  001B' 0808'              	movf	Lcd_Set_Cursor@z,w
  2167  001C' 2000'              	fcall	_Lcd_Cmd
  2168                           
  2169                           ;lcd.c: 60: Lcd_Cmd(y);
  2170  001D' 1283               	bcf	3,5	;RP0=0, select bank0
  2171  001E' 0809'              	movf	Lcd_Set_Cursor@y,w
  2172  001F' 2000'              	fcall	_Lcd_Cmd
  2173                           
  2174                           ;lcd.c: 61: }
  2175  0020' 0008               	return
  2176  0021'                    l1141:	
  2177                           
  2178                           ;lcd.c: 62: else if(a == 2)
  2179  0021' 3002               	movlw	2
  2180  0022' 1283               	bcf	3,5	;RP0=0, select bank0
  2181  0023' 0607'              	xorwf	Lcd_Set_Cursor@a,w
  2182  0024' 1D03               	btfss	3,2
  2183  0025' 0008               	return
  2184                           
  2185                           ;lcd.c: 63: {
  2186                           ;lcd.c: 64: temp = 0xC0 + b - 1;
  2187  0026' 0804'              	movf	Lcd_Set_Cursor@b,w
  2188  0027' 3EBF               	addlw	191
  2189  0028' 0085'              	movwf	??_Lcd_Set_Cursor
  2190  0029' 0805'              	movf	??_Lcd_Set_Cursor,w
  2191  002A' 008A'              	movwf	Lcd_Set_Cursor@temp
  2192                           
  2193                           ;lcd.c: 65: z = temp>>4;
  2194  002B' 080A'              	movf	Lcd_Set_Cursor@temp,w
  2195  002C' 0085'              	movwf	??_Lcd_Set_Cursor
  2196  002D' 3004               	movlw	4
  2197  002E'                    u1095:	
  2198  002E' 1003               	clrc
  2199  002F' 0C85'              	rrf	??_Lcd_Set_Cursor,f
  2200  0030' 3EFF               	addlw	-1
  2201  0031' 1D03               	skipz
  2202  0032' 282E'              	goto	u1095
  2203  0033' 0805'              	movf	??_Lcd_Set_Cursor,w
  2204  0034' 0086'              	movwf	??_Lcd_Set_Cursor+1
  2205  0035' 0806'              	movf	??_Lcd_Set_Cursor+1,w
  2206  0036' 0088'              	movwf	Lcd_Set_Cursor@z
  2207                           
  2208                           ;lcd.c: 66: y = temp & 0x0F;
  2209  0037' 080A'              	movf	Lcd_Set_Cursor@temp,w
  2210  0038' 390F               	andlw	15
  2211  0039' 0085'              	movwf	??_Lcd_Set_Cursor
  2212  003A' 0805'              	movf	??_Lcd_Set_Cursor,w
  2213  003B' 0089'              	movwf	Lcd_Set_Cursor@y
  2214                           
  2215                           ;lcd.c: 67: Lcd_Cmd(z);
  2216  003C' 0808'              	movf	Lcd_Set_Cursor@z,w
  2217  003D' 2000'              	fcall	_Lcd_Cmd
  2218                           
  2219                           ;lcd.c: 68: Lcd_Cmd(y);
  2220  003E' 1283               	bcf	3,5	;RP0=0, select bank0
  2221  003F' 0809'              	movf	Lcd_Set_Cursor@y,w
  2222  0040' 2000'              	fcall	_Lcd_Cmd
  2223  0041' 0008               	return
  2224  0042'                    __end_of_Lcd_Set_Cursor:	
  2225                           
  2226                           	psect	text13
  2227  0000'                    __ptext13:	
  2228 ;; *************** function _Lcd_Init *****************
  2229 ;; Defined at:
  2230 ;;		line 73 in file "lcd.c"
  2231 ;; Parameters:    Size  Location     Type
  2232 ;;		None
  2233 ;; Auto vars:     Size  Location     Type
  2234 ;;		None
  2235 ;; Return value:  Size  Location     Type
  2236 ;;		None               void
  2237 ;; Registers used:
  2238 ;;		wreg, status,2, status,0, pclath, cstack
  2239 ;; Tracked objects:
  2240 ;;		On entry : 0/0
  2241 ;;		On exit  : 0/0
  2242 ;;		Unchanged: 0/0
  2243 ;; Data sizes:     COMMON   BANK0
  2244 ;;      Params:         0       0
  2245 ;;      Locals:         0       0
  2246 ;;      Temps:          0       2
  2247 ;;      Totals:         0       2
  2248 ;;Total ram usage:        2 bytes
  2249 ;; Hardware stack levels used:    1
  2250 ;; Hardware stack levels required when called:    2
  2251 ;; This function calls:
  2252 ;;		_Lcd_Cmd
  2253 ;;		_Lcd_Port
  2254 ;; This function is called by:
  2255 ;;		_main
  2256 ;; This function uses a non-reentrant model
  2257 ;;
  2258                           
  2259                           
  2260                           ;psect for function _Lcd_Init
  2261  0000'                    _Lcd_Init:	
  2262                           
  2263                           ;lcd.c: 75: Lcd_Port(0x00);
  2264                           
  2265                           ;incstack = 0
  2266                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2267  0000' 3000               	movlw	0
  2268  0001' 2000'              	fcall	_Lcd_Port
  2269                           
  2270                           ;lcd.c: 76: _delay((unsigned long)((20)*(4000000/4000.0)));
  2271  0002' 301A               	movlw	26
  2272  0003' 1283               	bcf	3,5	;RP0=0, select bank0
  2273  0004' 0085'              	movwf	??_Lcd_Init+1
  2274  0005' 30F8               	movlw	248
  2275  0006' 0084'              	movwf	??_Lcd_Init
  2276  0007'                    u1467:	
  2277  0007' 0B84'              	decfsz	??_Lcd_Init,f
  2278  0008' 2807'              	goto	u1467
  2279  0009' 0B85'              	decfsz	??_Lcd_Init+1,f
  2280  000A' 2807'              	goto	u1467
  2281  000B' 0000               	nop
  2282                           
  2283                           ;lcd.c: 77: Lcd_Cmd(0x03);
  2284  000C' 3003               	movlw	3
  2285  000D' 2000'              	fcall	_Lcd_Cmd
  2286                           
  2287                           ;lcd.c: 78: _delay((unsigned long)((5)*(4000000/4000.0)));
  2288  000E' 3007               	movlw	7
  2289  000F' 1283               	bcf	3,5	;RP0=0, select bank0
  2290  0010' 0085'              	movwf	??_Lcd_Init+1
  2291  0011' 307D               	movlw	125
  2292  0012' 0084'              	movwf	??_Lcd_Init
  2293  0013'                    u1477:	
  2294  0013' 0B84'              	decfsz	??_Lcd_Init,f
  2295  0014' 2813'              	goto	u1477
  2296  0015' 0B85'              	decfsz	??_Lcd_Init+1,f
  2297  0016' 2813'              	goto	u1477
  2298                           
  2299                           ;lcd.c: 79: Lcd_Cmd(0x03);
  2300  0017' 3003               	movlw	3
  2301  0018' 2000'              	fcall	_Lcd_Cmd
  2302                           
  2303                           ;lcd.c: 80: _delay((unsigned long)((11)*(4000000/4000.0)));
  2304  0019' 300F               	movlw	15
  2305  001A' 1283               	bcf	3,5	;RP0=0, select bank0
  2306  001B' 0085'              	movwf	??_Lcd_Init+1
  2307  001C' 3047               	movlw	71
  2308  001D' 0084'              	movwf	??_Lcd_Init
  2309  001E'                    u1487:	
  2310  001E' 0B84'              	decfsz	??_Lcd_Init,f
  2311  001F' 281E'              	goto	u1487
  2312  0020' 0B85'              	decfsz	??_Lcd_Init+1,f
  2313  0021' 281E'              	goto	u1487
  2314  0022' 2823'              	nop2
  2315                           
  2316                           ;lcd.c: 81: Lcd_Cmd(0x03);
  2317  0023' 3003               	movlw	3
  2318  0024' 2000'              	fcall	_Lcd_Cmd
  2319                           
  2320                           ;lcd.c: 83: Lcd_Cmd(0x02);
  2321  0025' 3002               	movlw	2
  2322  0026' 2000'              	fcall	_Lcd_Cmd
  2323                           
  2324                           ;lcd.c: 84: Lcd_Cmd(0x02);
  2325  0027' 3002               	movlw	2
  2326  0028' 2000'              	fcall	_Lcd_Cmd
  2327                           
  2328                           ;lcd.c: 85: Lcd_Cmd(0x08);
  2329  0029' 3008               	movlw	8
  2330  002A' 2000'              	fcall	_Lcd_Cmd
  2331                           
  2332                           ;lcd.c: 86: Lcd_Cmd(0x00);
  2333  002B' 3000               	movlw	0
  2334  002C' 2000'              	fcall	_Lcd_Cmd
  2335                           
  2336                           ;lcd.c: 87: Lcd_Cmd(0x0C);
  2337  002D' 300C               	movlw	12
  2338  002E' 2000'              	fcall	_Lcd_Cmd
  2339                           
  2340                           ;lcd.c: 88: Lcd_Cmd(0x00);
  2341  002F' 3000               	movlw	0
  2342  0030' 2000'              	fcall	_Lcd_Cmd
  2343                           
  2344                           ;lcd.c: 89: Lcd_Cmd(0x06);
  2345  0031' 3006               	movlw	6
  2346  0032' 2000'              	fcall	_Lcd_Cmd
  2347  0033' 0008               	return
  2348  0034'                    __end_of_Lcd_Init:	
  2349                           
  2350                           	psect	text14
  2351  0000'                    __ptext14:	
  2352 ;; *************** function _Lcd_Clear *****************
  2353 ;; Defined at:
  2354 ;;		line 43 in file "lcd.c"
  2355 ;; Parameters:    Size  Location     Type
  2356 ;;		None
  2357 ;; Auto vars:     Size  Location     Type
  2358 ;;		None
  2359 ;; Return value:  Size  Location     Type
  2360 ;;		None               void
  2361 ;; Registers used:
  2362 ;;		wreg, status,2, status,0, pclath, cstack
  2363 ;; Tracked objects:
  2364 ;;		On entry : 0/0
  2365 ;;		On exit  : 0/0
  2366 ;;		Unchanged: 0/0
  2367 ;; Data sizes:     COMMON   BANK0
  2368 ;;      Params:         0       0
  2369 ;;      Locals:         0       0
  2370 ;;      Temps:          0       2
  2371 ;;      Totals:         0       2
  2372 ;;Total ram usage:        2 bytes
  2373 ;; Hardware stack levels used:    1
  2374 ;; Hardware stack levels required when called:    2
  2375 ;; This function calls:
  2376 ;;		_Lcd_Cmd
  2377 ;; This function is called by:
  2378 ;;		_main
  2379 ;; This function uses a non-reentrant model
  2380 ;;
  2381                           
  2382                           
  2383                           ;psect for function _Lcd_Clear
  2384  0000'                    _Lcd_Clear:	
  2385                           
  2386                           ;lcd.c: 45: Lcd_Cmd(0x00);
  2387                           
  2388                           ;incstack = 0
  2389                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  2390  0000' 3000               	movlw	0
  2391  0001' 2000'              	fcall	_Lcd_Cmd
  2392                           
  2393                           ;lcd.c: 46: Lcd_Cmd(0x01);
  2394  0002' 3001               	movlw	1
  2395  0003' 2000'              	fcall	_Lcd_Cmd
  2396                           
  2397                           ;lcd.c: 47: _delay((unsigned long)((2)*(4000000/4000.0)));
  2398  0004' 3003               	movlw	3
  2399  0005' 1283               	bcf	3,5	;RP0=0, select bank0
  2400  0006' 0085'              	movwf	??_Lcd_Clear+1
  2401  0007' 3097               	movlw	151
  2402  0008' 0084'              	movwf	??_Lcd_Clear
  2403  0009'                    u1497:	
  2404  0009' 0B84'              	decfsz	??_Lcd_Clear,f
  2405  000A' 2809'              	goto	u1497
  2406  000B' 0B85'              	decfsz	??_Lcd_Clear+1,f
  2407  000C' 2809'              	goto	u1497
  2408  000D' 280E'              	nop2
  2409  000E' 0008               	return
  2410  000F'                    __end_of_Lcd_Clear:	
  2411                           
  2412                           	psect	text15
  2413  0000'                    __ptext15:	
  2414 ;; *************** function _Lcd_Cmd *****************
  2415 ;; Defined at:
  2416 ;;		line 30 in file "lcd.c"
  2417 ;; Parameters:    Size  Location     Type
  2418 ;;  a               1    wreg     unsigned char 
  2419 ;; Auto vars:     Size  Location     Type
  2420 ;;  a               1    3[BANK0 ] unsigned char 
  2421 ;; Return value:  Size  Location     Type
  2422 ;;		None               void
  2423 ;; Registers used:
  2424 ;;		wreg, status,2, status,0, pclath, cstack
  2425 ;; Tracked objects:
  2426 ;;		On entry : 0/0
  2427 ;;		On exit  : 0/0
  2428 ;;		Unchanged: 0/0
  2429 ;; Data sizes:     COMMON   BANK0
  2430 ;;      Params:         0       0
  2431 ;;      Locals:         0       1
  2432 ;;      Temps:          0       2
  2433 ;;      Totals:         0       3
  2434 ;;Total ram usage:        3 bytes
  2435 ;; Hardware stack levels used:    1
  2436 ;; Hardware stack levels required when called:    1
  2437 ;; This function calls:
  2438 ;;		_Lcd_Port
  2439 ;; This function is called by:
  2440 ;;		_Lcd_Clear
  2441 ;;		_Lcd_Set_Cursor
  2442 ;;		_Lcd_Init
  2443 ;;		_Lcd_Shift_Right
  2444 ;;		_Lcd_Shift_Left
  2445 ;; This function uses a non-reentrant model
  2446 ;;
  2447                           
  2448                           
  2449                           ;psect for function _Lcd_Cmd
  2450  0000'                    _Lcd_Cmd:	
  2451                           
  2452                           ;incstack = 0
  2453                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2454                           ;Lcd_Cmd@a stored from wreg
  2455  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  2456  0001' 0083'              	movwf	Lcd_Cmd@a
  2457                           
  2458                           ;lcd.c: 33: RB4 = 0;
  2459  0002' 1206               	bcf	6,4	;volatile
  2460                           
  2461                           ;lcd.c: 34: Lcd_Port(a);
  2462  0003' 0803'              	movf	Lcd_Cmd@a,w
  2463  0004' 2000'              	fcall	_Lcd_Port
  2464                           
  2465                           ;lcd.c: 37: RB6 = 1;
  2466  0005' 1283               	bcf	3,5	;RP0=0, select bank0
  2467  0006' 1706               	bsf	6,6	;volatile
  2468                           
  2469                           ;lcd.c: 38: _delay((unsigned long)((4)*(4000000/4000.0)));
  2470  0007' 3006               	movlw	6
  2471  0008' 0082'              	movwf	??_Lcd_Cmd+1
  2472  0009' 3030               	movlw	48
  2473  000A' 0081'              	movwf	??_Lcd_Cmd
  2474  000B'                    u1507:	
  2475  000B' 0B81'              	decfsz	??_Lcd_Cmd,f
  2476  000C' 280B'              	goto	u1507
  2477  000D' 0B82'              	decfsz	??_Lcd_Cmd+1,f
  2478  000E' 280B'              	goto	u1507
  2479  000F' 0000               	nop
  2480                           
  2481                           ;lcd.c: 39: RB6 = 0;
  2482  0010' 1283               	bcf	3,5	;RP0=0, select bank0
  2483  0011' 1306               	bcf	6,6	;volatile
  2484  0012' 0008               	return
  2485  0013'                    __end_of_Lcd_Cmd:	
  2486                           
  2487                           	psect	text16
  2488  0000'                    __ptext16:	
  2489 ;; *************** function _Lcd_Port *****************
  2490 ;; Defined at:
  2491 ;;		line 6 in file "lcd.c"
  2492 ;; Parameters:    Size  Location     Type
  2493 ;;  a               1    wreg     unsigned char 
  2494 ;; Auto vars:     Size  Location     Type
  2495 ;;  a               1    0[BANK0 ] unsigned char 
  2496 ;; Return value:  Size  Location     Type
  2497 ;;		None               void
  2498 ;; Registers used:
  2499 ;;		wreg
  2500 ;; Tracked objects:
  2501 ;;		On entry : 0/0
  2502 ;;		On exit  : 0/0
  2503 ;;		Unchanged: 0/0
  2504 ;; Data sizes:     COMMON   BANK0
  2505 ;;      Params:         0       0
  2506 ;;      Locals:         0       1
  2507 ;;      Temps:          0       0
  2508 ;;      Totals:         0       1
  2509 ;;Total ram usage:        1 bytes
  2510 ;; Hardware stack levels used:    1
  2511 ;; This function calls:
  2512 ;;		Nothing
  2513 ;; This function is called by:
  2514 ;;		_Lcd_Cmd
  2515 ;;		_Lcd_Init
  2516 ;;		_Lcd_Write_Char
  2517 ;; This function uses a non-reentrant model
  2518 ;;
  2519                           
  2520                           
  2521                           ;psect for function _Lcd_Port
  2522  0000'                    _Lcd_Port:	
  2523                           
  2524                           ;incstack = 0
  2525                           ; Regs used in _Lcd_Port: [wreg]
  2526                           ;Lcd_Port@a stored from wreg
  2527  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  2528  0001' 0080'              	movwf	Lcd_Port@a
  2529                           
  2530                           ;lcd.c: 8: if(a & 1)
  2531  0002' 1C00'              	btfss	Lcd_Port@a,0
  2532  0003' 2806'              	goto	l66
  2533                           
  2534                           ;lcd.c: 9: RB0 = 1;
  2535  0004' 1406               	bsf	6,0	;volatile
  2536  0005' 2807'              	goto	l67
  2537  0006'                    l66:	
  2538                           
  2539                           ;lcd.c: 10: else
  2540                           ;lcd.c: 11: RB0 = 0;
  2541  0006' 1006               	bcf	6,0	;volatile
  2542  0007'                    l67:	
  2543                           
  2544                           ;lcd.c: 13: if(a & 2)
  2545  0007' 1C80'              	btfss	Lcd_Port@a,1
  2546  0008' 280B'              	goto	l68
  2547                           
  2548                           ;lcd.c: 14: RB1 = 1;
  2549  0009' 1486               	bsf	6,1	;volatile
  2550  000A' 280C'              	goto	l69
  2551  000B'                    l68:	
  2552                           
  2553                           ;lcd.c: 15: else
  2554                           ;lcd.c: 16: RB1 = 0;
  2555  000B' 1086               	bcf	6,1	;volatile
  2556  000C'                    l69:	
  2557                           
  2558                           ;lcd.c: 18: if(a & 4)
  2559  000C' 1D00'              	btfss	Lcd_Port@a,2
  2560  000D' 2810'              	goto	l70
  2561                           
  2562                           ;lcd.c: 19: RB2 = 1;
  2563  000E' 1506               	bsf	6,2	;volatile
  2564  000F' 2811'              	goto	l71
  2565  0010'                    l70:	
  2566                           
  2567                           ;lcd.c: 20: else
  2568                           ;lcd.c: 21: RB2 = 0;
  2569  0010' 1106               	bcf	6,2	;volatile
  2570  0011'                    l71:	
  2571                           
  2572                           ;lcd.c: 23: if(a & 8)
  2573  0011' 1D80'              	btfss	Lcd_Port@a,3
  2574  0012' 2815'              	goto	l72
  2575                           
  2576                           ;lcd.c: 24: RB3 = 1;
  2577  0013' 1586               	bsf	6,3	;volatile
  2578  0014' 0008               	return
  2579  0015'                    l72:	
  2580                           
  2581                           ;lcd.c: 25: else
  2582                           ;lcd.c: 26: RB3 = 0;
  2583  0015' 1186               	bcf	6,3	;volatile
  2584  0016' 0008               	return
  2585  0017'                    __end_of_Lcd_Port:	
  2586  004E                     btemp	set	78	;btemp
  2587  004E                     wtemp	set	78
  2588  004E                     wtemp0	set	78
  2589  0050                     wtemp1	set	80
  2590  0052                     wtemp2	set	82
  2591  0054                     wtemp3	set	84
  2592  0056                     wtemp4	set	86
  2593  0058                     wtemp5	set	88
  2594  004F                     wtemp6	set	79
  2595  004E                     ttemp	set	78
  2596  004E                     ttemp0	set	78
  2597  0051                     ttemp1	set	81
  2598  0054                     ttemp2	set	84
  2599  0057                     ttemp3	set	87
  2600  004F                     ttemp4	set	79
  2601  004E                     ltemp	set	78
  2602  004E                     ltemp0	set	78
  2603  0052                     ltemp1	set	82
  2604  0056                     ltemp2	set	86
  2605  0050                     ltemp3	set	80


Data Sizes:
    Strings     9
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            66     48      48

Pointer List with Targets:

    utoa@buf	PTR unsigned char  size(1) Largest target is 16
		 -> Lcd_Write_Int@temp(BANK0[16]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 0

    sp__utoa	PTR unsigned char  size(1) Largest target is 16
		 -> Lcd_Write_Int@temp(BANK0[16]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 16
		 -> Lcd_Write_Int@temp(BANK0[16]), STR_1(CODE[9]), 

    main@string	PTR unsigned char  size(1) Largest target is 9
		 -> STR_1(CODE[9]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    _main->___fttol
    ___lwtoft->___ftpack
    ___lwtoft->_readADC
    ___fttol->___ftmul
    ___ftmul->___lwtoft
    _Lcd_Write_Int->_utoa
    _utoa->___lwdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0    7173
                                             42 BANK0      6     6      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                      _Lcd_Write_Int
                   _Lcd_Write_String
                            ___ftmul
                            ___fttol
                           ___lwtoft
                            _readADC
 ---------------------------------------------------------------------------------
 (1) _readADC                                              8     6      2     208
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             4     1      3    1704
                                              8 BANK0      4     1      3
                           ___ftpack
                            _readADC (ARG)
 ---------------------------------------------------------------------------------
 (1) ___fttol                                             14    10      4     305
                                             28 BANK0     14    10      4
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
                            _readADC (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftmul                                             16    10      6    2061
                                             12 BANK0     16    10      6
                           ___ftpack
                           ___lwtoft (ARG)
                            _readADC (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    1629
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_Int                                       18    16      2    1680
                                             17 BANK0     18    16      2
                   _Lcd_Write_String
                               _utoa
 ---------------------------------------------------------------------------------
 (2) _utoa                                                 9     5      4    1181
                                              8 BANK0      9     5      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     265
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     374
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2     374
                                              5 BANK0      7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 BANK0      4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     486
                                              4 BANK0      7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            2     2      0     110
                                              4 BANK0      2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 BANK0      3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Int
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _utoa
       ___lwdiv
       ___lwmod
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   ___ftmul
     ___ftpack
     ___lwtoft (ARG)
       ___ftpack
       _readADC (ARG)
     _readADC (ARG)
   ___fttol
     ___ftmul (ARG)
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
         _readADC (ARG)
       _readADC (ARG)
     ___lwtoft (ARG)
       ___ftpack
       _readADC (ARG)
     _readADC (ARG)
   ___lwtoft
     ___ftpack
     _readADC (ARG)
   _readADC

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              40      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               42     30      30       3       72.7%
ABS                  0      0       0       4        0.0%
BITBANK0            42      0       0       5        0.0%
DATA                 0      0       0       6        0.0%


Microchip Technology PIC Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Mon Apr 18 16:38:09 2016

                        pc 0002                __CFG_CP$OFF 0000                         l44 0047  
                       l70 0010                         l71 0011                         l72 0015  
                       l66 0006                         l67 0007                         l68 000B  
                       l69 000C                         fsr 0004                        l360 0054  
                      l352 0037                        l443 0073                        l359 004C  
                      l458 0046                        l999 0009                        _RA1 0029  
                      _RB0 0030                        _RA2 002A                        _RB1 0031  
                      _RA3 002B                        _RB2 0032                        _RB3 0033  
                      _RB4 0034                        _RB5 0035                        _RB6 0036  
                      u805 002E                        u745 0010                        u835 000A  
                      u765 000C                        u855 001B                        u785 0018  
                      u865 0024                        u795 0024                        u965 0015  
                      u985 0030                        fsr0 0004                        indf 0000  
             __CFG_FOSC$XT 0000                       l1001 0017                       l1011 0038  
                     l1007 002D                       l1023 0007                       l1103 003C  
                     l1025 0015                       l1033 002E                       l1105 0046  
                     l1043 0003                       l1211 0017                       l1141 0021  
                     l1029 0023                       l1057 0006                       l1241 0094  
                     l1233 007C                       l1217 002D                       l1067 0022  
                     l1093 0010                       l1245 00A4                       l1229 006C  
                     l1261 0019                       l1317 000F                       l1095 001C  
                     l1175 0023                       l1159 000A                       l1097 0021  
                     l1089 0009                       l1281 005B                       l1185 0034  
                     l1169 001E                       l1293 0084                       l1287 0068  
                     l1279 004B                       l1289 0076                       STR_1 0010  
                     u1005 003F                       u1045 005B                       u1215 007D  
                     u1225 0085                       u1305 0020                       u1075 000D  
                     u1095 002E                       u1175 0039                       u1335 004C  
                     u1407 000C                       u1265 00A5                       u1185 004B  
                     u1417 0012                       u1507 000B                       u1275 00AD  
                     u1427 0025                       u1365 006A                       u1437 003B  
                     u1447 001B                       u1457 0025                       u1467 0007  
                     u1477 0013                       u1397 0054                       u1487 001E  
                     u1497 0009          ?_Lcd_Write_String 0005                       _main 0000  
             ___ftpack@arg 0000               ___ftpack@exp 0003                       btemp 004E  
                     _utoa 0000                       ltemp 004E                       start 0000* 
                     ttemp 004E         ??_Lcd_Write_String 0007                       wtemp 004E  
              main@voltage 002D            __end_of_Lcd_Cmd 0013               ___ftmul@cntr 001A  
             ___ftmul@sign 001B               ___fttol@exp1 0029               ___fttol@lval 0025  
                    ?_main 0000              __CFG_WDTE$OFF 0000                      ?_utoa 0008  
          __end_of___ftmul 00CF            __end_of___fttol 008D            __end_of___lwdiv 003D  
          __end_of___lwmod 0033    __size_of_Lcd_Set_Cursor 0042                      _TRISA 0085  
                    _TRISB 0086              __CFG_PWRTE$ON 0000                readADC@bits 0006  
          __end_of_readADC 005A                readADC@volt 0004              ___ftpack@sign 0004  
                    pclath 000A                      ltemp0 004E                      ltemp1 0052  
                    ltemp2 0056                      ltemp3 0050                      ttemp0 004E  
                    ttemp1 0051                      ttemp2 0054                      ttemp3 0057  
                    ttemp4 004F                      utoa@c 000F                      utoa@v 000D  
                    status 0003                      wtemp0 004E                      wtemp1 0050  
                    wtemp2 0052                      wtemp3 0054                      wtemp4 0056  
                    wtemp5 0058                      wtemp6 004F           __end_of_Lcd_Init 0034  
         __end_of_Lcd_Port 0017            __initialization 0000               __end_of_main 005C  
             __end_of_utoa 005C                     ??_main 002A              ___fttol@sign1 0024  
                   ??_utoa 000C         __size_of_Lcd_Clear 000F           __end_of___ftpack 006D  
         __end_of___lwtoft 0014                  ??_Lcd_Cmd 0001    __size_of_Lcd_Write_Char 002A  
                ??___ftmul 0012                  ??___fttol 0020                  ??___lwdiv 0004  
                ??___lwmod 0004      __end_of_Lcd_Write_Int 0012      ___ftmul@f3_as_product 0017  
                ??_readADC 0002            Lcd_Set_Cursor@a 0007            Lcd_Set_Cursor@b 0004  
          Lcd_Set_Cursor@y 0009            Lcd_Set_Cursor@z 0008    __end_of__initialization 0000  
        __end_of_Lcd_Clear 000F                 ___ftmul@f1 000C                 ___ftmul@f2 000F  
               ___fttol@f1 001C             __pcstackCOMMON 0000                 ___lwtoft@c 0008  
           _Lcd_Set_Cursor 0000                  ?_Lcd_Init 0000                  ?_Lcd_Port 0000  
           Lcd_Write_Int@a 0011                 __pmaintext 0000  __size_of_Lcd_Write_String 0031  
                ?___ftpack 0000     __end_of_Lcd_Set_Cursor 0042                  ?___lwtoft 0008  
               ??_Lcd_Init 0004                 ??_Lcd_Port 0000                 __stringtab 0000  
           _Lcd_Write_Char 0000                    _Lcd_Cmd 0000                    ___ftmul 0000  
                  ___fttol 0000                    ___lwdiv 0000                    ___lwmod 0000  
            readADC@rxData 0007                 ??___ftpack 0005            ?_Lcd_Set_Cursor 0004  
                  __ptext1 0000                    __ptext2 0000                    __ptext3 0000  
                  __ptext4 0000                    __ptext5 0000                    __ptext6 0000  
                  __ptext7 0000                    __ptext8 0000                    __ptext9 0000  
               ??___lwtoft 000B                    _readADC 0000     __end_of_Lcd_Write_Char 002A  
     end_of_initialization 0000                  Lcd_Port@a 0000                    utoa@buf 0010  
        Lcd_Write_Int@temp 0013                    utoa@val 0008            ?_Lcd_Write_Char 0000  
        Lcd_Write_String@a 0005          Lcd_Write_String@i 000A                 main@string 002F  
              ___ftmul@exp 0016                  _Lcd_Clear 0000           _Lcd_Write_String 0000  
      start_initialization 0000          __size_of_Lcd_Init 0034          __size_of_Lcd_Port 0017  
   __size_of_Lcd_Write_Int 0012                 ?_Lcd_Clear 0000            Lcd_Write_Char@a 0004  
          Lcd_Write_Char@y 0003          __size_of___ftpack 006D                  ___latbits 0000  
        __size_of___lwtoft 0014              __pcstackBANK0 0000                   ?_Lcd_Cmd 0000  
         ___lwdiv@dividend 0002           ??_Lcd_Set_Cursor 0005                   ?___ftmul 000C  
                 ?___fttol 001C                   ?___lwdiv 0000                   ?___lwmod 0000  
                __pstrings 0000                   ?_readADC 0000              _Lcd_Write_Int 0000  
         ___lwdiv@quotient 0005                   Lcd_Cmd@a 0003                ??_Lcd_Clear 0004  
              __stringbase 000F             ?_Lcd_Write_Int 0011           ??_Lcd_Write_Char 0001  
                 _Lcd_Init 0000                   _Lcd_Port 0000   __end_of_Lcd_Write_String 0031  
         __size_of_Lcd_Cmd 0013           __size_of___ftmul 00CF           __size_of___fttol 008D  
         __size_of___lwdiv 003D           __size_of___lwmod 0033                   ___ftpack 0000  
       __end_of__stringtab 0010                   ___lwtoft 0000           __size_of_readADC 005A  
          ___lwdiv@divisor 0000            ___lwdiv@counter 0007                   __ptext10 0000  
                 __ptext11 0000                   __ptext12 0000                   __ptext13 0000  
                 __ptext14 0000                   __ptext15 0000                   __ptext16 0000  
            __size_of_main 005C              __size_of_utoa 005C            ??_Lcd_Write_Int 0000  
       Lcd_Write_Char@temp 0002           ___lwmod@dividend 0002                  stringcode 000A  
       Lcd_Set_Cursor@temp 000A                   utoa@base 000A            ___lwmod@divisor 0000  
          ___lwmod@counter 0005                   stringdir 000A                   stringtab 0000  
