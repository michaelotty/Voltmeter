

Microchip Technology PIC LITE Macro Assembler V1.35 build -356382666 
                                                                                               Tue Apr 19 16:46:39 2016

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	16F84A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	psect	text10,local,class=CODE,merge=1,delta=2
    19                           	psect	text11,local,class=CODE,merge=1,delta=2
    20                           	psect	text12,local,class=CODE,merge=1,delta=2
    21                           	psect	text13,local,class=CODE,merge=1,delta=2
    22                           	dabs	1,0x4E,2
    23  0000                     	;# 
    24  0001                     	;# 
    25  0002                     	;# 
    26  0003                     	;# 
    27  0004                     	;# 
    28  0005                     	;# 
    29  0006                     	;# 
    30  0008                     	;# 
    31  0009                     	;# 
    32  000A                     	;# 
    33  000B                     	;# 
    34  0081                     	;# 
    35  0085                     	;# 
    36  0086                     	;# 
    37  0088                     	;# 
    38  0089                     	;# 
    39  0000                     	;# 
    40  0001                     	;# 
    41  0002                     	;# 
    42  0003                     	;# 
    43  0004                     	;# 
    44  0005                     	;# 
    45  0006                     	;# 
    46  0008                     	;# 
    47  0009                     	;# 
    48  000A                     	;# 
    49  000B                     	;# 
    50  0081                     	;# 
    51  0085                     	;# 
    52  0086                     	;# 
    53  0088                     	;# 
    54  0089                     	;# 
    55  0000                     	;# 
    56  0001                     	;# 
    57  0002                     	;# 
    58  0003                     	;# 
    59  0004                     	;# 
    60  0005                     	;# 
    61  0006                     	;# 
    62  0008                     	;# 
    63  0009                     	;# 
    64  000A                     	;# 
    65  000B                     	;# 
    66  0081                     	;# 
    67  0085                     	;# 
    68  0086                     	;# 
    69  0088                     	;# 
    70  0089                     	;# 
    71  0005                     _PORTAbits	set	5
    72  0029                     _RA1	set	41
    73  002A                     _RA2	set	42
    74  002B                     _RA3	set	43
    75  0030                     _RB0	set	48
    76  0031                     _RB1	set	49
    77  0032                     _RB2	set	50
    78  0033                     _RB3	set	51
    79  0034                     _RB4	set	52
    80  0035                     _RB5	set	53
    81  0036                     _RB6	set	54
    82  0085                     _TRISA	set	133
    83  0086                     _TRISB	set	134
    84                           
    85                           	psect	strings
    86  0001                     __pstrings:	
    87  0001                     stringtab:	
    88  0001                     __stringtab:	
    89                           
    90                           ;	String table - string pointers are 1 byte each
    91  0001  1BCF               	btfsc	btemp+1,7
    92  0002  280B               	ljmp	stringcode
    93  0003  1383               	bcf	3,7
    94  0004  184F               	btfsc	btemp+1,0
    95  0005  1783               	bsf	3,7
    96  0006  0800               	movf	0,w
    97  0007  0A84               	incf	4,f
    98  0008  1903               	skipnz
    99  0009  0ACF               	incf	btemp+1,f
   100  000A  0008               	return
   101  000B                     stringcode:	
   102  000B                     stringdir:	
   103  000B  3000               	movlw	high stringdir
   104  000C  008A               	movwf	10
   105  000D  0804               	movf	4,w
   106  000E  0A84               	incf	4,f
   107  000F  0782               	addwf	2,f
   108  0010                     __stringbase:	
   109  0010  3400               	retlw	0
   110  0011                     __end_of__stringtab:	
   111  0011                     STR_1:	
   112  0011  3456               	retlw	86	;'V'
   113  0012  346F               	retlw	111	;'o'
   114  0013  346C               	retlw	108	;'l'
   115  0014  3474               	retlw	116	;'t'
   116  0015  3461               	retlw	97	;'a'
   117  0016  3467               	retlw	103	;'g'
   118  0017  3465               	retlw	101	;'e'
   119  0018  343A               	retlw	58	;':'
   120  0019  3400               	retlw	0
   121                           
   122                           ; #config settings
   123  0000                     
   124                           	psect	cinit
   125  03FE                     start_initialization:	
   126  03FE                     __initialization:	
   127  03FE                     end_of_initialization:	
   128                           ;End of C runtime variable initialization code
   129                           
   130  03FE                     __end_of__initialization:	
   131  03FE  0183               	clrf	3
   132  03FF  2B3D               	ljmp	_main	;jump to C main() function
   133                           
   134                           	psect	cstackCOMMON
   135  0000                     __pcstackCOMMON:	
   136  0000                     ??_Lcd_Write_Int:	
   137  0000                     ??_Lcd_Port:	
   138                           ; 0 bytes @ 0x0
   139                           
   140  0000                     ??___wmul:	
   141                           ; 0 bytes @ 0x0
   142                           
   143                           
   144                           	psect	cstackBANK0
   145  000C                     __pcstackBANK0:	
   146                           ; 0 bytes @ 0x0
   147                           
   148  000C                     ?_Lcd_Init:	
   149  000C                     ?_Lcd_Clear:	
   150                           ; 0 bytes @ 0x0
   151                           
   152  000C                     ?_Lcd_Write_Char:	
   153                           ; 0 bytes @ 0x0
   154                           
   155  000C                     ?_main:	
   156                           ; 0 bytes @ 0x0
   157                           
   158  000C                     ?_Lcd_Port:	
   159                           ; 0 bytes @ 0x0
   160                           
   161  000C                     ?_Lcd_Cmd:	
   162                           ; 0 bytes @ 0x0
   163                           
   164  000C                     ?_readADC:	
   165                           ; 0 bytes @ 0x0
   166                           
   167  000C                     Lcd_Port@a:	
   168                           ; 2 bytes @ 0x0
   169                           
   170                           
   171                           ; 1 bytes @ 0x0
   172  000C                     	ds	1
   173  000D                     ??_Lcd_Write_Char:	
   174  000D                     ??_Lcd_Cmd:	
   175                           ; 0 bytes @ 0x1
   176                           
   177                           
   178                           ; 0 bytes @ 0x1
   179  000D                     	ds	1
   180  000E                     ??_readADC:	
   181  000E                     Lcd_Write_Char@temp:	
   182                           ; 0 bytes @ 0x2
   183                           
   184                           
   185                           ; 1 bytes @ 0x2
   186  000E                     	ds	1
   187  000F                     Lcd_Cmd@a:	
   188  000F                     Lcd_Write_Char@y:	
   189                           ; 1 bytes @ 0x3
   190                           
   191                           
   192                           ; 1 bytes @ 0x3
   193  000F                     	ds	1
   194  0010                     ??_Lcd_Init:	
   195  0010                     ??_Lcd_Clear:	
   196                           ; 0 bytes @ 0x4
   197                           
   198  0010                     ?_Lcd_Set_Cursor:	
   199                           ; 0 bytes @ 0x4
   200                           
   201  0010                     Lcd_Set_Cursor@b:	
   202                           ; 0 bytes @ 0x4
   203                           
   204  0010                     Lcd_Write_Char@a:	
   205                           ; 1 bytes @ 0x4
   206                           
   207  0010                     readADC@volt:	
   208                           ; 1 bytes @ 0x4
   209                           
   210                           
   211                           ; 2 bytes @ 0x4
   212  0010                     	ds	1
   213  0011                     ??_Lcd_Set_Cursor:	
   214  0011                     ?_Lcd_Write_String:	
   215                           ; 0 bytes @ 0x5
   216                           
   217  0011                     Lcd_Write_String@a:	
   218                           ; 0 bytes @ 0x5
   219                           
   220                           
   221                           ; 2 bytes @ 0x5
   222  0011                     	ds	1
   223  0012                     readADC@bits:	
   224                           
   225                           ; 1 bytes @ 0x6
   226  0012                     	ds	1
   227  0013                     ??_Lcd_Write_String:	
   228  0013                     readADC@rxData:	
   229                           ; 0 bytes @ 0x7
   230                           
   231  0013                     Lcd_Set_Cursor@a:	
   232                           ; 1 bytes @ 0x7
   233                           
   234                           
   235                           ; 1 bytes @ 0x7
   236  0013                     	ds	1
   237  0014                     ?___wmul:	
   238  0014                     Lcd_Set_Cursor@z:	
   239                           ; 2 bytes @ 0x8
   240                           
   241  0014                     ___wmul@multiplier:	
   242                           ; 1 bytes @ 0x8
   243                           
   244                           
   245                           ; 2 bytes @ 0x8
   246  0014                     	ds	1
   247  0015                     Lcd_Set_Cursor@y:	
   248                           
   249                           ; 1 bytes @ 0x9
   250  0015                     	ds	1
   251  0016                     Lcd_Set_Cursor@temp:	
   252  0016                     Lcd_Write_String@i:	
   253                           ; 1 bytes @ 0xA
   254                           
   255  0016                     ___wmul@multiplicand:	
   256                           ; 2 bytes @ 0xA
   257                           
   258                           
   259                           ; 2 bytes @ 0xA
   260  0016                     	ds	2
   261  0018                     ___wmul@product:	
   262                           
   263                           ; 2 bytes @ 0xC
   264  0018                     	ds	2
   265  001A                     ?___lwdiv:	
   266  001A                     ?___lwmod:	
   267                           ; 2 bytes @ 0xE
   268                           
   269  001A                     ___lwdiv@divisor:	
   270                           ; 2 bytes @ 0xE
   271                           
   272  001A                     ___lwmod@divisor:	
   273                           ; 2 bytes @ 0xE
   274                           
   275                           
   276                           ; 2 bytes @ 0xE
   277  001A                     	ds	2
   278  001C                     ___lwdiv@dividend:	
   279  001C                     ___lwmod@dividend:	
   280                           ; 2 bytes @ 0x10
   281                           
   282                           
   283                           ; 2 bytes @ 0x10
   284  001C                     	ds	2
   285  001E                     ??___lwdiv:	
   286  001E                     ??___lwmod:	
   287                           ; 0 bytes @ 0x12
   288                           
   289                           
   290                           ; 0 bytes @ 0x12
   291  001E                     	ds	1
   292  001F                     ___lwmod@counter:	
   293  001F                     ___lwdiv@quotient:	
   294                           ; 1 bytes @ 0x13
   295                           
   296                           
   297                           ; 2 bytes @ 0x13
   298  001F                     	ds	2
   299  0021                     ___lwdiv@counter:	
   300                           
   301                           ; 1 bytes @ 0x15
   302  0021                     	ds	1
   303  0022                     ?_utoa:	
   304  0022                     utoa@val:	
   305                           ; 1 bytes @ 0x16
   306                           
   307                           
   308                           ; 2 bytes @ 0x16
   309  0022                     	ds	2
   310  0024                     utoa@base:	
   311                           
   312                           ; 2 bytes @ 0x18
   313  0024                     	ds	2
   314  0026                     ??_utoa:	
   315                           
   316                           ; 0 bytes @ 0x1A
   317  0026                     	ds	1
   318  0027                     utoa@v:	
   319                           
   320                           ; 2 bytes @ 0x1B
   321  0027                     	ds	2
   322  0029                     utoa@c:	
   323                           
   324                           ; 1 bytes @ 0x1D
   325  0029                     	ds	1
   326  002A                     utoa@buf:	
   327                           
   328                           ; 1 bytes @ 0x1E
   329  002A                     	ds	1
   330  002B                     ?_Lcd_Write_Int:	
   331  002B                     Lcd_Write_Int@a:	
   332                           ; 0 bytes @ 0x1F
   333                           
   334                           
   335                           ; 2 bytes @ 0x1F
   336  002B                     	ds	2
   337  002D                     Lcd_Write_Int@temp:	
   338                           
   339                           ; 16 bytes @ 0x21
   340  002D                     	ds	16
   341  003D                     ??_main:	
   342                           
   343                           ; 0 bytes @ 0x31
   344  003D                     	ds	2
   345  003F                     main@voltage:	
   346                           
   347                           ; 2 bytes @ 0x33
   348  003F                     	ds	2
   349  0041                     main@string:	
   350                           
   351                           ; 1 bytes @ 0x35
   352  0041                     	ds	1
   353  0042                     main@decimal:	
   354                           
   355                           ; 2 bytes @ 0x36
   356  0042                     	ds	2
   357                           
   358                           	psect	maintext
   359  033D                     __pmaintext:	
   360 ;;
   361 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   362 ;;
   363 ;; *************** function _main *****************
   364 ;; Defined at:
   365 ;;		line 14 in file "main.c"
   366 ;; Parameters:    Size  Location     Type
   367 ;;		None
   368 ;; Auto vars:     Size  Location     Type
   369 ;;  decimal         2   54[BANK0 ] int 
   370 ;;  string          1   53[BANK0 ] PTR unsigned char 
   371 ;;		 -> STR_1(9), 
   372 ;;  voltage         2   51[BANK0 ] unsigned int 
   373 ;; Return value:  Size  Location     Type
   374 ;;		None               void
   375 ;; Registers used:
   376 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   377 ;; Tracked objects:
   378 ;;		On entry : B00/0
   379 ;;		On exit  : 0/0
   380 ;;		Unchanged: 0/0
   381 ;; Data sizes:     COMMON   BANK0
   382 ;;      Params:         0       0
   383 ;;      Locals:         0       5
   384 ;;      Temps:          0       2
   385 ;;      Totals:         0       7
   386 ;;Total ram usage:        7 bytes
   387 ;; Hardware stack levels required when called:    4
   388 ;; This function calls:
   389 ;;		_Lcd_Clear
   390 ;;		_Lcd_Init
   391 ;;		_Lcd_Set_Cursor
   392 ;;		_Lcd_Write_Char
   393 ;;		_Lcd_Write_Int
   394 ;;		_Lcd_Write_String
   395 ;;		___lwdiv
   396 ;;		___lwmod
   397 ;;		___wmul
   398 ;;		_readADC
   399 ;; This function is called by:
   400 ;;		Startup code after reset
   401 ;; This function uses a non-reentrant model
   402 ;;
   403                           
   404                           
   405                           ;psect for function _main
   406  033D                     _main:	
   407                           
   408                           ;main.c: 16: TRISA = 0b00010100;
   409                           
   410                           ;incstack = 0
   411                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   412  033D  3014               	movlw	20
   413  033E  1683               	bsf	3,5	;RP0=1, select bank1
   414  033F  0085               	movwf	5	;volatile
   415                           
   416                           ;main.c: 17: TRISB = 0x00;
   417  0340  0186               	clrf	6	;volatile
   418                           
   419                           ;main.c: 19: RA3 = 1;
   420  0341  1283               	bcf	3,5	;RP0=0, select bank0
   421  0342  1585               	bsf	5,3	;volatile
   422                           
   423                           ;main.c: 20: RA1 = 0;
   424  0343  1085               	bcf	5,1	;volatile
   425                           
   426                           ;main.c: 21: RB5 = 0;
   427  0344  1286               	bcf	6,5	;volatile
   428                           
   429                           ;main.c: 22: Lcd_Init();
   430  0345  21D4               	fcall	_Lcd_Init
   431                           
   432                           ;main.c: 23: Lcd_Clear();
   433  0346  20D9               	fcall	_Lcd_Clear
   434                           
   435                           ;main.c: 25: unsigned int voltage = 5;
   436  0347  3005               	movlw	5
   437  0348  1283               	bcf	3,5	;RP0=0, select bank0
   438  0349  00BF               	movwf	main@voltage
   439  034A  3000               	movlw	0
   440  034B  00C0               	movwf	main@voltage+1
   441  034C                     l1140:	
   442                           ;main.c: 26: while (1)
   443                           
   444                           
   445                           ;main.c: 27: {
   446                           ;main.c: 30: Lcd_Set_Cursor(1, 1);
   447  034C  0190               	clrf	Lcd_Set_Cursor@b
   448  034D  0A90               	incf	Lcd_Set_Cursor@b,f
   449  034E  3001               	movlw	1
   450  034F  2245               	fcall	_Lcd_Set_Cursor
   451                           
   452                           ;main.c: 31: char *string = "Voltage:";
   453  0350  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   454  0351  1283               	bcf	3,5	;RP0=0, select bank0
   455  0352  00BD               	movwf	??_main
   456  0353  083D               	movf	??_main,w
   457  0354  00C1               	movwf	main@string
   458                           
   459                           ;main.c: 33: Lcd_Write_String(string);
   460  0355  0841               	movf	main@string,w
   461  0356  0091               	movwf	Lcd_Write_String@a
   462  0357  3000               	movlw	0
   463  0358  1D03               	btfss	3,2
   464  0359  3080               	movlw	128
   465  035A  0092               	movwf	Lcd_Write_String@a+1
   466  035B  2170               	fcall	_Lcd_Write_String
   467                           
   468                           ;main.c: 34: Lcd_Set_Cursor(2, 1);
   469  035C  1283               	bcf	3,5	;RP0=0, select bank0
   470  035D  0190               	clrf	Lcd_Set_Cursor@b
   471  035E  0A90               	incf	Lcd_Set_Cursor@b,f
   472  035F  3002               	movlw	2
   473  0360  2245               	fcall	_Lcd_Set_Cursor
   474                           
   475                           ;main.c: 36: voltage = (readADC() * 5) / 1020;
   476  0361  30FC               	movlw	252
   477  0362  1283               	bcf	3,5	;RP0=0, select bank0
   478  0363  009A               	movwf	___lwdiv@divisor
   479  0364  3003               	movlw	3
   480  0365  009B               	movwf	___lwdiv@divisor+1
   481  0366  2287               	fcall	_readADC
   482  0367  1283               	bcf	3,5	;RP0=0, select bank0
   483  0368  080D               	movf	?_readADC+1,w
   484  0369  0095               	movwf	___wmul@multiplier+1
   485  036A  080C               	movf	?_readADC,w
   486  036B  0094               	movwf	___wmul@multiplier
   487  036C  3005               	movlw	5
   488  036D  0096               	movwf	___wmul@multiplicand
   489  036E  3000               	movlw	0
   490  036F  0097               	movwf	___wmul@multiplicand+1
   491  0370  2124               	fcall	___wmul
   492  0371  1283               	bcf	3,5	;RP0=0, select bank0
   493  0372  0815               	movf	?___wmul+1,w
   494  0373  009D               	movwf	___lwdiv@dividend+1
   495  0374  0814               	movf	?___wmul,w
   496  0375  009C               	movwf	___lwdiv@dividend
   497  0376  2208               	fcall	___lwdiv
   498  0377  1283               	bcf	3,5	;RP0=0, select bank0
   499  0378  081B               	movf	?___lwdiv+1,w
   500  0379  00C0               	movwf	main@voltage+1
   501  037A  081A               	movf	?___lwdiv,w
   502  037B  00BF               	movwf	main@voltage
   503                           
   504                           ;main.c: 40: int decimal;
   505                           ;main.c: 41: decimal = ((readADC() * 5) % 1020);
   506  037C  30FC               	movlw	252
   507  037D  009A               	movwf	___lwmod@divisor
   508  037E  3003               	movlw	3
   509  037F  009B               	movwf	___lwmod@divisor+1
   510  0380  2287               	fcall	_readADC
   511  0381  1283               	bcf	3,5	;RP0=0, select bank0
   512  0382  080D               	movf	?_readADC+1,w
   513  0383  0095               	movwf	___wmul@multiplier+1
   514  0384  080C               	movf	?_readADC,w
   515  0385  0094               	movwf	___wmul@multiplier
   516  0386  3005               	movlw	5
   517  0387  0096               	movwf	___wmul@multiplicand
   518  0388  3000               	movlw	0
   519  0389  0097               	movwf	___wmul@multiplicand+1
   520  038A  2124               	fcall	___wmul
   521  038B  1283               	bcf	3,5	;RP0=0, select bank0
   522  038C  0815               	movf	?___wmul+1,w
   523  038D  009D               	movwf	___lwmod@dividend+1
   524  038E  0814               	movf	?___wmul,w
   525  038F  009C               	movwf	___lwmod@dividend
   526  0390  21A1               	fcall	___lwmod
   527  0391  1283               	bcf	3,5	;RP0=0, select bank0
   528  0392  081B               	movf	?___lwmod+1,w
   529  0393  00C3               	movwf	main@decimal+1
   530  0394  081A               	movf	?___lwmod,w
   531  0395  00C2               	movwf	main@decimal
   532                           
   533                           ;main.c: 43: Lcd_Write_Int(voltage);
   534  0396  0840               	movf	main@voltage+1,w
   535  0397  00AC               	movwf	Lcd_Write_Int@a+1
   536  0398  083F               	movf	main@voltage,w
   537  0399  00AB               	movwf	Lcd_Write_Int@a
   538  039A  20E8               	fcall	_Lcd_Write_Int
   539                           
   540                           ;main.c: 44: Lcd_Write_Char('.');
   541  039B  302E               	movlw	46
   542  039C  2146               	fcall	_Lcd_Write_Char
   543                           
   544                           ;main.c: 45: if (decimal < 10)
   545  039D  1283               	bcf	3,5	;RP0=0, select bank0
   546  039E  0843               	movf	main@decimal+1,w
   547  039F  3A80               	xorlw	128
   548  03A0  00CF               	movwf	79
   549  03A1  3080               	movlw	128
   550  03A2  024F               	subwf	79,w
   551  03A3  1D03               	skipz
   552  03A4  2BA7               	goto	u825
   553  03A5  300A               	movlw	10
   554  03A6  0242               	subwf	main@decimal,w
   555  03A7                     u825:	
   556  03A7  1803               	skipnc
   557  03A8  2BAF               	goto	l1160
   558                           
   559                           ;main.c: 46: {
   560                           ;main.c: 47: Lcd_Write_Int(0);
   561  03A9  3000               	movlw	0
   562  03AA  1283               	bcf	3,5	;RP0=0, select bank0
   563  03AB  00AB               	movwf	Lcd_Write_Int@a
   564  03AC  00AC               	movwf	Lcd_Write_Int@a+1
   565  03AD  20E8               	fcall	_Lcd_Write_Int
   566  03AE  2BBB               	goto	L1
   567  03AF                     l1160:	
   568                           ;main.c: 50: }
   569                           
   570                           ;main.c: 49: Lcd_Write_Int(decimal);
   571                           
   572                           ;main.c: 48: Lcd_Write_Int(0);
   573                           
   574                           
   575                           ;main.c: 51: else if (decimal < 100)
   576  03AF  1283               	bcf	3,5	;RP0=0, select bank0
   577  03B0  0843               	movf	main@decimal+1,w
   578  03B1  3A80               	xorlw	128
   579  03B2  00CF               	movwf	79
   580  03B3  3080               	movlw	128
   581  03B4  024F               	subwf	79,w
   582  03B5  1D03               	skipz
   583  03B6  2BB9               	goto	u835
   584  03B7  3064               	movlw	100
   585  03B8  0242               	subwf	main@decimal,w
   586  03B9                     u835:	
   587  03B9  1803               	skipnc
   588  03BA  2BC0               	goto	l1164
   589  03BB                     L1:	
   590                           
   591                           ;main.c: 52: {
   592                           ;main.c: 53: Lcd_Write_Int(0);
   593  03BB  3000               	movlw	0
   594  03BC  1283               	bcf	3,5	;RP0=0, select bank0
   595  03BD  00AB               	movwf	Lcd_Write_Int@a
   596  03BE  00AC               	movwf	Lcd_Write_Int@a+1
   597  03BF  20E8               	fcall	_Lcd_Write_Int
   598  03C0                     l1164:	
   599                           ;main.c: 55: }
   600                           
   601                           ;main.c: 54: Lcd_Write_Int(decimal);
   602                           
   603                           
   604                           ;main.c: 56: else
   605                           ;main.c: 57: {
   606                           ;main.c: 58: Lcd_Write_Int(decimal);
   607  03C0  1283               	bcf	3,5	;RP0=0, select bank0
   608  03C1  0843               	movf	main@decimal+1,w
   609  03C2  00AC               	movwf	Lcd_Write_Int@a+1
   610  03C3  0842               	movf	main@decimal,w
   611  03C4  00AB               	movwf	Lcd_Write_Int@a
   612  03C5  20E8               	fcall	_Lcd_Write_Int
   613                           
   614                           ;main.c: 59: }
   615                           ;main.c: 61: if(PORTAbits.RA4)
   616  03C6  1283               	bcf	3,5	;RP0=0, select bank0
   617  03C7  1A05               	btfsc	5,4	;volatile
   618  03C8  2BD3               	goto	l1172
   619  03C9  2B4C               	goto	l1140
   620  03CA                     l1170:	
   621                           ;main.c: 62: {
   622                           ;main.c: 64: while (PORTAbits.RA4)
   623                           
   624                           
   625                           ;main.c: 65: {
   626                           ;main.c: 66: _delay((unsigned long)((50)*(4000000/4000.0)));
   627  03CA  3041               	movlw	65
   628  03CB  00BE               	movwf	??_main+1
   629  03CC  30EE               	movlw	238
   630  03CD  00BD               	movwf	??_main
   631  03CE                     u897:	
   632  03CE  0BBD               	decfsz	??_main,f
   633  03CF  2BCE               	goto	u897
   634  03D0  0BBE               	decfsz	??_main+1,f
   635  03D1  2BCE               	goto	u897
   636  03D2  0000               	nop
   637  03D3                     l1172:	
   638  03D3  1283               	bcf	3,5	;RP0=0, select bank0
   639  03D4  1E05               	btfss	5,4	;volatile
   640  03D5  2BE0               	goto	l1176
   641  03D6  2BCA               	goto	l1170
   642  03D7                     l1174:	
   643                           ;main.c: 67: }
   644                           ;main.c: 68: while (PORTAbits.RA4 == 0)
   645                           
   646                           
   647                           ;main.c: 69: {
   648                           ;main.c: 70: _delay((unsigned long)((50)*(4000000/4000.0)));
   649  03D7  3041               	movlw	65
   650  03D8  00BE               	movwf	??_main+1
   651  03D9  30EE               	movlw	238
   652  03DA  00BD               	movwf	??_main
   653  03DB                     u907:	
   654  03DB  0BBD               	decfsz	??_main,f
   655  03DC  2BDB               	goto	u907
   656  03DD  0BBE               	decfsz	??_main+1,f
   657  03DE  2BDB               	goto	u907
   658  03DF  0000               	nop
   659  03E0                     l1176:	
   660  03E0  1283               	bcf	3,5	;RP0=0, select bank0
   661  03E1  1A05               	btfsc	5,4	;volatile
   662  03E2  2BED               	goto	l1180
   663  03E3  2BD7               	goto	l1174
   664  03E4                     l1178:	
   665                           ;main.c: 71: }
   666                           ;main.c: 72: while (PORTAbits.RA4 )
   667                           
   668                           
   669                           ;main.c: 73: {
   670                           ;main.c: 74: _delay((unsigned long)((50)*(4000000/4000.0)));
   671  03E4  3041               	movlw	65
   672  03E5  00BE               	movwf	??_main+1
   673  03E6  30EE               	movlw	238
   674  03E7  00BD               	movwf	??_main
   675  03E8                     u917:	
   676  03E8  0BBD               	decfsz	??_main,f
   677  03E9  2BE8               	goto	u917
   678  03EA  0BBE               	decfsz	??_main+1,f
   679  03EB  2BE8               	goto	u917
   680  03EC  0000               	nop
   681  03ED                     l1180:	
   682  03ED  1283               	bcf	3,5	;RP0=0, select bank0
   683  03EE  1E05               	btfss	5,4	;volatile
   684  03EF  2BFA               	goto	l1184
   685  03F0  2BE4               	goto	l1178
   686  03F1                     l1182:	
   687                           ;main.c: 75: }
   688                           ;main.c: 76: while(PORTAbits.RA4 == 0)
   689                           
   690                           
   691                           ;main.c: 77: {
   692                           ;main.c: 78: _delay((unsigned long)((50)*(4000000/4000.0)));
   693  03F1  3041               	movlw	65
   694  03F2  00BE               	movwf	??_main+1
   695  03F3  30EE               	movlw	238
   696  03F4  00BD               	movwf	??_main
   697  03F5                     u927:	
   698  03F5  0BBD               	decfsz	??_main,f
   699  03F6  2BF5               	goto	u927
   700  03F7  0BBE               	decfsz	??_main+1,f
   701  03F8  2BF5               	goto	u927
   702  03F9  0000               	nop
   703  03FA                     l1184:	
   704  03FA  1283               	bcf	3,5	;RP0=0, select bank0
   705  03FB  1A05               	btfsc	5,4	;volatile
   706  03FC  2B4C               	goto	l1140
   707  03FD  2BF1               	goto	l1182
   708  03FE                     __end_of_main:	
   709                           
   710                           	psect	text1
   711  0287                     __ptext1:	
   712 ;; *************** function _readADC *****************
   713 ;; Defined at:
   714 ;;		line 6 in file "adc.c"
   715 ;; Parameters:    Size  Location     Type
   716 ;;		None
   717 ;; Auto vars:     Size  Location     Type
   718 ;;  volt            2    4[BANK0 ] unsigned int 
   719 ;;  rxData          1    7[BANK0 ] unsigned char 
   720 ;;  bits            1    6[BANK0 ] unsigned char 
   721 ;; Return value:  Size  Location     Type
   722 ;;                  2    0[BANK0 ] unsigned int 
   723 ;; Registers used:
   724 ;;		wreg, status,2, status,0
   725 ;; Tracked objects:
   726 ;;		On entry : 0/0
   727 ;;		On exit  : 0/0
   728 ;;		Unchanged: 0/0
   729 ;; Data sizes:     COMMON   BANK0
   730 ;;      Params:         0       2
   731 ;;      Locals:         0       4
   732 ;;      Temps:          0       2
   733 ;;      Totals:         0       8
   734 ;;Total ram usage:        8 bytes
   735 ;; Hardware stack levels used:    1
   736 ;; This function calls:
   737 ;;		Nothing
   738 ;; This function is called by:
   739 ;;		_main
   740 ;; This function uses a non-reentrant model
   741 ;;
   742                           
   743                           
   744                           ;psect for function _readADC
   745  0287                     _readADC:	
   746                           
   747                           ;adc.c: 8: unsigned char bits;
   748                           ;adc.c: 9: unsigned char rxData = 0;
   749                           
   750                           ;incstack = 0
   751                           ; Regs used in _readADC: [wreg+status,2+status,0]
   752  0287  1283               	bcf	3,5	;RP0=0, select bank0
   753  0288  0193               	clrf	readADC@rxData
   754                           
   755                           ;adc.c: 10: unsigned int volt = 0;
   756  0289  0190               	clrf	readADC@volt
   757  028A  0191               	clrf	readADC@volt+1
   758                           
   759                           ;adc.c: 12: RA3 = 0;
   760  028B  1185               	bcf	5,3	;volatile
   761                           
   762                           ;adc.c: 15: for (bits = 0; bits < 3; bits++)
   763  028C  0192               	clrf	readADC@bits
   764  028D  3003               	movlw	3
   765  028E  0212               	subwf	readADC@bits,w
   766  028F  1803               	btfsc	3,0
   767  0290  2AA5               	goto	l1074
   768  0291                     l1064:	
   769                           
   770                           ;adc.c: 16: {
   771                           ;adc.c: 17: _delay((unsigned long)((100)*(4000000/4000000.0)));
   772  0291  3021               	movlw	33
   773  0292  008E               	movwf	??_readADC
   774  0293                     u937:	
   775  0293  0B8E               	decfsz	??_readADC,f
   776  0294  2A93               	goto	u937
   777                           
   778                           ;adc.c: 18: RA1 = 1;
   779  0295  1283               	bcf	3,5	;RP0=0, select bank0
   780  0296  1485               	bsf	5,1	;volatile
   781                           
   782                           ;adc.c: 19: _delay((unsigned long)((100)*(4000000/4000000.0)));
   783  0297  3021               	movlw	33
   784  0298  008E               	movwf	??_readADC
   785  0299                     u947:	
   786  0299  0B8E               	decfsz	??_readADC,f
   787  029A  2A99               	goto	u947
   788                           
   789                           ;adc.c: 20: RA1 = 0;
   790  029B  1283               	bcf	3,5	;RP0=0, select bank0
   791  029C  1085               	bcf	5,1	;volatile
   792  029D  3001               	movlw	1
   793  029E  008E               	movwf	??_readADC
   794  029F  080E               	movf	??_readADC,w
   795  02A0  0792               	addwf	readADC@bits,f
   796  02A1  3003               	movlw	3
   797  02A2  0212               	subwf	readADC@bits,w
   798  02A3  1C03               	skipc
   799  02A4  2A91               	goto	l1064
   800  02A5                     l1074:	
   801                           
   802                           ;adc.c: 21: }
   803                           ;adc.c: 24: for (bits = 0; bits < 8; bits++)
   804  02A5  0192               	clrf	readADC@bits
   805  02A6  3008               	movlw	8
   806  02A7  0212               	subwf	readADC@bits,w
   807  02A8  1803               	btfsc	3,0
   808  02A9  2ACE               	goto	l65
   809  02AA                     l1080:	
   810                           
   811                           ;adc.c: 25: {
   812                           ;adc.c: 27: _delay((unsigned long)((100)*(4000000/4000000.0)));
   813  02AA  3021               	movlw	33
   814  02AB  008E               	movwf	??_readADC
   815  02AC                     u957:	
   816  02AC  0B8E               	decfsz	??_readADC,f
   817  02AD  2AAC               	goto	u957
   818                           
   819                           ;adc.c: 28: RA1 = 1;
   820  02AE  1283               	bcf	3,5	;RP0=0, select bank0
   821  02AF  1485               	bsf	5,1	;volatile
   822                           
   823                           ;adc.c: 31: rxData = rxData << 1;
   824  02B0  0813               	movf	readADC@rxData,w
   825  02B1  008E               	movwf	??_readADC
   826  02B2  070E               	addwf	??_readADC,w
   827  02B3  008F               	movwf	??_readADC+1
   828  02B4  080F               	movf	??_readADC+1,w
   829  02B5  0093               	movwf	readADC@rxData
   830                           
   831                           ;adc.c: 34: if(RA2 == 1)
   832  02B6  1D05               	btfss	5,2	;volatile
   833  02B7  2ABB               	goto	l1090
   834                           
   835                           ;adc.c: 35: rxData = rxData | 0x01;
   836  02B8  0813               	movf	readADC@rxData,w
   837  02B9  3801               	iorlw	1
   838  02BA  2ABD               	goto	L2
   839  02BB                     l1090:	
   840                           
   841                           ;adc.c: 36: else
   842                           ;adc.c: 37: rxData = rxData & 0xfe;
   843  02BB  0813               	movf	readADC@rxData,w
   844  02BC  39FE               	andlw	254
   845  02BD                     L2:	
   846  02BD  008E               	movwf	??_readADC
   847  02BE  080E               	movf	??_readADC,w
   848  02BF  0093               	movwf	readADC@rxData
   849                           
   850                           ;adc.c: 39: _delay((unsigned long)((100)*(4000000/4000000.0)));
   851  02C0  3021               	movlw	33
   852  02C1  008E               	movwf	??_readADC
   853  02C2                     u967:	
   854  02C2  0B8E               	decfsz	??_readADC,f
   855  02C3  2AC2               	goto	u967
   856                           
   857                           ;adc.c: 40: RA1 = 0;
   858  02C4  1283               	bcf	3,5	;RP0=0, select bank0
   859  02C5  1085               	bcf	5,1	;volatile
   860  02C6  3001               	movlw	1
   861  02C7  008E               	movwf	??_readADC
   862  02C8  080E               	movf	??_readADC,w
   863  02C9  0792               	addwf	readADC@bits,f
   864  02CA  3008               	movlw	8
   865  02CB  0212               	subwf	readADC@bits,w
   866  02CC  1C03               	skipc
   867  02CD  2AAA               	goto	l1080
   868  02CE                     l65:	
   869                           
   870                           ;adc.c: 41: }
   871                           ;adc.c: 44: RA3 = 1;
   872  02CE  1585               	bsf	5,3	;volatile
   873                           
   874                           ;adc.c: 47: volt = (rxData << 2);
   875  02CF  0813               	movf	readADC@rxData,w
   876  02D0  008E               	movwf	??_readADC
   877  02D1  018F               	clrf	??_readADC+1
   878  02D2  1003               	clrc
   879  02D3  0D8E               	rlf	??_readADC,f
   880  02D4  0D8F               	rlf	??_readADC+1,f
   881  02D5  1003               	clrc
   882  02D6  0D8E               	rlf	??_readADC,f
   883  02D7  0D8F               	rlf	??_readADC+1,f
   884  02D8  080E               	movf	??_readADC,w
   885  02D9  0090               	movwf	readADC@volt
   886  02DA  080F               	movf	??_readADC+1,w
   887  02DB  0091               	movwf	readADC@volt+1
   888                           
   889                           ;adc.c: 48: return volt;
   890  02DC  0811               	movf	readADC@volt+1,w
   891  02DD  008D               	movwf	?_readADC+1
   892  02DE  0810               	movf	readADC@volt,w
   893  02DF  008C               	movwf	?_readADC
   894  02E0  0008               	return
   895  02E1                     __end_of_readADC:	
   896                           
   897                           	psect	text2
   898  0124                     __ptext2:	
   899 ;; *************** function ___wmul *****************
   900 ;; Defined at:
   901 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
   902 ;; Parameters:    Size  Location     Type
   903 ;;  multiplier      2    8[BANK0 ] unsigned int 
   904 ;;  multiplicand    2   10[BANK0 ] unsigned int 
   905 ;; Auto vars:     Size  Location     Type
   906 ;;  product         2   12[BANK0 ] unsigned int 
   907 ;; Return value:  Size  Location     Type
   908 ;;                  2    8[BANK0 ] unsigned int 
   909 ;; Registers used:
   910 ;;		wreg, status,2, status,0
   911 ;; Tracked objects:
   912 ;;		On entry : 0/0
   913 ;;		On exit  : 0/0
   914 ;;		Unchanged: 0/0
   915 ;; Data sizes:     COMMON   BANK0
   916 ;;      Params:         0       4
   917 ;;      Locals:         0       2
   918 ;;      Temps:          0       0
   919 ;;      Totals:         0       6
   920 ;;Total ram usage:        6 bytes
   921 ;; Hardware stack levels used:    1
   922 ;; This function calls:
   923 ;;		Nothing
   924 ;; This function is called by:
   925 ;;		_main
   926 ;; This function uses a non-reentrant model
   927 ;;
   928                           
   929                           
   930                           ;psect for function ___wmul
   931  0124                     ___wmul:	
   932                           
   933                           ;incstack = 0
   934                           ; Regs used in ___wmul: [wreg+status,2+status,0]
   935  0124  1283               	bcf	3,5	;RP0=0, select bank0
   936  0125  0198               	clrf	___wmul@product
   937  0126  0199               	clrf	___wmul@product+1
   938  0127                     l1112:	
   939  0127  1C14               	btfss	___wmul@multiplier,0
   940  0128  292F               	goto	l212
   941  0129  0816               	movf	___wmul@multiplicand,w
   942  012A  0798               	addwf	___wmul@product,f
   943  012B  1803               	skipnc
   944  012C  0A99               	incf	___wmul@product+1,f
   945  012D  0817               	movf	___wmul@multiplicand+1,w
   946  012E  0799               	addwf	___wmul@product+1,f
   947  012F                     l212:	
   948  012F  3001               	movlw	1
   949  0130                     u795:	
   950  0130  1003               	clrc
   951  0131  0D96               	rlf	___wmul@multiplicand,f
   952  0132  0D97               	rlf	___wmul@multiplicand+1,f
   953  0133  3EFF               	addlw	-1
   954  0134  1D03               	skipz
   955  0135  2930               	goto	u795
   956  0136  3001               	movlw	1
   957  0137                     u805:	
   958  0137  1003               	clrc
   959  0138  0C95               	rrf	___wmul@multiplier+1,f
   960  0139  0C94               	rrf	___wmul@multiplier,f
   961  013A  3EFF               	addlw	-1
   962  013B  1D03               	skipz
   963  013C  2937               	goto	u805
   964  013D  0814               	movf	___wmul@multiplier,w
   965  013E  0415               	iorwf	___wmul@multiplier+1,w
   966  013F  1D03               	btfss	3,2
   967  0140  2927               	goto	l1112
   968  0141  0819               	movf	___wmul@product+1,w
   969  0142  0095               	movwf	?___wmul+1
   970  0143  0818               	movf	___wmul@product,w
   971  0144  0094               	movwf	?___wmul
   972  0145  0008               	return
   973  0146                     __end_of___wmul:	
   974                           
   975                           	psect	text3
   976  00E8                     __ptext3:	
   977 ;; *************** function _Lcd_Write_Int *****************
   978 ;; Defined at:
   979 ;;		line 120 in file "lcd.c"
   980 ;; Parameters:    Size  Location     Type
   981 ;;  a               2   31[BANK0 ] unsigned int 
   982 ;; Auto vars:     Size  Location     Type
   983 ;;  temp           16   33[BANK0 ] unsigned char [16]
   984 ;; Return value:  Size  Location     Type
   985 ;;		None               void
   986 ;; Registers used:
   987 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   988 ;; Tracked objects:
   989 ;;		On entry : 0/0
   990 ;;		On exit  : 0/0
   991 ;;		Unchanged: 0/0
   992 ;; Data sizes:     COMMON   BANK0
   993 ;;      Params:         0       2
   994 ;;      Locals:         0      16
   995 ;;      Temps:          0       0
   996 ;;      Totals:         0      18
   997 ;;Total ram usage:       18 bytes
   998 ;; Hardware stack levels used:    1
   999 ;; Hardware stack levels required when called:    3
  1000 ;; This function calls:
  1001 ;;		_Lcd_Write_String
  1002 ;;		_utoa
  1003 ;; This function is called by:
  1004 ;;		_main
  1005 ;; This function uses a non-reentrant model
  1006 ;;
  1007                           
  1008                           
  1009                           ;psect for function _Lcd_Write_Int
  1010  00E8                     _Lcd_Write_Int:	
  1011                           
  1012                           ;lcd.c: 122: char temp[16];
  1013                           ;lcd.c: 123: utoa((char*)temp, a, 10);
  1014                           
  1015                           ;incstack = 0
  1016                           ; Regs used in _Lcd_Write_Int: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1017  00E8  1283               	bcf	3,5	;RP0=0, select bank0
  1018  00E9  082C               	movf	Lcd_Write_Int@a+1,w
  1019  00EA  00A3               	movwf	utoa@val+1
  1020  00EB  082B               	movf	Lcd_Write_Int@a,w
  1021  00EC  00A2               	movwf	utoa@val
  1022  00ED  300A               	movlw	10
  1023  00EE  00A4               	movwf	utoa@base
  1024  00EF  3000               	movlw	0
  1025  00F0  00A5               	movwf	utoa@base+1
  1026  00F1  302D               	movlw	(low (Lcd_Write_Int@temp| 0))& (0+255)
  1027  00F2  22E1               	fcall	_utoa
  1028                           
  1029                           ;lcd.c: 124: Lcd_Write_String(temp);
  1030  00F3  302D               	movlw	(low (Lcd_Write_Int@temp| 0))& (0+255)
  1031  00F4  1283               	bcf	3,5	;RP0=0, select bank0
  1032  00F5  0091               	movwf	Lcd_Write_String@a
  1033  00F6  3000               	movlw	0
  1034  00F7  0092               	movwf	Lcd_Write_String@a+1
  1035  00F8  2170               	fcall	_Lcd_Write_String
  1036  00F9  0008               	return
  1037  00FA                     __end_of_Lcd_Write_Int:	
  1038                           
  1039                           	psect	text4
  1040  02E1                     __ptext4:	
  1041 ;; *************** function _utoa *****************
  1042 ;; Defined at:
  1043 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\itoa.c"
  1044 ;; Parameters:    Size  Location     Type
  1045 ;;  buf             1    wreg     PTR unsigned char 
  1046 ;;		 -> Lcd_Write_Int@temp(16), 
  1047 ;;  val             2   22[BANK0 ] unsigned int 
  1048 ;;  base            2   24[BANK0 ] int 
  1049 ;; Auto vars:     Size  Location     Type
  1050 ;;  buf             1   30[BANK0 ] PTR unsigned char 
  1051 ;;		 -> Lcd_Write_Int@temp(16), 
  1052 ;;  v               2   27[BANK0 ] unsigned int 
  1053 ;;  c               1   29[BANK0 ] unsigned char 
  1054 ;; Return value:  Size  Location     Type
  1055 ;;                  1    wreg      PTR unsigned char 
  1056 ;; Registers used:
  1057 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1058 ;; Tracked objects:
  1059 ;;		On entry : 0/0
  1060 ;;		On exit  : 0/0
  1061 ;;		Unchanged: 0/0
  1062 ;; Data sizes:     COMMON   BANK0
  1063 ;;      Params:         0       4
  1064 ;;      Locals:         0       4
  1065 ;;      Temps:          0       1
  1066 ;;      Totals:         0       9
  1067 ;;Total ram usage:        9 bytes
  1068 ;; Hardware stack levels used:    1
  1069 ;; Hardware stack levels required when called:    1
  1070 ;; This function calls:
  1071 ;;		___lwdiv
  1072 ;;		___lwmod
  1073 ;; This function is called by:
  1074 ;;		_Lcd_Write_Int
  1075 ;; This function uses a non-reentrant model
  1076 ;;
  1077                           
  1078                           
  1079                           ;psect for function _utoa
  1080  02E1                     _utoa:	
  1081                           
  1082                           ;incstack = 0
  1083                           ; Regs used in _utoa: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1084                           ;utoa@buf stored from wreg
  1085  02E1  1283               	bcf	3,5	;RP0=0, select bank0
  1086  02E2  00AA               	movwf	utoa@buf
  1087  02E3  0823               	movf	utoa@val+1,w
  1088  02E4  00A8               	movwf	utoa@v+1
  1089  02E5  0822               	movf	utoa@val,w
  1090  02E6  00A7               	movwf	utoa@v
  1091  02E7                     l994:	
  1092  02E7  0825               	movf	utoa@base+1,w
  1093  02E8  009B               	movwf	___lwdiv@divisor+1
  1094  02E9  0824               	movf	utoa@base,w
  1095  02EA  009A               	movwf	___lwdiv@divisor
  1096  02EB  0828               	movf	utoa@v+1,w
  1097  02EC  009D               	movwf	___lwdiv@dividend+1
  1098  02ED  0827               	movf	utoa@v,w
  1099  02EE  009C               	movwf	___lwdiv@dividend
  1100  02EF  2208               	fcall	___lwdiv
  1101  02F0  1283               	bcf	3,5	;RP0=0, select bank0
  1102  02F1  081B               	movf	?___lwdiv+1,w
  1103  02F2  00A8               	movwf	utoa@v+1
  1104  02F3  081A               	movf	?___lwdiv,w
  1105  02F4  00A7               	movwf	utoa@v
  1106  02F5  3001               	movlw	1
  1107  02F6  00A6               	movwf	??_utoa
  1108  02F7  0826               	movf	??_utoa,w
  1109  02F8  07AA               	addwf	utoa@buf,f
  1110  02F9  0827               	movf	utoa@v,w
  1111  02FA  0428               	iorwf	utoa@v+1,w
  1112  02FB  1D03               	btfss	3,2
  1113  02FC  2AE7               	goto	l994
  1114  02FD  082A               	movf	utoa@buf,w
  1115  02FE  0084               	movwf	4
  1116  02FF  1383               	bcf	3,7	;select IRP bank0
  1117  0300  0180               	clrf	0
  1118  0301  3001               	movlw	1
  1119  0302  02AA               	subwf	utoa@buf,f
  1120  0303                     l1004:	
  1121  0303  0825               	movf	utoa@base+1,w
  1122  0304  009B               	movwf	___lwmod@divisor+1
  1123  0305  0824               	movf	utoa@base,w
  1124  0306  009A               	movwf	___lwmod@divisor
  1125  0307  0823               	movf	utoa@val+1,w
  1126  0308  009D               	movwf	___lwmod@dividend+1
  1127  0309  0822               	movf	utoa@val,w
  1128  030A  009C               	movwf	___lwmod@dividend
  1129  030B  21A1               	fcall	___lwmod
  1130  030C  1283               	bcf	3,5	;RP0=0, select bank0
  1131  030D  081A               	movf	?___lwmod,w
  1132  030E  00A6               	movwf	??_utoa
  1133  030F  0826               	movf	??_utoa,w
  1134  0310  00A9               	movwf	utoa@c
  1135  0311  0825               	movf	utoa@base+1,w
  1136  0312  009B               	movwf	___lwdiv@divisor+1
  1137  0313  0824               	movf	utoa@base,w
  1138  0314  009A               	movwf	___lwdiv@divisor
  1139  0315  0823               	movf	utoa@val+1,w
  1140  0316  009D               	movwf	___lwdiv@dividend+1
  1141  0317  0822               	movf	utoa@val,w
  1142  0318  009C               	movwf	___lwdiv@dividend
  1143  0319  2208               	fcall	___lwdiv
  1144  031A  1283               	bcf	3,5	;RP0=0, select bank0
  1145  031B  081B               	movf	?___lwdiv+1,w
  1146  031C  00A3               	movwf	utoa@val+1
  1147  031D  081A               	movf	?___lwdiv,w
  1148  031E  00A2               	movwf	utoa@val
  1149  031F  300A               	movlw	10
  1150  0320  0229               	subwf	utoa@c,w
  1151  0321  1C03               	skipc
  1152  0322  2B27               	goto	l479
  1153  0323  3007               	movlw	7
  1154  0324  00A6               	movwf	??_utoa
  1155  0325  0826               	movf	??_utoa,w
  1156  0326  07A9               	addwf	utoa@c,f
  1157  0327                     l479:	
  1158  0327  3030               	movlw	48
  1159  0328  00A6               	movwf	??_utoa
  1160  0329  0826               	movf	??_utoa,w
  1161  032A  07A9               	addwf	utoa@c,f
  1162  032B  0829               	movf	utoa@c,w
  1163  032C  00A6               	movwf	??_utoa
  1164  032D  082A               	movf	utoa@buf,w
  1165  032E  0084               	movwf	4
  1166  032F  0826               	movf	??_utoa,w
  1167  0330  1383               	bcf	3,7	;select IRP bank0
  1168  0331  0080               	movwf	0
  1169  0332  3001               	movlw	1
  1170  0333  02AA               	subwf	utoa@buf,f
  1171  0334  0822               	movf	utoa@val,w
  1172  0335  0423               	iorwf	utoa@val+1,w
  1173  0336  1D03               	btfss	3,2
  1174  0337  2B03               	goto	l1004
  1175                           
  1176                           ;	Return value of _utoa is never used
  1177  0338  3001               	movlw	1
  1178  0339  00A6               	movwf	??_utoa
  1179  033A  0826               	movf	??_utoa,w
  1180  033B  07AA               	addwf	utoa@buf,f
  1181  033C  0008               	return
  1182  033D                     __end_of_utoa:	
  1183                           
  1184                           	psect	text5
  1185  01A1                     __ptext5:	
  1186 ;; *************** function ___lwmod *****************
  1187 ;; Defined at:
  1188 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  1189 ;; Parameters:    Size  Location     Type
  1190 ;;  divisor         2   14[BANK0 ] unsigned int 
  1191 ;;  dividend        2   16[BANK0 ] unsigned int 
  1192 ;; Auto vars:     Size  Location     Type
  1193 ;;  counter         1   19[BANK0 ] unsigned char 
  1194 ;; Return value:  Size  Location     Type
  1195 ;;                  2   14[BANK0 ] unsigned int 
  1196 ;; Registers used:
  1197 ;;		wreg, status,2, status,0
  1198 ;; Tracked objects:
  1199 ;;		On entry : 0/0
  1200 ;;		On exit  : 0/0
  1201 ;;		Unchanged: 0/0
  1202 ;; Data sizes:     COMMON   BANK0
  1203 ;;      Params:         0       4
  1204 ;;      Locals:         0       1
  1205 ;;      Temps:          0       1
  1206 ;;      Totals:         0       6
  1207 ;;Total ram usage:        6 bytes
  1208 ;; Hardware stack levels used:    1
  1209 ;; This function calls:
  1210 ;;		Nothing
  1211 ;; This function is called by:
  1212 ;;		_main
  1213 ;;		_utoa
  1214 ;; This function uses a non-reentrant model
  1215 ;;
  1216                           
  1217                           
  1218                           ;psect for function ___lwmod
  1219  01A1                     ___lwmod:	
  1220                           
  1221                           ;incstack = 0
  1222                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1223  01A1  1283               	bcf	3,5	;RP0=0, select bank0
  1224  01A2  081A               	movf	___lwmod@divisor,w
  1225  01A3  041B               	iorwf	___lwmod@divisor+1,w
  1226  01A4  1903               	btfsc	3,2
  1227  01A5  29CF               	goto	l970
  1228  01A6  019F               	clrf	___lwmod@counter
  1229  01A7  0A9F               	incf	___lwmod@counter,f
  1230  01A8                     l960:	
  1231  01A8  1B9B               	btfsc	___lwmod@divisor+1,7
  1232  01A9  29B6               	goto	l962
  1233  01AA  3001               	movlw	1
  1234  01AB                     u585:	
  1235  01AB  1003               	clrc
  1236  01AC  0D9A               	rlf	___lwmod@divisor,f
  1237  01AD  0D9B               	rlf	___lwmod@divisor+1,f
  1238  01AE  3EFF               	addlw	-1
  1239  01AF  1D03               	skipz
  1240  01B0  29AB               	goto	u585
  1241  01B1  3001               	movlw	1
  1242  01B2  009E               	movwf	??___lwmod
  1243  01B3  081E               	movf	??___lwmod,w
  1244  01B4  079F               	addwf	___lwmod@counter,f
  1245  01B5  29A8               	goto	l960
  1246  01B6                     l962:	
  1247  01B6  081B               	movf	___lwmod@divisor+1,w
  1248  01B7  021D               	subwf	___lwmod@dividend+1,w
  1249  01B8  1D03               	skipz
  1250  01B9  29BC               	goto	u605
  1251  01BA  081A               	movf	___lwmod@divisor,w
  1252  01BB  021C               	subwf	___lwmod@dividend,w
  1253  01BC                     u605:	
  1254  01BC  1C03               	skipc
  1255  01BD  29C4               	goto	l966
  1256  01BE  081A               	movf	___lwmod@divisor,w
  1257  01BF  029C               	subwf	___lwmod@dividend,f
  1258  01C0  081B               	movf	___lwmod@divisor+1,w
  1259  01C1  1C03               	skipc
  1260  01C2  039D               	decf	___lwmod@dividend+1,f
  1261  01C3  029D               	subwf	___lwmod@dividend+1,f
  1262  01C4                     l966:	
  1263  01C4  3001               	movlw	1
  1264  01C5                     u615:	
  1265  01C5  1003               	clrc
  1266  01C6  0C9B               	rrf	___lwmod@divisor+1,f
  1267  01C7  0C9A               	rrf	___lwmod@divisor,f
  1268  01C8  3EFF               	addlw	-1
  1269  01C9  1D03               	skipz
  1270  01CA  29C5               	goto	u615
  1271  01CB  3001               	movlw	1
  1272  01CC  029F               	subwf	___lwmod@counter,f
  1273  01CD  1D03               	btfss	3,2
  1274  01CE  29B6               	goto	l962
  1275  01CF                     l970:	
  1276  01CF  081D               	movf	___lwmod@dividend+1,w
  1277  01D0  009B               	movwf	?___lwmod+1
  1278  01D1  081C               	movf	___lwmod@dividend,w
  1279  01D2  009A               	movwf	?___lwmod
  1280  01D3  0008               	return
  1281  01D4                     __end_of___lwmod:	
  1282                           
  1283                           	psect	text6
  1284  0208                     __ptext6:	
  1285 ;; *************** function ___lwdiv *****************
  1286 ;; Defined at:
  1287 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  1288 ;; Parameters:    Size  Location     Type
  1289 ;;  divisor         2   14[BANK0 ] unsigned int 
  1290 ;;  dividend        2   16[BANK0 ] unsigned int 
  1291 ;; Auto vars:     Size  Location     Type
  1292 ;;  quotient        2   19[BANK0 ] unsigned int 
  1293 ;;  counter         1   21[BANK0 ] unsigned char 
  1294 ;; Return value:  Size  Location     Type
  1295 ;;                  2   14[BANK0 ] unsigned int 
  1296 ;; Registers used:
  1297 ;;		wreg, status,2, status,0
  1298 ;; Tracked objects:
  1299 ;;		On entry : 0/0
  1300 ;;		On exit  : 0/0
  1301 ;;		Unchanged: 0/0
  1302 ;; Data sizes:     COMMON   BANK0
  1303 ;;      Params:         0       4
  1304 ;;      Locals:         0       3
  1305 ;;      Temps:          0       1
  1306 ;;      Totals:         0       8
  1307 ;;Total ram usage:        8 bytes
  1308 ;; Hardware stack levels used:    1
  1309 ;; This function calls:
  1310 ;;		Nothing
  1311 ;; This function is called by:
  1312 ;;		_main
  1313 ;;		_utoa
  1314 ;; This function uses a non-reentrant model
  1315 ;;
  1316                           
  1317                           
  1318                           ;psect for function ___lwdiv
  1319  0208                     ___lwdiv:	
  1320                           
  1321                           ;incstack = 0
  1322                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1323  0208  1283               	bcf	3,5	;RP0=0, select bank0
  1324  0209  019F               	clrf	___lwdiv@quotient
  1325  020A  01A0               	clrf	___lwdiv@quotient+1
  1326  020B  081A               	movf	___lwdiv@divisor,w
  1327  020C  041B               	iorwf	___lwdiv@divisor+1,w
  1328  020D  1903               	btfsc	3,2
  1329  020E  2A40               	goto	l948
  1330  020F  01A1               	clrf	___lwdiv@counter
  1331  0210  0AA1               	incf	___lwdiv@counter,f
  1332  0211                     l936:	
  1333  0211  1B9B               	btfsc	___lwdiv@divisor+1,7
  1334  0212  2A1F               	goto	l938
  1335  0213  3001               	movlw	1
  1336  0214                     u515:	
  1337  0214  1003               	clrc
  1338  0215  0D9A               	rlf	___lwdiv@divisor,f
  1339  0216  0D9B               	rlf	___lwdiv@divisor+1,f
  1340  0217  3EFF               	addlw	-1
  1341  0218  1D03               	skipz
  1342  0219  2A14               	goto	u515
  1343  021A  3001               	movlw	1
  1344  021B  009E               	movwf	??___lwdiv
  1345  021C  081E               	movf	??___lwdiv,w
  1346  021D  07A1               	addwf	___lwdiv@counter,f
  1347  021E  2A11               	goto	l936
  1348  021F                     l938:	
  1349  021F  3001               	movlw	1
  1350  0220                     u535:	
  1351  0220  1003               	clrc
  1352  0221  0D9F               	rlf	___lwdiv@quotient,f
  1353  0222  0DA0               	rlf	___lwdiv@quotient+1,f
  1354  0223  3EFF               	addlw	-1
  1355  0224  1D03               	skipz
  1356  0225  2A20               	goto	u535
  1357  0226  081B               	movf	___lwdiv@divisor+1,w
  1358  0227  021D               	subwf	___lwdiv@dividend+1,w
  1359  0228  1D03               	skipz
  1360  0229  2A2C               	goto	u545
  1361  022A  081A               	movf	___lwdiv@divisor,w
  1362  022B  021C               	subwf	___lwdiv@dividend,w
  1363  022C                     u545:	
  1364  022C  1C03               	skipc
  1365  022D  2A35               	goto	l944
  1366  022E  081A               	movf	___lwdiv@divisor,w
  1367  022F  029C               	subwf	___lwdiv@dividend,f
  1368  0230  081B               	movf	___lwdiv@divisor+1,w
  1369  0231  1C03               	skipc
  1370  0232  039D               	decf	___lwdiv@dividend+1,f
  1371  0233  029D               	subwf	___lwdiv@dividend+1,f
  1372  0234  141F               	bsf	___lwdiv@quotient,0
  1373  0235                     l944:	
  1374  0235  3001               	movlw	1
  1375  0236                     u555:	
  1376  0236  1003               	clrc
  1377  0237  0C9B               	rrf	___lwdiv@divisor+1,f
  1378  0238  0C9A               	rrf	___lwdiv@divisor,f
  1379  0239  3EFF               	addlw	-1
  1380  023A  1D03               	skipz
  1381  023B  2A36               	goto	u555
  1382  023C  3001               	movlw	1
  1383  023D  02A1               	subwf	___lwdiv@counter,f
  1384  023E  1D03               	btfss	3,2
  1385  023F  2A1F               	goto	l938
  1386  0240                     l948:	
  1387  0240  0820               	movf	___lwdiv@quotient+1,w
  1388  0241  009B               	movwf	?___lwdiv+1
  1389  0242  081F               	movf	___lwdiv@quotient,w
  1390  0243  009A               	movwf	?___lwdiv
  1391  0244  0008               	return
  1392  0245                     __end_of___lwdiv:	
  1393                           
  1394                           	psect	text7
  1395  0170                     __ptext7:	
  1396 ;; *************** function _Lcd_Write_String *****************
  1397 ;; Defined at:
  1398 ;;		line 110 in file "lcd.c"
  1399 ;; Parameters:    Size  Location     Type
  1400 ;;  a               2    5[BANK0 ] PTR unsigned char 
  1401 ;;		 -> Lcd_Write_Int@temp(16), STR_1(9), 
  1402 ;; Auto vars:     Size  Location     Type
  1403 ;;  i               2   10[BANK0 ] int 
  1404 ;; Return value:  Size  Location     Type
  1405 ;;		None               void
  1406 ;; Registers used:
  1407 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1408 ;; Tracked objects:
  1409 ;;		On entry : 0/0
  1410 ;;		On exit  : 0/0
  1411 ;;		Unchanged: 0/0
  1412 ;; Data sizes:     COMMON   BANK0
  1413 ;;      Params:         0       2
  1414 ;;      Locals:         0       2
  1415 ;;      Temps:          0       3
  1416 ;;      Totals:         0       7
  1417 ;;Total ram usage:        7 bytes
  1418 ;; Hardware stack levels used:    1
  1419 ;; Hardware stack levels required when called:    2
  1420 ;; This function calls:
  1421 ;;		_Lcd_Write_Char
  1422 ;; This function is called by:
  1423 ;;		_main
  1424 ;;		_Lcd_Write_Int
  1425 ;; This function uses a non-reentrant model
  1426 ;;
  1427                           
  1428                           
  1429                           ;psect for function _Lcd_Write_String
  1430  0170                     _Lcd_Write_String:	
  1431                           
  1432                           ;lcd.c: 112: int i;
  1433                           ;lcd.c: 113: for(i=0;a[i]!='\0';i++)
  1434                           
  1435                           ;incstack = 0
  1436                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1437  0170  1283               	bcf	3,5	;RP0=0, select bank0
  1438  0171  0196               	clrf	Lcd_Write_String@i
  1439  0172  0197               	clrf	Lcd_Write_String@i+1
  1440  0173                     l980:	
  1441  0173  0816               	movf	Lcd_Write_String@i,w
  1442  0174  0711               	addwf	Lcd_Write_String@a,w
  1443  0175  0094               	movwf	??_Lcd_Write_String+1
  1444  0176  0812               	movf	Lcd_Write_String@a+1,w
  1445  0177  0093               	movwf	??_Lcd_Write_String
  1446  0178  1803               	skipnc
  1447  0179  0A93               	incf	??_Lcd_Write_String,f
  1448  017A  1B96               	btfsc	Lcd_Write_String@i,7
  1449  017B  0393               	decf	??_Lcd_Write_String,f
  1450  017C  1283               	bcf	3,5	;RP0=0, select bank0
  1451  017D  0813               	movf	??_Lcd_Write_String,w
  1452  017E  0095               	movwf	??_Lcd_Write_String+2
  1453  017F  0815               	movf	??_Lcd_Write_String+2,w
  1454  0180  00CF               	movwf	79
  1455  0181  0814               	movf	??_Lcd_Write_String+1,w
  1456  0182  0084               	movwf	4
  1457  0183  2001               	fcall	stringtab
  1458  0184  3A00               	xorlw	0
  1459  0185  1903               	btfsc	3,2
  1460  0186  0008               	return
  1461                           
  1462                           ;lcd.c: 114: {
  1463                           ;lcd.c: 115: Lcd_Write_Char(a[i]);
  1464  0187  0816               	movf	Lcd_Write_String@i,w
  1465  0188  0711               	addwf	Lcd_Write_String@a,w
  1466  0189  0094               	movwf	??_Lcd_Write_String+1
  1467  018A  0812               	movf	Lcd_Write_String@a+1,w
  1468  018B  0093               	movwf	??_Lcd_Write_String
  1469  018C  1803               	skipnc
  1470  018D  0A93               	incf	??_Lcd_Write_String,f
  1471  018E  1B96               	btfsc	Lcd_Write_String@i,7
  1472  018F  0393               	decf	??_Lcd_Write_String,f
  1473  0190  1283               	bcf	3,5	;RP0=0, select bank0
  1474  0191  0813               	movf	??_Lcd_Write_String,w
  1475  0192  0095               	movwf	??_Lcd_Write_String+2
  1476  0193  0815               	movf	??_Lcd_Write_String+2,w
  1477  0194  00CF               	movwf	79
  1478  0195  0814               	movf	??_Lcd_Write_String+1,w
  1479  0196  0084               	movwf	4
  1480  0197  2001               	fcall	stringtab
  1481  0198  2146               	fcall	_Lcd_Write_Char
  1482  0199  3001               	movlw	1
  1483  019A  1283               	bcf	3,5	;RP0=0, select bank0
  1484  019B  0796               	addwf	Lcd_Write_String@i,f
  1485  019C  1803               	skipnc
  1486  019D  0A97               	incf	Lcd_Write_String@i+1,f
  1487  019E  3000               	movlw	0
  1488  019F  0797               	addwf	Lcd_Write_String@i+1,f
  1489  01A0  2973               	goto	l980
  1490  01A1                     __end_of_Lcd_Write_String:	
  1491                           
  1492                           	psect	text8
  1493  0146                     __ptext8:	
  1494 ;; *************** function _Lcd_Write_Char *****************
  1495 ;; Defined at:
  1496 ;;		line 93 in file "lcd.c"
  1497 ;; Parameters:    Size  Location     Type
  1498 ;;  a               1    wreg     unsigned char 
  1499 ;; Auto vars:     Size  Location     Type
  1500 ;;  a               1    4[BANK0 ] unsigned char 
  1501 ;;  y               1    3[BANK0 ] unsigned char 
  1502 ;;  temp            1    2[BANK0 ] unsigned char 
  1503 ;; Return value:  Size  Location     Type
  1504 ;;		None               void
  1505 ;; Registers used:
  1506 ;;		wreg, status,2, status,0, pclath, cstack
  1507 ;; Tracked objects:
  1508 ;;		On entry : 0/0
  1509 ;;		On exit  : 0/0
  1510 ;;		Unchanged: 0/0
  1511 ;; Data sizes:     COMMON   BANK0
  1512 ;;      Params:         0       0
  1513 ;;      Locals:         0       3
  1514 ;;      Temps:          0       1
  1515 ;;      Totals:         0       4
  1516 ;;Total ram usage:        4 bytes
  1517 ;; Hardware stack levels used:    1
  1518 ;; Hardware stack levels required when called:    1
  1519 ;; This function calls:
  1520 ;;		_Lcd_Port
  1521 ;; This function is called by:
  1522 ;;		_main
  1523 ;;		_Lcd_Write_String
  1524 ;; This function uses a non-reentrant model
  1525 ;;
  1526                           
  1527                           
  1528                           ;psect for function _Lcd_Write_Char
  1529  0146                     _Lcd_Write_Char:	
  1530                           
  1531                           ;incstack = 0
  1532                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  1533                           ;Lcd_Write_Char@a stored from wreg
  1534  0146  1283               	bcf	3,5	;RP0=0, select bank0
  1535  0147  0090               	movwf	Lcd_Write_Char@a
  1536                           
  1537                           ;lcd.c: 95: char temp,y;
  1538                           ;lcd.c: 96: temp = a&0x0F;
  1539  0148  0810               	movf	Lcd_Write_Char@a,w
  1540  0149  390F               	andlw	15
  1541  014A  008D               	movwf	??_Lcd_Write_Char
  1542  014B  080D               	movf	??_Lcd_Write_Char,w
  1543  014C  008E               	movwf	Lcd_Write_Char@temp
  1544                           
  1545                           ;lcd.c: 97: y = a&0xF0;
  1546  014D  0810               	movf	Lcd_Write_Char@a,w
  1547  014E  39F0               	andlw	240
  1548  014F  008D               	movwf	??_Lcd_Write_Char
  1549  0150  080D               	movf	??_Lcd_Write_Char,w
  1550  0151  008F               	movwf	Lcd_Write_Char@y
  1551                           
  1552                           ;lcd.c: 98: RB4 = 1;
  1553  0152  1606               	bsf	6,4	;volatile
  1554                           
  1555                           ;lcd.c: 99: Lcd_Port(y>>4);
  1556  0153  080F               	movf	Lcd_Write_Char@y,w
  1557  0154  008D               	movwf	??_Lcd_Write_Char
  1558  0155  3004               	movlw	4
  1559  0156                     u495:	
  1560  0156  1003               	clrc
  1561  0157  0C8D               	rrf	??_Lcd_Write_Char,f
  1562  0158  3EFF               	addlw	-1
  1563  0159  1D03               	skipz
  1564  015A  2956               	goto	u495
  1565  015B  080D               	movf	??_Lcd_Write_Char,w
  1566  015C  210D               	fcall	_Lcd_Port
  1567                           
  1568                           ;lcd.c: 100: RB6 = 1;
  1569  015D  1283               	bcf	3,5	;RP0=0, select bank0
  1570  015E  1706               	bsf	6,6	;volatile
  1571                           
  1572                           ;lcd.c: 101: _delay((unsigned long)((40)*(4000000/4000000.0)));
  1573  015F  300D               	movlw	13
  1574  0160  008D               	movwf	??_Lcd_Write_Char
  1575  0161                     u977:	
  1576  0161  0B8D               	decfsz	??_Lcd_Write_Char,f
  1577  0162  2961               	goto	u977
  1578                           
  1579                           ;lcd.c: 102: RB6 = 0;
  1580  0163  1283               	bcf	3,5	;RP0=0, select bank0
  1581  0164  1306               	bcf	6,6	;volatile
  1582                           
  1583                           ;lcd.c: 103: Lcd_Port(temp);
  1584  0165  080E               	movf	Lcd_Write_Char@temp,w
  1585  0166  210D               	fcall	_Lcd_Port
  1586                           
  1587                           ;lcd.c: 104: RB6 = 1;
  1588  0167  1283               	bcf	3,5	;RP0=0, select bank0
  1589  0168  1706               	bsf	6,6	;volatile
  1590                           
  1591                           ;lcd.c: 105: _delay((unsigned long)((40)*(4000000/4000000.0)));
  1592  0169  300D               	movlw	13
  1593  016A  008D               	movwf	??_Lcd_Write_Char
  1594  016B                     u987:	
  1595  016B  0B8D               	decfsz	??_Lcd_Write_Char,f
  1596  016C  296B               	goto	u987
  1597                           
  1598                           ;lcd.c: 106: RB6 = 0;
  1599  016D  1283               	bcf	3,5	;RP0=0, select bank0
  1600  016E  1306               	bcf	6,6	;volatile
  1601  016F  0008               	return
  1602  0170                     __end_of_Lcd_Write_Char:	
  1603                           
  1604                           	psect	text9
  1605  0245                     __ptext9:	
  1606 ;; *************** function _Lcd_Set_Cursor *****************
  1607 ;; Defined at:
  1608 ;;		line 51 in file "lcd.c"
  1609 ;; Parameters:    Size  Location     Type
  1610 ;;  a               1    wreg     unsigned char 
  1611 ;;  b               1    4[BANK0 ] unsigned char 
  1612 ;; Auto vars:     Size  Location     Type
  1613 ;;  a               1    7[BANK0 ] unsigned char 
  1614 ;;  temp            1   10[BANK0 ] unsigned char 
  1615 ;;  y               1    9[BANK0 ] unsigned char 
  1616 ;;  z               1    8[BANK0 ] unsigned char 
  1617 ;; Return value:  Size  Location     Type
  1618 ;;		None               void
  1619 ;; Registers used:
  1620 ;;		wreg, status,2, status,0, pclath, cstack
  1621 ;; Tracked objects:
  1622 ;;		On entry : 0/0
  1623 ;;		On exit  : 0/0
  1624 ;;		Unchanged: 0/0
  1625 ;; Data sizes:     COMMON   BANK0
  1626 ;;      Params:         0       1
  1627 ;;      Locals:         0       4
  1628 ;;      Temps:          0       2
  1629 ;;      Totals:         0       7
  1630 ;;Total ram usage:        7 bytes
  1631 ;; Hardware stack levels used:    1
  1632 ;; Hardware stack levels required when called:    2
  1633 ;; This function calls:
  1634 ;;		_Lcd_Cmd
  1635 ;; This function is called by:
  1636 ;;		_main
  1637 ;; This function uses a non-reentrant model
  1638 ;;
  1639                           
  1640                           
  1641                           ;psect for function _Lcd_Set_Cursor
  1642  0245                     _Lcd_Set_Cursor:	
  1643                           
  1644                           ;incstack = 0
  1645                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  1646                           ;Lcd_Set_Cursor@a stored from wreg
  1647  0245  1283               	bcf	3,5	;RP0=0, select bank0
  1648  0246  0093               	movwf	Lcd_Set_Cursor@a
  1649                           
  1650                           ;lcd.c: 53: char temp,z,y;
  1651                           ;lcd.c: 54: if(a == 1)
  1652  0247  0313               	decf	Lcd_Set_Cursor@a,w
  1653  0248  1D03               	btfss	3,2
  1654  0249  2A66               	goto	l1046
  1655                           
  1656                           ;lcd.c: 55: {
  1657                           ;lcd.c: 56: temp = (char) (0x80 + b - 1);
  1658  024A  0810               	movf	Lcd_Set_Cursor@b,w
  1659  024B  3E7F               	addlw	127
  1660  024C  0091               	movwf	??_Lcd_Set_Cursor
  1661  024D  0811               	movf	??_Lcd_Set_Cursor,w
  1662  024E  0096               	movwf	Lcd_Set_Cursor@temp
  1663                           
  1664                           ;lcd.c: 57: z = temp>>4;
  1665  024F  0816               	movf	Lcd_Set_Cursor@temp,w
  1666  0250  0091               	movwf	??_Lcd_Set_Cursor
  1667  0251  3004               	movlw	4
  1668  0252                     u705:	
  1669  0252  1003               	clrc
  1670  0253  0C91               	rrf	??_Lcd_Set_Cursor,f
  1671  0254  3EFF               	addlw	-1
  1672  0255  1D03               	skipz
  1673  0256  2A52               	goto	u705
  1674  0257  0811               	movf	??_Lcd_Set_Cursor,w
  1675  0258  0092               	movwf	??_Lcd_Set_Cursor+1
  1676  0259  0812               	movf	??_Lcd_Set_Cursor+1,w
  1677  025A  0094               	movwf	Lcd_Set_Cursor@z
  1678                           
  1679                           ;lcd.c: 58: y = temp & 0x0F;
  1680  025B  0816               	movf	Lcd_Set_Cursor@temp,w
  1681  025C  390F               	andlw	15
  1682  025D  0091               	movwf	??_Lcd_Set_Cursor
  1683  025E  0811               	movf	??_Lcd_Set_Cursor,w
  1684  025F  0095               	movwf	Lcd_Set_Cursor@y
  1685                           
  1686                           ;lcd.c: 59: Lcd_Cmd(z);
  1687  0260  0814               	movf	Lcd_Set_Cursor@z,w
  1688  0261  20FA               	fcall	_Lcd_Cmd
  1689                           
  1690                           ;lcd.c: 60: Lcd_Cmd(y);
  1691  0262  1283               	bcf	3,5	;RP0=0, select bank0
  1692  0263  0815               	movf	Lcd_Set_Cursor@y,w
  1693  0264  20FA               	fcall	_Lcd_Cmd
  1694                           
  1695                           ;lcd.c: 61: }
  1696  0265  0008               	return
  1697  0266                     l1046:	
  1698                           
  1699                           ;lcd.c: 62: else if(a == 2)
  1700  0266  3002               	movlw	2
  1701  0267  1283               	bcf	3,5	;RP0=0, select bank0
  1702  0268  0613               	xorwf	Lcd_Set_Cursor@a,w
  1703  0269  1D03               	btfss	3,2
  1704  026A  0008               	return
  1705                           
  1706                           ;lcd.c: 63: {
  1707                           ;lcd.c: 64: temp = 0xC0 + b - 1;
  1708  026B  0810               	movf	Lcd_Set_Cursor@b,w
  1709  026C  3EBF               	addlw	191
  1710  026D  0091               	movwf	??_Lcd_Set_Cursor
  1711  026E  0811               	movf	??_Lcd_Set_Cursor,w
  1712  026F  0096               	movwf	Lcd_Set_Cursor@temp
  1713                           
  1714                           ;lcd.c: 65: z = temp>>4;
  1715  0270  0816               	movf	Lcd_Set_Cursor@temp,w
  1716  0271  0091               	movwf	??_Lcd_Set_Cursor
  1717  0272  3004               	movlw	4
  1718  0273                     u725:	
  1719  0273  1003               	clrc
  1720  0274  0C91               	rrf	??_Lcd_Set_Cursor,f
  1721  0275  3EFF               	addlw	-1
  1722  0276  1D03               	skipz
  1723  0277  2A73               	goto	u725
  1724  0278  0811               	movf	??_Lcd_Set_Cursor,w
  1725  0279  0092               	movwf	??_Lcd_Set_Cursor+1
  1726  027A  0812               	movf	??_Lcd_Set_Cursor+1,w
  1727  027B  0094               	movwf	Lcd_Set_Cursor@z
  1728                           
  1729                           ;lcd.c: 66: y = temp & 0x0F;
  1730  027C  0816               	movf	Lcd_Set_Cursor@temp,w
  1731  027D  390F               	andlw	15
  1732  027E  0091               	movwf	??_Lcd_Set_Cursor
  1733  027F  0811               	movf	??_Lcd_Set_Cursor,w
  1734  0280  0095               	movwf	Lcd_Set_Cursor@y
  1735                           
  1736                           ;lcd.c: 67: Lcd_Cmd(z);
  1737  0281  0814               	movf	Lcd_Set_Cursor@z,w
  1738  0282  20FA               	fcall	_Lcd_Cmd
  1739                           
  1740                           ;lcd.c: 68: Lcd_Cmd(y);
  1741  0283  1283               	bcf	3,5	;RP0=0, select bank0
  1742  0284  0815               	movf	Lcd_Set_Cursor@y,w
  1743  0285  20FA               	fcall	_Lcd_Cmd
  1744  0286  0008               	return
  1745  0287                     __end_of_Lcd_Set_Cursor:	
  1746                           
  1747                           	psect	text10
  1748  01D4                     __ptext10:	
  1749 ;; *************** function _Lcd_Init *****************
  1750 ;; Defined at:
  1751 ;;		line 73 in file "lcd.c"
  1752 ;; Parameters:    Size  Location     Type
  1753 ;;		None
  1754 ;; Auto vars:     Size  Location     Type
  1755 ;;		None
  1756 ;; Return value:  Size  Location     Type
  1757 ;;		None               void
  1758 ;; Registers used:
  1759 ;;		wreg, status,2, status,0, pclath, cstack
  1760 ;; Tracked objects:
  1761 ;;		On entry : 0/0
  1762 ;;		On exit  : 0/0
  1763 ;;		Unchanged: 0/0
  1764 ;; Data sizes:     COMMON   BANK0
  1765 ;;      Params:         0       0
  1766 ;;      Locals:         0       0
  1767 ;;      Temps:          0       2
  1768 ;;      Totals:         0       2
  1769 ;;Total ram usage:        2 bytes
  1770 ;; Hardware stack levels used:    1
  1771 ;; Hardware stack levels required when called:    2
  1772 ;; This function calls:
  1773 ;;		_Lcd_Cmd
  1774 ;;		_Lcd_Port
  1775 ;; This function is called by:
  1776 ;;		_main
  1777 ;; This function uses a non-reentrant model
  1778 ;;
  1779                           
  1780                           
  1781                           ;psect for function _Lcd_Init
  1782  01D4                     _Lcd_Init:	
  1783                           
  1784                           ;lcd.c: 75: Lcd_Port(0x00);
  1785                           
  1786                           ;incstack = 0
  1787                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  1788  01D4  3000               	movlw	0
  1789  01D5  210D               	fcall	_Lcd_Port
  1790                           
  1791                           ;lcd.c: 76: _delay((unsigned long)((20)*(4000000/4000.0)));
  1792  01D6  301A               	movlw	26
  1793  01D7  1283               	bcf	3,5	;RP0=0, select bank0
  1794  01D8  0091               	movwf	??_Lcd_Init+1
  1795  01D9  30F8               	movlw	248
  1796  01DA  0090               	movwf	??_Lcd_Init
  1797  01DB                     u997:	
  1798  01DB  0B90               	decfsz	??_Lcd_Init,f
  1799  01DC  29DB               	goto	u997
  1800  01DD  0B91               	decfsz	??_Lcd_Init+1,f
  1801  01DE  29DB               	goto	u997
  1802  01DF  0000               	nop
  1803                           
  1804                           ;lcd.c: 77: Lcd_Cmd(0x03);
  1805  01E0  3003               	movlw	3
  1806  01E1  20FA               	fcall	_Lcd_Cmd
  1807                           
  1808                           ;lcd.c: 78: _delay((unsigned long)((5)*(4000000/4000.0)));
  1809  01E2  3007               	movlw	7
  1810  01E3  1283               	bcf	3,5	;RP0=0, select bank0
  1811  01E4  0091               	movwf	??_Lcd_Init+1
  1812  01E5  307D               	movlw	125
  1813  01E6  0090               	movwf	??_Lcd_Init
  1814  01E7                     u1007:	
  1815  01E7  0B90               	decfsz	??_Lcd_Init,f
  1816  01E8  29E7               	goto	u1007
  1817  01E9  0B91               	decfsz	??_Lcd_Init+1,f
  1818  01EA  29E7               	goto	u1007
  1819                           
  1820                           ;lcd.c: 79: Lcd_Cmd(0x03);
  1821  01EB  3003               	movlw	3
  1822  01EC  20FA               	fcall	_Lcd_Cmd
  1823                           
  1824                           ;lcd.c: 80: _delay((unsigned long)((11)*(4000000/4000.0)));
  1825  01ED  300F               	movlw	15
  1826  01EE  1283               	bcf	3,5	;RP0=0, select bank0
  1827  01EF  0091               	movwf	??_Lcd_Init+1
  1828  01F0  3047               	movlw	71
  1829  01F1  0090               	movwf	??_Lcd_Init
  1830  01F2                     u1017:	
  1831  01F2  0B90               	decfsz	??_Lcd_Init,f
  1832  01F3  29F2               	goto	u1017
  1833  01F4  0B91               	decfsz	??_Lcd_Init+1,f
  1834  01F5  29F2               	goto	u1017
  1835  01F6  29F7               	nop2
  1836                           
  1837                           ;lcd.c: 81: Lcd_Cmd(0x03);
  1838  01F7  3003               	movlw	3
  1839  01F8  20FA               	fcall	_Lcd_Cmd
  1840                           
  1841                           ;lcd.c: 83: Lcd_Cmd(0x02);
  1842  01F9  3002               	movlw	2
  1843  01FA  20FA               	fcall	_Lcd_Cmd
  1844                           
  1845                           ;lcd.c: 84: Lcd_Cmd(0x02);
  1846  01FB  3002               	movlw	2
  1847  01FC  20FA               	fcall	_Lcd_Cmd
  1848                           
  1849                           ;lcd.c: 85: Lcd_Cmd(0x08);
  1850  01FD  3008               	movlw	8
  1851  01FE  20FA               	fcall	_Lcd_Cmd
  1852                           
  1853                           ;lcd.c: 86: Lcd_Cmd(0x00);
  1854  01FF  3000               	movlw	0
  1855  0200  20FA               	fcall	_Lcd_Cmd
  1856                           
  1857                           ;lcd.c: 87: Lcd_Cmd(0x0C);
  1858  0201  300C               	movlw	12
  1859  0202  20FA               	fcall	_Lcd_Cmd
  1860                           
  1861                           ;lcd.c: 88: Lcd_Cmd(0x00);
  1862  0203  3000               	movlw	0
  1863  0204  20FA               	fcall	_Lcd_Cmd
  1864                           
  1865                           ;lcd.c: 89: Lcd_Cmd(0x06);
  1866  0205  3006               	movlw	6
  1867  0206  20FA               	fcall	_Lcd_Cmd
  1868  0207  0008               	return
  1869  0208                     __end_of_Lcd_Init:	
  1870                           
  1871                           	psect	text11
  1872  00D9                     __ptext11:	
  1873 ;; *************** function _Lcd_Clear *****************
  1874 ;; Defined at:
  1875 ;;		line 43 in file "lcd.c"
  1876 ;; Parameters:    Size  Location     Type
  1877 ;;		None
  1878 ;; Auto vars:     Size  Location     Type
  1879 ;;		None
  1880 ;; Return value:  Size  Location     Type
  1881 ;;		None               void
  1882 ;; Registers used:
  1883 ;;		wreg, status,2, status,0, pclath, cstack
  1884 ;; Tracked objects:
  1885 ;;		On entry : 0/0
  1886 ;;		On exit  : 0/0
  1887 ;;		Unchanged: 0/0
  1888 ;; Data sizes:     COMMON   BANK0
  1889 ;;      Params:         0       0
  1890 ;;      Locals:         0       0
  1891 ;;      Temps:          0       2
  1892 ;;      Totals:         0       2
  1893 ;;Total ram usage:        2 bytes
  1894 ;; Hardware stack levels used:    1
  1895 ;; Hardware stack levels required when called:    2
  1896 ;; This function calls:
  1897 ;;		_Lcd_Cmd
  1898 ;; This function is called by:
  1899 ;;		_main
  1900 ;; This function uses a non-reentrant model
  1901 ;;
  1902                           
  1903                           
  1904                           ;psect for function _Lcd_Clear
  1905  00D9                     _Lcd_Clear:	
  1906                           
  1907                           ;lcd.c: 45: Lcd_Cmd(0x00);
  1908                           
  1909                           ;incstack = 0
  1910                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  1911  00D9  3000               	movlw	0
  1912  00DA  20FA               	fcall	_Lcd_Cmd
  1913                           
  1914                           ;lcd.c: 46: Lcd_Cmd(0x01);
  1915  00DB  3001               	movlw	1
  1916  00DC  20FA               	fcall	_Lcd_Cmd
  1917                           
  1918                           ;lcd.c: 47: _delay((unsigned long)((2)*(4000000/4000.0)));
  1919  00DD  3003               	movlw	3
  1920  00DE  1283               	bcf	3,5	;RP0=0, select bank0
  1921  00DF  0091               	movwf	??_Lcd_Clear+1
  1922  00E0  3097               	movlw	151
  1923  00E1  0090               	movwf	??_Lcd_Clear
  1924  00E2                     u1027:	
  1925  00E2  0B90               	decfsz	??_Lcd_Clear,f
  1926  00E3  28E2               	goto	u1027
  1927  00E4  0B91               	decfsz	??_Lcd_Clear+1,f
  1928  00E5  28E2               	goto	u1027
  1929  00E6  28E7               	nop2
  1930  00E7  0008               	return
  1931  00E8                     __end_of_Lcd_Clear:	
  1932                           
  1933                           	psect	text12
  1934  00FA                     __ptext12:	
  1935 ;; *************** function _Lcd_Cmd *****************
  1936 ;; Defined at:
  1937 ;;		line 30 in file "lcd.c"
  1938 ;; Parameters:    Size  Location     Type
  1939 ;;  a               1    wreg     unsigned char 
  1940 ;; Auto vars:     Size  Location     Type
  1941 ;;  a               1    3[BANK0 ] unsigned char 
  1942 ;; Return value:  Size  Location     Type
  1943 ;;		None               void
  1944 ;; Registers used:
  1945 ;;		wreg, status,2, status,0, pclath, cstack
  1946 ;; Tracked objects:
  1947 ;;		On entry : 0/0
  1948 ;;		On exit  : 0/0
  1949 ;;		Unchanged: 0/0
  1950 ;; Data sizes:     COMMON   BANK0
  1951 ;;      Params:         0       0
  1952 ;;      Locals:         0       1
  1953 ;;      Temps:          0       2
  1954 ;;      Totals:         0       3
  1955 ;;Total ram usage:        3 bytes
  1956 ;; Hardware stack levels used:    1
  1957 ;; Hardware stack levels required when called:    1
  1958 ;; This function calls:
  1959 ;;		_Lcd_Port
  1960 ;; This function is called by:
  1961 ;;		_Lcd_Clear
  1962 ;;		_Lcd_Set_Cursor
  1963 ;;		_Lcd_Init
  1964 ;;		_Lcd_Shift_Right
  1965 ;;		_Lcd_Shift_Left
  1966 ;; This function uses a non-reentrant model
  1967 ;;
  1968                           
  1969                           
  1970                           ;psect for function _Lcd_Cmd
  1971  00FA                     _Lcd_Cmd:	
  1972                           
  1973                           ;incstack = 0
  1974                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  1975                           ;Lcd_Cmd@a stored from wreg
  1976  00FA  1283               	bcf	3,5	;RP0=0, select bank0
  1977  00FB  008F               	movwf	Lcd_Cmd@a
  1978                           
  1979                           ;lcd.c: 33: RB4 = 0;
  1980  00FC  1206               	bcf	6,4	;volatile
  1981                           
  1982                           ;lcd.c: 34: Lcd_Port(a);
  1983  00FD  080F               	movf	Lcd_Cmd@a,w
  1984  00FE  210D               	fcall	_Lcd_Port
  1985                           
  1986                           ;lcd.c: 37: RB6 = 1;
  1987  00FF  1283               	bcf	3,5	;RP0=0, select bank0
  1988  0100  1706               	bsf	6,6	;volatile
  1989                           
  1990                           ;lcd.c: 38: _delay((unsigned long)((4)*(4000000/4000.0)));
  1991  0101  3006               	movlw	6
  1992  0102  008E               	movwf	??_Lcd_Cmd+1
  1993  0103  3030               	movlw	48
  1994  0104  008D               	movwf	??_Lcd_Cmd
  1995  0105                     u1037:	
  1996  0105  0B8D               	decfsz	??_Lcd_Cmd,f
  1997  0106  2905               	goto	u1037
  1998  0107  0B8E               	decfsz	??_Lcd_Cmd+1,f
  1999  0108  2905               	goto	u1037
  2000  0109  0000               	nop
  2001                           
  2002                           ;lcd.c: 39: RB6 = 0;
  2003  010A  1283               	bcf	3,5	;RP0=0, select bank0
  2004  010B  1306               	bcf	6,6	;volatile
  2005  010C  0008               	return
  2006  010D                     __end_of_Lcd_Cmd:	
  2007                           
  2008                           	psect	text13
  2009  010D                     __ptext13:	
  2010 ;; *************** function _Lcd_Port *****************
  2011 ;; Defined at:
  2012 ;;		line 6 in file "lcd.c"
  2013 ;; Parameters:    Size  Location     Type
  2014 ;;  a               1    wreg     unsigned char 
  2015 ;; Auto vars:     Size  Location     Type
  2016 ;;  a               1    0[BANK0 ] unsigned char 
  2017 ;; Return value:  Size  Location     Type
  2018 ;;		None               void
  2019 ;; Registers used:
  2020 ;;		wreg
  2021 ;; Tracked objects:
  2022 ;;		On entry : 0/0
  2023 ;;		On exit  : 0/0
  2024 ;;		Unchanged: 0/0
  2025 ;; Data sizes:     COMMON   BANK0
  2026 ;;      Params:         0       0
  2027 ;;      Locals:         0       1
  2028 ;;      Temps:          0       0
  2029 ;;      Totals:         0       1
  2030 ;;Total ram usage:        1 bytes
  2031 ;; Hardware stack levels used:    1
  2032 ;; This function calls:
  2033 ;;		Nothing
  2034 ;; This function is called by:
  2035 ;;		_Lcd_Cmd
  2036 ;;		_Lcd_Init
  2037 ;;		_Lcd_Write_Char
  2038 ;; This function uses a non-reentrant model
  2039 ;;
  2040                           
  2041                           
  2042                           ;psect for function _Lcd_Port
  2043  010D                     _Lcd_Port:	
  2044                           
  2045                           ;incstack = 0
  2046                           ; Regs used in _Lcd_Port: [wreg]
  2047                           ;Lcd_Port@a stored from wreg
  2048  010D  1283               	bcf	3,5	;RP0=0, select bank0
  2049  010E  008C               	movwf	Lcd_Port@a
  2050                           
  2051                           ;lcd.c: 8: if(a & 1)
  2052  010F  1C0C               	btfss	Lcd_Port@a,0
  2053  0110  2913               	goto	l87
  2054                           
  2055                           ;lcd.c: 9: RB0 = 1;
  2056  0111  1406               	bsf	6,0	;volatile
  2057  0112  2914               	goto	l88
  2058  0113                     l87:	
  2059                           
  2060                           ;lcd.c: 10: else
  2061                           ;lcd.c: 11: RB0 = 0;
  2062  0113  1006               	bcf	6,0	;volatile
  2063  0114                     l88:	
  2064                           
  2065                           ;lcd.c: 13: if(a & 2)
  2066  0114  1C8C               	btfss	Lcd_Port@a,1
  2067  0115  2918               	goto	l89
  2068                           
  2069                           ;lcd.c: 14: RB1 = 1;
  2070  0116  1486               	bsf	6,1	;volatile
  2071  0117  2919               	goto	l90
  2072  0118                     l89:	
  2073                           
  2074                           ;lcd.c: 15: else
  2075                           ;lcd.c: 16: RB1 = 0;
  2076  0118  1086               	bcf	6,1	;volatile
  2077  0119                     l90:	
  2078                           
  2079                           ;lcd.c: 18: if(a & 4)
  2080  0119  1D0C               	btfss	Lcd_Port@a,2
  2081  011A  291D               	goto	l91
  2082                           
  2083                           ;lcd.c: 19: RB2 = 1;
  2084  011B  1506               	bsf	6,2	;volatile
  2085  011C  291E               	goto	l92
  2086  011D                     l91:	
  2087                           
  2088                           ;lcd.c: 20: else
  2089                           ;lcd.c: 21: RB2 = 0;
  2090  011D  1106               	bcf	6,2	;volatile
  2091  011E                     l92:	
  2092                           
  2093                           ;lcd.c: 23: if(a & 8)
  2094  011E  1D8C               	btfss	Lcd_Port@a,3
  2095  011F  2922               	goto	l93
  2096                           
  2097                           ;lcd.c: 24: RB3 = 1;
  2098  0120  1586               	bsf	6,3	;volatile
  2099  0121  0008               	return
  2100  0122                     l93:	
  2101                           
  2102                           ;lcd.c: 25: else
  2103                           ;lcd.c: 26: RB3 = 0;
  2104  0122  1186               	bcf	6,3	;volatile
  2105  0123  0008               	return
  2106  0124                     __end_of_Lcd_Port:	
  2107  004E                     btemp	set	78	;btemp
  2108  004E                     wtemp	set	78
  2109  004E                     wtemp0	set	78
  2110  0050                     wtemp1	set	80
  2111  0052                     wtemp2	set	82
  2112  0054                     wtemp3	set	84
  2113  0056                     wtemp4	set	86
  2114  0058                     wtemp5	set	88
  2115  004F                     wtemp6	set	79
  2116  004E                     ttemp	set	78
  2117  004E                     ttemp0	set	78
  2118  0051                     ttemp1	set	81
  2119  0054                     ttemp2	set	84
  2120  0057                     ttemp3	set	87
  2121  004F                     ttemp4	set	79
  2122  004E                     ltemp	set	78
  2123  004E                     ltemp0	set	78
  2124  0052                     ltemp1	set	82
  2125  0056                     ltemp2	set	86
  2126  0050                     ltemp3	set	80


Data Sizes:
    Strings     9
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            66     56      56

Pointer List with Targets:

    utoa@buf	PTR unsigned char  size(1) Largest target is 16
		 -> Lcd_Write_Int@temp(BANK0[16]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 0

    sp__utoa	PTR unsigned char  size(1) Largest target is 16
		 -> Lcd_Write_Int@temp(BANK0[16]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 16
		 -> Lcd_Write_Int@temp(BANK0[16]), STR_1(CODE[9]), 

    main@string	PTR unsigned char  size(1) Largest target is 9
		 -> STR_1(CODE[9]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Lcd_Write_Int
    ___wmul->_readADC
    _Lcd_Write_Int->_utoa
    _utoa->___lwdiv
    ___lwmod->___wmul
    ___lwdiv->___wmul
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0    5077
                                             49 BANK0      7     7      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                      _Lcd_Write_Int
                   _Lcd_Write_String
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _readADC
 ---------------------------------------------------------------------------------
 (1) _readADC                                              8     6      2     208
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     304
                                              8 BANK0      6     2      4
                            _readADC (ARG)
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_Int                                       18    16      2    2210
                                             31 BANK0     18    16      2
                   _Lcd_Write_String
                               _utoa
 ---------------------------------------------------------------------------------
 (2) _utoa                                                 9     5      4    1393
                                             22 BANK0      9     5      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (1) ___lwmod                                              6     2      4     371
                                             14 BANK0      6     2      4
                             ___wmul (ARG)
                            _readADC (ARG)
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              8     4      4     480
                                             14 BANK0      8     4      4
                             ___wmul (ARG)
                            _readADC (ARG)
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2     374
                                              5 BANK0      7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 BANK0      4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     486
                                              4 BANK0      7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            2     2      0     110
                                              4 BANK0      2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 BANK0      3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_Int
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _utoa
       ___lwdiv
         ___wmul (ARG)
           _readADC (ARG)
         _readADC (ARG)
       ___lwmod
         ___wmul (ARG)
           _readADC (ARG)
         _readADC (ARG)
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   ___lwdiv
     ___wmul (ARG)
       _readADC (ARG)
     _readADC (ARG)
   ___lwmod
     ___wmul (ARG)
       _readADC (ARG)
     _readADC (ARG)
   ___wmul
     _readADC (ARG)
   _readADC

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              40      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               42     38      38       3       84.8%
ABS                  0      0       0       4        0.0%
BITBANK0            42      0       0       5        0.0%
DATA                 0      0       0       6        0.0%


Microchip Technology PIC Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Tue Apr 19 16:46:39 2016

                        pc 0002                __CFG_CP$OFF 0000                         l65 02CE  
                       l90 0119                         l91 011D                         l92 011E  
                       l93 0122                         l87 0113                         l88 0114  
                       l89 0118                         fsr 0004        ___wmul@multiplicand 0016  
                      l212 012F                        l479 0327                        l944 0235  
                      l936 0211                        l960 01A8                        l938 021F  
                      l962 01B6                        l970 01CF                        l980 0173  
                      l948 0240                        l966 01C4                        l994 02E7  
                      _RA1 0029                        _RB0 0030                        _RA2 002A  
                      _RB1 0031                        _RA3 002B                        _RB2 0032  
                      _RB3 0033                        _RB4 0034                        _RB5 0035  
                      _RB6 0036                        u515 0214                        u605 01BC  
                      u535 0220                        u615 01C5                        u705 0252  
                      u545 022C                        u555 0236                        u725 0273  
                      u805 0137                        u495 0156                        u585 01AB  
                      u825 03A7                        u907 03DB                        u835 03B9  
                      u917 03E8                        u927 03F5                        u937 0293  
                      u795 0130                        u947 0299                        u957 02AC  
                      u967 02C2                        u977 0161                        u897 03CE  
                      u987 016B                        u997 01DB                        fsr0 0004  
                      indf 0000               __CFG_FOSC$XT 0000                main@decimal 0042  
                     l1004 0303                       l1112 0127                       l1140 034C  
                     l1046 0266                       l1080 02AA                       l1064 0291  
                     l1160 03AF                       l1090 02BB                       l1074 02A5  
                     l1170 03CA                       l1180 03ED                       l1172 03D3  
                     l1164 03C0                       l1182 03F1                       l1174 03D7  
                     l1184 03FA                       l1176 03E0                       l1178 03E4  
                     STR_1 0011                       u1007 01E7                       u1017 01F2  
                     u1027 00E2                       u1037 0105          ?_Lcd_Write_String 0011  
                     _main 033D                       btemp 004E                       _utoa 02E1  
                     ltemp 004E                       start 0000                       ttemp 004E  
       ??_Lcd_Write_String 0013                       wtemp 004E                main@voltage 003F  
          __end_of_Lcd_Cmd 010D                      ?_main 000C              __CFG_WDTE$OFF 0000  
                    ?_utoa 0022            __end_of___lwdiv 0245            __end_of___lwmod 01D4  
  __size_of_Lcd_Set_Cursor 0042                      _TRISA 0085                      _TRISB 0086  
            __CFG_PWRTE$ON 0000                readADC@bits 0012            __end_of_readADC 02E1  
              readADC@volt 0010                      pclath 000A                      ltemp0 004E  
                    ltemp1 0052                      ltemp2 0056                      ltemp3 0050  
                    ttemp0 004E                      ttemp1 0051                      ttemp2 0054  
                    ttemp3 0057                      ttemp4 004F                      utoa@c 0029  
                    utoa@v 0027                      status 0003                      wtemp0 004E  
                    wtemp1 0050                      wtemp2 0052                      wtemp3 0054  
                    wtemp4 0056                      wtemp5 0058                      wtemp6 004F  
         __end_of_Lcd_Init 0208           __end_of_Lcd_Port 0124            __initialization 03FE  
             __end_of_main 03FE               __end_of_utoa 033D                     ??_main 003D  
                   ??_utoa 0026         __size_of_Lcd_Clear 000F                  ??_Lcd_Cmd 000D  
  __size_of_Lcd_Write_Char 002A                     ___wmul 0124                  ??___lwdiv 001E  
                ??___lwmod 001E      __end_of_Lcd_Write_Int 00FA                  ??_readADC 000E  
          Lcd_Set_Cursor@a 0013            Lcd_Set_Cursor@b 0010            Lcd_Set_Cursor@y 0015  
          Lcd_Set_Cursor@z 0014    __end_of__initialization 03FE          __end_of_Lcd_Clear 00E8  
           __pcstackCOMMON 0000             _Lcd_Set_Cursor 0245                  ?_Lcd_Init 000C  
                ?_Lcd_Port 000C             Lcd_Write_Int@a 002B                 __pmaintext 033D  
                  ?___wmul 0014  __size_of_Lcd_Write_String 0031     __end_of_Lcd_Set_Cursor 0287  
               ??_Lcd_Init 0010                 ??_Lcd_Port 0000                 __stringtab 0001  
           _Lcd_Write_Char 0146                    _Lcd_Cmd 00FA            __size_of___wmul 0022  
                  ___lwdiv 0208                    ___lwmod 01A1              readADC@rxData 0013  
          ?_Lcd_Set_Cursor 0010                    __ptext1 0287                    __ptext2 0124  
                  __ptext3 00E8                    __ptext4 02E1                    __ptext5 01A1  
                  __ptext6 0208                    __ptext7 0170                    __ptext8 0146  
                  __ptext9 0245                    _readADC 0287     __end_of_Lcd_Write_Char 0170  
     end_of_initialization 03FE                  Lcd_Port@a 000C                    utoa@buf 002A  
        Lcd_Write_Int@temp 002D                    utoa@val 0022                  _PORTAbits 0005  
          ?_Lcd_Write_Char 000C          Lcd_Write_String@a 0011          Lcd_Write_String@i 0016  
               main@string 0041                  _Lcd_Clear 00D9             __end_of___wmul 0146  
         _Lcd_Write_String 0170        start_initialization 03FE          __size_of_Lcd_Init 0034  
        __size_of_Lcd_Port 0017     __size_of_Lcd_Write_Int 0012                 ?_Lcd_Clear 000C  
                 ??___wmul 0000            Lcd_Write_Char@a 0010            Lcd_Write_Char@y 000F  
                ___latbits 0000              __pcstackBANK0 000C                   ?_Lcd_Cmd 000C  
         ___lwdiv@dividend 001C           ??_Lcd_Set_Cursor 0011                   ?___lwdiv 001A  
                 ?___lwmod 001A                  __pstrings 0001                   ?_readADC 000C  
            _Lcd_Write_Int 00E8           ___lwdiv@quotient 001F             ___wmul@product 0018  
                 Lcd_Cmd@a 000F                ??_Lcd_Clear 0010                __stringbase 0010  
        ___wmul@multiplier 0014             ?_Lcd_Write_Int 002B           ??_Lcd_Write_Char 000D  
                 _Lcd_Init 01D4                   _Lcd_Port 010D   __end_of_Lcd_Write_String 01A1  
         __size_of_Lcd_Cmd 0013           __size_of___lwdiv 003D           __size_of___lwmod 0033  
       __end_of__stringtab 0011           __size_of_readADC 005A            ___lwdiv@divisor 001A  
          ___lwdiv@counter 0021                   __ptext10 01D4                   __ptext11 00D9  
                 __ptext12 00FA                   __ptext13 010D              __size_of_main 00C1  
            __size_of_utoa 005C            ??_Lcd_Write_Int 0000         Lcd_Write_Char@temp 000E  
         ___lwmod@dividend 001C                  stringcode 000B         Lcd_Set_Cursor@temp 0016  
                 utoa@base 0024            ___lwmod@divisor 001A            ___lwmod@counter 001F  
                 stringdir 000B                   stringtab 0001  
