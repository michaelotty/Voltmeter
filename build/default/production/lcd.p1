Version 3.2 HI-TECH Software Intermediate Code
"636 C:\Program Files (x86)\Microchip\xc8\v1.35\include\pic16f84a.h
[v _RB0 `Vb ~T0 @X0 0 e@48 ]
"638
[v _RB1 `Vb ~T0 @X0 0 e@49 ]
"640
[v _RB2 `Vb ~T0 @X0 0 e@50 ]
"642
[v _RB3 `Vb ~T0 @X0 0 e@51 ]
"644
[v _RB4 `Vb ~T0 @X0 0 e@52 ]
"648
[v _RB6 `Vb ~T0 @X0 0 e@54 ]
[v F295 `(v ~T0 @X0 1 tf1`ul ]
"150 C:\Program Files (x86)\Microchip\xc8\v1.35\include\pic.h
[v __delay `JF295 ~T0 @X0 0 e ]
[p i __delay ]
"96 C:\Program Files (x86)\Microchip\xc8\v1.35\include\stdlib.h
[v _utoa `(*uc ~T0 @X0 0 ef3`*uc`ui`i ]
"8 lcd.h
[p n 752 ]
"9
[p n 520 ]
[; ;lcd.h: 24: void Lcd_Port(char a);
[; ;lcd.h: 27: void Lcd_Cmd(char a);
[; ;lcd.h: 30: void Lcd_Clear();
[; ;lcd.h: 33: void Lcd_Set_Cursor(char a, char b);
[; ;lcd.h: 36: void Lcd_Init();
[; ;lcd.h: 39: void Lcd_Write_Char(char a);
[; ;lcd.h: 42: void Lcd_Write_String(char *a);
[; ;lcd.h: 45: void Lcd_Write_Int(unsigned int a);
[; ;lcd.h: 47: void Lcd_Shift_Right();
[; ;lcd.h: 49: void Lcd_Shift_Left();
[; ;htc.h: 26: extern const char __xc8_OPTIM_SPEED;
[; ;htc.h: 28: extern double __fpnormalize(double);
[; ;xc8debug.h: 14: extern void __builtin_software_breakpoint(void);
[; ;pic16f84a.h: 49: extern volatile unsigned char INDF @ 0x000;
"51 C:\Program Files (x86)\Microchip\xc8\v1.35\include\pic16f84a.h
[; ;pic16f84a.h: 51: asm("INDF equ 00h");
[; <" INDF equ 00h ;# ">
[; ;pic16f84a.h: 55: extern volatile unsigned char TMR0 @ 0x001;
"57
[; ;pic16f84a.h: 57: asm("TMR0 equ 01h");
[; <" TMR0 equ 01h ;# ">
[; ;pic16f84a.h: 61: extern volatile unsigned char PCL @ 0x002;
"63
[; ;pic16f84a.h: 63: asm("PCL equ 02h");
[; <" PCL equ 02h ;# ">
[; ;pic16f84a.h: 67: extern volatile unsigned char STATUS @ 0x003;
"69
[; ;pic16f84a.h: 69: asm("STATUS equ 03h");
[; <" STATUS equ 03h ;# ">
[; ;pic16f84a.h: 72: typedef union {
[; ;pic16f84a.h: 73: struct {
[; ;pic16f84a.h: 74: unsigned C :1;
[; ;pic16f84a.h: 75: unsigned DC :1;
[; ;pic16f84a.h: 76: unsigned Z :1;
[; ;pic16f84a.h: 77: unsigned nPD :1;
[; ;pic16f84a.h: 78: unsigned nTO :1;
[; ;pic16f84a.h: 79: unsigned RP :2;
[; ;pic16f84a.h: 80: unsigned IRP :1;
[; ;pic16f84a.h: 81: };
[; ;pic16f84a.h: 82: struct {
[; ;pic16f84a.h: 83: unsigned :5;
[; ;pic16f84a.h: 84: unsigned RP0 :1;
[; ;pic16f84a.h: 85: unsigned RP1 :1;
[; ;pic16f84a.h: 86: };
[; ;pic16f84a.h: 87: struct {
[; ;pic16f84a.h: 88: unsigned CARRY :1;
[; ;pic16f84a.h: 89: };
[; ;pic16f84a.h: 90: struct {
[; ;pic16f84a.h: 91: unsigned :2;
[; ;pic16f84a.h: 92: unsigned ZERO :1;
[; ;pic16f84a.h: 93: };
[; ;pic16f84a.h: 94: } STATUSbits_t;
[; ;pic16f84a.h: 95: extern volatile STATUSbits_t STATUSbits @ 0x003;
[; ;pic16f84a.h: 154: extern volatile unsigned char FSR @ 0x004;
"156
[; ;pic16f84a.h: 156: asm("FSR equ 04h");
[; <" FSR equ 04h ;# ">
[; ;pic16f84a.h: 160: extern volatile unsigned char PORTA @ 0x005;
"162
[; ;pic16f84a.h: 162: asm("PORTA equ 05h");
[; <" PORTA equ 05h ;# ">
[; ;pic16f84a.h: 165: typedef union {
[; ;pic16f84a.h: 166: struct {
[; ;pic16f84a.h: 167: unsigned RA0 :1;
[; ;pic16f84a.h: 168: unsigned RA1 :1;
[; ;pic16f84a.h: 169: unsigned RA2 :1;
[; ;pic16f84a.h: 170: unsigned RA3 :1;
[; ;pic16f84a.h: 171: unsigned RA4 :1;
[; ;pic16f84a.h: 172: };
[; ;pic16f84a.h: 173: } PORTAbits_t;
[; ;pic16f84a.h: 174: extern volatile PORTAbits_t PORTAbits @ 0x005;
[; ;pic16f84a.h: 203: extern volatile unsigned char PORTB @ 0x006;
"205
[; ;pic16f84a.h: 205: asm("PORTB equ 06h");
[; <" PORTB equ 06h ;# ">
[; ;pic16f84a.h: 208: typedef union {
[; ;pic16f84a.h: 209: struct {
[; ;pic16f84a.h: 210: unsigned RB0 :1;
[; ;pic16f84a.h: 211: unsigned RB1 :1;
[; ;pic16f84a.h: 212: unsigned RB2 :1;
[; ;pic16f84a.h: 213: unsigned RB3 :1;
[; ;pic16f84a.h: 214: unsigned RB4 :1;
[; ;pic16f84a.h: 215: unsigned RB5 :1;
[; ;pic16f84a.h: 216: unsigned RB6 :1;
[; ;pic16f84a.h: 217: unsigned RB7 :1;
[; ;pic16f84a.h: 218: };
[; ;pic16f84a.h: 219: } PORTBbits_t;
[; ;pic16f84a.h: 220: extern volatile PORTBbits_t PORTBbits @ 0x006;
[; ;pic16f84a.h: 264: extern volatile unsigned char EEDATA @ 0x008;
"266
[; ;pic16f84a.h: 266: asm("EEDATA equ 08h");
[; <" EEDATA equ 08h ;# ">
[; ;pic16f84a.h: 270: extern volatile unsigned char EEADR @ 0x009;
"272
[; ;pic16f84a.h: 272: asm("EEADR equ 09h");
[; <" EEADR equ 09h ;# ">
[; ;pic16f84a.h: 276: extern volatile unsigned char PCLATH @ 0x00A;
"278
[; ;pic16f84a.h: 278: asm("PCLATH equ 0Ah");
[; <" PCLATH equ 0Ah ;# ">
[; ;pic16f84a.h: 281: typedef union {
[; ;pic16f84a.h: 282: struct {
[; ;pic16f84a.h: 283: unsigned PCLATH :5;
[; ;pic16f84a.h: 284: };
[; ;pic16f84a.h: 285: } PCLATHbits_t;
[; ;pic16f84a.h: 286: extern volatile PCLATHbits_t PCLATHbits @ 0x00A;
[; ;pic16f84a.h: 295: extern volatile unsigned char INTCON @ 0x00B;
"297
[; ;pic16f84a.h: 297: asm("INTCON equ 0Bh");
[; <" INTCON equ 0Bh ;# ">
[; ;pic16f84a.h: 300: typedef union {
[; ;pic16f84a.h: 301: struct {
[; ;pic16f84a.h: 302: unsigned RBIF :1;
[; ;pic16f84a.h: 303: unsigned INTF :1;
[; ;pic16f84a.h: 304: unsigned T0IF :1;
[; ;pic16f84a.h: 305: unsigned RBIE :1;
[; ;pic16f84a.h: 306: unsigned INTE :1;
[; ;pic16f84a.h: 307: unsigned T0IE :1;
[; ;pic16f84a.h: 308: unsigned EEIE :1;
[; ;pic16f84a.h: 309: unsigned GIE :1;
[; ;pic16f84a.h: 310: };
[; ;pic16f84a.h: 311: struct {
[; ;pic16f84a.h: 312: unsigned :2;
[; ;pic16f84a.h: 313: unsigned TMR0IF :1;
[; ;pic16f84a.h: 314: unsigned :2;
[; ;pic16f84a.h: 315: unsigned TMR0IE :1;
[; ;pic16f84a.h: 316: };
[; ;pic16f84a.h: 317: } INTCONbits_t;
[; ;pic16f84a.h: 318: extern volatile INTCONbits_t INTCONbits @ 0x00B;
[; ;pic16f84a.h: 372: extern volatile unsigned char OPTION_REG @ 0x081;
"374
[; ;pic16f84a.h: 374: asm("OPTION_REG equ 081h");
[; <" OPTION_REG equ 081h ;# ">
[; ;pic16f84a.h: 377: typedef union {
[; ;pic16f84a.h: 378: struct {
[; ;pic16f84a.h: 379: unsigned PS :3;
[; ;pic16f84a.h: 380: unsigned PSA :1;
[; ;pic16f84a.h: 381: unsigned T0SE :1;
[; ;pic16f84a.h: 382: unsigned T0CS :1;
[; ;pic16f84a.h: 383: unsigned INTEDG :1;
[; ;pic16f84a.h: 384: unsigned nRBPU :1;
[; ;pic16f84a.h: 385: };
[; ;pic16f84a.h: 386: struct {
[; ;pic16f84a.h: 387: unsigned PS0 :1;
[; ;pic16f84a.h: 388: unsigned PS1 :1;
[; ;pic16f84a.h: 389: unsigned PS2 :1;
[; ;pic16f84a.h: 390: };
[; ;pic16f84a.h: 391: } OPTION_REGbits_t;
[; ;pic16f84a.h: 392: extern volatile OPTION_REGbits_t OPTION_REGbits @ 0x081;
[; ;pic16f84a.h: 441: extern volatile unsigned char TRISA @ 0x085;
"443
[; ;pic16f84a.h: 443: asm("TRISA equ 085h");
[; <" TRISA equ 085h ;# ">
[; ;pic16f84a.h: 446: typedef union {
[; ;pic16f84a.h: 447: struct {
[; ;pic16f84a.h: 448: unsigned TRISA0 :1;
[; ;pic16f84a.h: 449: unsigned TRISA1 :1;
[; ;pic16f84a.h: 450: unsigned TRISA2 :1;
[; ;pic16f84a.h: 451: unsigned TRISA3 :1;
[; ;pic16f84a.h: 452: unsigned TRISA4 :1;
[; ;pic16f84a.h: 453: };
[; ;pic16f84a.h: 454: } TRISAbits_t;
[; ;pic16f84a.h: 455: extern volatile TRISAbits_t TRISAbits @ 0x085;
[; ;pic16f84a.h: 484: extern volatile unsigned char TRISB @ 0x086;
"486
[; ;pic16f84a.h: 486: asm("TRISB equ 086h");
[; <" TRISB equ 086h ;# ">
[; ;pic16f84a.h: 489: typedef union {
[; ;pic16f84a.h: 490: struct {
[; ;pic16f84a.h: 491: unsigned TRISB0 :1;
[; ;pic16f84a.h: 492: unsigned TRISB1 :1;
[; ;pic16f84a.h: 493: unsigned TRISB2 :1;
[; ;pic16f84a.h: 494: unsigned TRISB3 :1;
[; ;pic16f84a.h: 495: unsigned TRISB4 :1;
[; ;pic16f84a.h: 496: unsigned TRISB5 :1;
[; ;pic16f84a.h: 497: unsigned TRISB6 :1;
[; ;pic16f84a.h: 498: unsigned TRISB7 :1;
[; ;pic16f84a.h: 499: };
[; ;pic16f84a.h: 500: } TRISBbits_t;
[; ;pic16f84a.h: 501: extern volatile TRISBbits_t TRISBbits @ 0x086;
[; ;pic16f84a.h: 545: extern volatile unsigned char EECON1 @ 0x088;
"547
[; ;pic16f84a.h: 547: asm("EECON1 equ 088h");
[; <" EECON1 equ 088h ;# ">
[; ;pic16f84a.h: 550: typedef union {
[; ;pic16f84a.h: 551: struct {
[; ;pic16f84a.h: 552: unsigned RD :1;
[; ;pic16f84a.h: 553: unsigned WR :1;
[; ;pic16f84a.h: 554: unsigned WREN :1;
[; ;pic16f84a.h: 555: unsigned WRERR :1;
[; ;pic16f84a.h: 556: unsigned EEIF :1;
[; ;pic16f84a.h: 557: };
[; ;pic16f84a.h: 558: } EECON1bits_t;
[; ;pic16f84a.h: 559: extern volatile EECON1bits_t EECON1bits @ 0x088;
[; ;pic16f84a.h: 588: extern volatile unsigned char EECON2 @ 0x089;
"590
[; ;pic16f84a.h: 590: asm("EECON2 equ 089h");
[; <" EECON2 equ 089h ;# ">
[; ;pic16f84a.h: 600: extern volatile __bit CARRY @ (((unsigned) &STATUS)*8) + 0;
[; ;pic16f84a.h: 602: extern volatile __bit DC @ (((unsigned) &STATUS)*8) + 1;
[; ;pic16f84a.h: 604: extern volatile __bit EEIE @ (((unsigned) &INTCON)*8) + 6;
[; ;pic16f84a.h: 606: extern volatile __bit EEIF @ (((unsigned) &EECON1)*8) + 4;
[; ;pic16f84a.h: 608: extern volatile __bit GIE @ (((unsigned) &INTCON)*8) + 7;
[; ;pic16f84a.h: 610: extern volatile __bit INTE @ (((unsigned) &INTCON)*8) + 4;
[; ;pic16f84a.h: 612: extern volatile __bit INTEDG @ (((unsigned) &OPTION_REG)*8) + 6;
[; ;pic16f84a.h: 614: extern volatile __bit INTF @ (((unsigned) &INTCON)*8) + 1;
[; ;pic16f84a.h: 616: extern volatile __bit IRP @ (((unsigned) &STATUS)*8) + 7;
[; ;pic16f84a.h: 618: extern volatile __bit PS0 @ (((unsigned) &OPTION_REG)*8) + 0;
[; ;pic16f84a.h: 620: extern volatile __bit PS1 @ (((unsigned) &OPTION_REG)*8) + 1;
[; ;pic16f84a.h: 622: extern volatile __bit PS2 @ (((unsigned) &OPTION_REG)*8) + 2;
[; ;pic16f84a.h: 624: extern volatile __bit PSA @ (((unsigned) &OPTION_REG)*8) + 3;
[; ;pic16f84a.h: 626: extern volatile __bit RA0 @ (((unsigned) &PORTA)*8) + 0;
[; ;pic16f84a.h: 628: extern volatile __bit RA1 @ (((unsigned) &PORTA)*8) + 1;
[; ;pic16f84a.h: 630: extern volatile __bit RA2 @ (((unsigned) &PORTA)*8) + 2;
[; ;pic16f84a.h: 632: extern volatile __bit RA3 @ (((unsigned) &PORTA)*8) + 3;
[; ;pic16f84a.h: 634: extern volatile __bit RA4 @ (((unsigned) &PORTA)*8) + 4;
[; ;pic16f84a.h: 636: extern volatile __bit RB0 @ (((unsigned) &PORTB)*8) + 0;
[; ;pic16f84a.h: 638: extern volatile __bit RB1 @ (((unsigned) &PORTB)*8) + 1;
[; ;pic16f84a.h: 640: extern volatile __bit RB2 @ (((unsigned) &PORTB)*8) + 2;
[; ;pic16f84a.h: 642: extern volatile __bit RB3 @ (((unsigned) &PORTB)*8) + 3;
[; ;pic16f84a.h: 644: extern volatile __bit RB4 @ (((unsigned) &PORTB)*8) + 4;
[; ;pic16f84a.h: 646: extern volatile __bit RB5 @ (((unsigned) &PORTB)*8) + 5;
[; ;pic16f84a.h: 648: extern volatile __bit RB6 @ (((unsigned) &PORTB)*8) + 6;
[; ;pic16f84a.h: 650: extern volatile __bit RB7 @ (((unsigned) &PORTB)*8) + 7;
[; ;pic16f84a.h: 652: extern volatile __bit RBIE @ (((unsigned) &INTCON)*8) + 3;
[; ;pic16f84a.h: 654: extern volatile __bit RBIF @ (((unsigned) &INTCON)*8) + 0;
[; ;pic16f84a.h: 656: extern volatile __bit RD @ (((unsigned) &EECON1)*8) + 0;
[; ;pic16f84a.h: 658: extern volatile __bit RP0 @ (((unsigned) &STATUS)*8) + 5;
[; ;pic16f84a.h: 660: extern volatile __bit RP1 @ (((unsigned) &STATUS)*8) + 6;
[; ;pic16f84a.h: 662: extern volatile __bit T0CS @ (((unsigned) &OPTION_REG)*8) + 5;
[; ;pic16f84a.h: 664: extern volatile __bit T0IE @ (((unsigned) &INTCON)*8) + 5;
[; ;pic16f84a.h: 666: extern volatile __bit T0IF @ (((unsigned) &INTCON)*8) + 2;
[; ;pic16f84a.h: 668: extern volatile __bit T0SE @ (((unsigned) &OPTION_REG)*8) + 4;
[; ;pic16f84a.h: 670: extern volatile __bit TMR0IE @ (((unsigned) &INTCON)*8) + 5;
[; ;pic16f84a.h: 672: extern volatile __bit TMR0IF @ (((unsigned) &INTCON)*8) + 2;
[; ;pic16f84a.h: 674: extern volatile __bit TRISA0 @ (((unsigned) &TRISA)*8) + 0;
[; ;pic16f84a.h: 676: extern volatile __bit TRISA1 @ (((unsigned) &TRISA)*8) + 1;
[; ;pic16f84a.h: 678: extern volatile __bit TRISA2 @ (((unsigned) &TRISA)*8) + 2;
[; ;pic16f84a.h: 680: extern volatile __bit TRISA3 @ (((unsigned) &TRISA)*8) + 3;
[; ;pic16f84a.h: 682: extern volatile __bit TRISA4 @ (((unsigned) &TRISA)*8) + 4;
[; ;pic16f84a.h: 684: extern volatile __bit TRISB0 @ (((unsigned) &TRISB)*8) + 0;
[; ;pic16f84a.h: 686: extern volatile __bit TRISB1 @ (((unsigned) &TRISB)*8) + 1;
[; ;pic16f84a.h: 688: extern volatile __bit TRISB2 @ (((unsigned) &TRISB)*8) + 2;
[; ;pic16f84a.h: 690: extern volatile __bit TRISB3 @ (((unsigned) &TRISB)*8) + 3;
[; ;pic16f84a.h: 692: extern volatile __bit TRISB4 @ (((unsigned) &TRISB)*8) + 4;
[; ;pic16f84a.h: 694: extern volatile __bit TRISB5 @ (((unsigned) &TRISB)*8) + 5;
[; ;pic16f84a.h: 696: extern volatile __bit TRISB6 @ (((unsigned) &TRISB)*8) + 6;
[; ;pic16f84a.h: 698: extern volatile __bit TRISB7 @ (((unsigned) &TRISB)*8) + 7;
[; ;pic16f84a.h: 700: extern volatile __bit WR @ (((unsigned) &EECON1)*8) + 1;
[; ;pic16f84a.h: 702: extern volatile __bit WREN @ (((unsigned) &EECON1)*8) + 2;
[; ;pic16f84a.h: 704: extern volatile __bit WRERR @ (((unsigned) &EECON1)*8) + 3;
[; ;pic16f84a.h: 706: extern volatile __bit ZERO @ (((unsigned) &STATUS)*8) + 2;
[; ;pic16f84a.h: 708: extern volatile __bit nPD @ (((unsigned) &STATUS)*8) + 3;
[; ;pic16f84a.h: 710: extern volatile __bit nRBPU @ (((unsigned) &OPTION_REG)*8) + 7;
[; ;pic16f84a.h: 712: extern volatile __bit nTO @ (((unsigned) &STATUS)*8) + 4;
[; ;pic.h: 28: extern void __nop(void);
[; ;pic.h: 76: extern unsigned int flash_read(unsigned short addr);
[; ;pic.h: 140: extern void flash_erase(unsigned short addr);
[; ;eeprom_routines.h: 41: extern void eeprom_write(unsigned char addr, unsigned char value);
[; ;eeprom_routines.h: 42: extern unsigned char eeprom_read(unsigned char addr);
[; ;eeprom_routines.h: 43: extern void eecpymem(volatile unsigned char *to, __eeprom unsigned char *from, unsigned char size);
[; ;eeprom_routines.h: 44: extern void memcpyee(__eeprom unsigned char *to, const unsigned char *from, unsigned char size);
[; ;pic.h: 150: extern __nonreentrant void _delay(unsigned long);
[; ;pic.h: 184: extern unsigned char __resetbits;
[; ;pic.h: 185: extern __bit __powerdown;
[; ;pic.h: 186: extern __bit __timeout;
[; ;__size_t.h: 4: typedef unsigned size_t;
[; ;stdlib.h: 7: typedef unsigned short wchar_t;
[; ;stdlib.h: 15: typedef struct {
[; ;stdlib.h: 16: int rem;
[; ;stdlib.h: 17: int quot;
[; ;stdlib.h: 18: } div_t;
[; ;stdlib.h: 19: typedef struct {
[; ;stdlib.h: 20: unsigned rem;
[; ;stdlib.h: 21: unsigned quot;
[; ;stdlib.h: 22: } udiv_t;
[; ;stdlib.h: 23: typedef struct {
[; ;stdlib.h: 24: long quot;
[; ;stdlib.h: 25: long rem;
[; ;stdlib.h: 26: } ldiv_t;
[; ;stdlib.h: 27: typedef struct {
[; ;stdlib.h: 28: unsigned long quot;
[; ;stdlib.h: 29: unsigned long rem;
[; ;stdlib.h: 30: } uldiv_t;
[; ;stdlib.h: 53: extern double atof(const char *);
[; ;stdlib.h: 54: extern double strtod(const char *, const char **);
[; ;stdlib.h: 55: extern int atoi(const char *);
[; ;stdlib.h: 56: extern unsigned xtoi(const char *);
[; ;stdlib.h: 57: extern long atol(const char *);
[; ;stdlib.h: 58: extern long strtol(const char *, char **, int);
[; ;stdlib.h: 60: extern int rand(void);
[; ;stdlib.h: 61: extern void srand(unsigned int);
[; ;stdlib.h: 62: extern void * calloc(size_t, size_t);
[; ;stdlib.h: 63: extern div_t div(int numer, int denom);
[; ;stdlib.h: 64: extern udiv_t udiv(unsigned numer, unsigned denom);
[; ;stdlib.h: 65: extern ldiv_t ldiv(long numer, long denom);
[; ;stdlib.h: 66: extern uldiv_t uldiv(unsigned long numer,unsigned long denom);
[; ;stdlib.h: 67: extern unsigned long _lrotl(unsigned long value, unsigned int shift);
[; ;stdlib.h: 68: extern unsigned long _lrotr(unsigned long value, unsigned int shift);
[; ;stdlib.h: 69: extern unsigned int _rotl(unsigned int value, unsigned int shift);
[; ;stdlib.h: 70: extern unsigned int _rotr(unsigned int value, unsigned int shift);
[; ;stdlib.h: 75: extern void * malloc(size_t);
[; ;stdlib.h: 76: extern void free(void *);
[; ;stdlib.h: 77: extern void * realloc(void *, size_t);
[; ;stdlib.h: 86: extern int atexit(void (*)(void));
[; ;stdlib.h: 87: extern char * getenv(const char *);
[; ;stdlib.h: 88: extern char ** environ;
[; ;stdlib.h: 89: extern int system(char *);
[; ;stdlib.h: 90: extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));
[; ;stdlib.h: 91: extern void * bsearch(const void *, void *, size_t, size_t, int(*)(const void *, const void *));
[; ;stdlib.h: 92: extern int abs(int);
[; ;stdlib.h: 93: extern long labs(long);
[; ;stdlib.h: 95: extern char * itoa(char * buf, int val, int base);
[; ;stdlib.h: 96: extern char * utoa(char * buf, unsigned val, int base);
[; ;stdlib.h: 101: extern char * ltoa(char * buf, long val, int base);
[; ;stdlib.h: 102: extern char * ultoa(char * buf, unsigned long val, int base);
[; ;stdlib.h: 104: extern char * ftoa(float f, int * status);
"6 lcd.c
[v _Lcd_Port `(v ~T0 @X0 1 ef1`uc ]
"7
{
[; ;lcd.c: 6: void Lcd_Port(char a)
[; ;lcd.c: 7: {
[e :U _Lcd_Port ]
"6
[v _a `uc ~T0 @X0 1 r1 ]
"7
[f ]
[; ;lcd.c: 8: if(a & 1)
"8
[e $ ! != & -> _a `i -> 1 `i -> 0 `i 29  ]
[; ;lcd.c: 9: RB0 = 1;
"9
[e = _RB0 -> -> 1 `i `b ]
[e $U 30  ]
"10
[e :U 29 ]
[; ;lcd.c: 10: else
[; ;lcd.c: 11: RB0 = 0;
"11
[e = _RB0 -> -> 0 `i `b ]
[e :U 30 ]
[; ;lcd.c: 13: if(a & 2)
"13
[e $ ! != & -> _a `i -> 2 `i -> 0 `i 31  ]
[; ;lcd.c: 14: RB1 = 1;
"14
[e = _RB1 -> -> 1 `i `b ]
[e $U 32  ]
"15
[e :U 31 ]
[; ;lcd.c: 15: else
[; ;lcd.c: 16: RB1 = 0;
"16
[e = _RB1 -> -> 0 `i `b ]
[e :U 32 ]
[; ;lcd.c: 18: if(a & 4)
"18
[e $ ! != & -> _a `i -> 4 `i -> 0 `i 33  ]
[; ;lcd.c: 19: RB2 = 1;
"19
[e = _RB2 -> -> 1 `i `b ]
[e $U 34  ]
"20
[e :U 33 ]
[; ;lcd.c: 20: else
[; ;lcd.c: 21: RB2 = 0;
"21
[e = _RB2 -> -> 0 `i `b ]
[e :U 34 ]
[; ;lcd.c: 23: if(a & 8)
"23
[e $ ! != & -> _a `i -> 8 `i -> 0 `i 35  ]
[; ;lcd.c: 24: RB3 = 1;
"24
[e = _RB3 -> -> 1 `i `b ]
[e $U 36  ]
"25
[e :U 35 ]
[; ;lcd.c: 25: else
[; ;lcd.c: 26: RB3 = 0;
"26
[e = _RB3 -> -> 0 `i `b ]
[e :U 36 ]
[; ;lcd.c: 27: }
"27
[e :UE 28 ]
}
"30
[v _Lcd_Cmd `(v ~T0 @X0 1 ef1`uc ]
"31
{
[; ;lcd.c: 30: void Lcd_Cmd(char a)
[; ;lcd.c: 31: {
[e :U _Lcd_Cmd ]
"30
[v _a `uc ~T0 @X0 1 r1 ]
"31
[f ]
[; ;lcd.c: 33: RB4 = 0;
"33
[e = _RB4 -> -> 0 `i `b ]
[; ;lcd.c: 34: Lcd_Port(a);
"34
[e ( _Lcd_Port (1 _a ]
[; ;lcd.c: 37: RB6 = 1;
"37
[e = _RB6 -> -> 1 `i `b ]
[; ;lcd.c: 38: _delay((unsigned long)((4)*(4000000/4000.0)));
"38
[e ( __delay (1 -> * -> -> 4 `i `d / -> -> 4000000 `l `d .4000.0 `ul ]
[; ;lcd.c: 39: RB6 = 0;
"39
[e = _RB6 -> -> 0 `i `b ]
[; ;lcd.c: 40: }
"40
[e :UE 37 ]
}
"43
[v _Lcd_Clear `(v ~T0 @X0 1 ef ]
"44
{
[; ;lcd.c: 43: void Lcd_Clear()
[; ;lcd.c: 44: {
[e :U _Lcd_Clear ]
[f ]
[; ;lcd.c: 45: Lcd_Cmd(0x00);
"45
[e ( _Lcd_Cmd (1 -> -> 0 `i `uc ]
[; ;lcd.c: 46: Lcd_Cmd(0x01);
"46
[e ( _Lcd_Cmd (1 -> -> 1 `i `uc ]
[; ;lcd.c: 47: _delay((unsigned long)((2)*(4000000/4000.0)));
"47
[e ( __delay (1 -> * -> -> 2 `i `d / -> -> 4000000 `l `d .4000.0 `ul ]
[; ;lcd.c: 48: }
"48
[e :UE 38 ]
}
"51
[v _Lcd_Set_Cursor `(v ~T0 @X0 1 ef2`uc`uc ]
"52
{
[; ;lcd.c: 51: void Lcd_Set_Cursor(char a, char b)
[; ;lcd.c: 52: {
[e :U _Lcd_Set_Cursor ]
"51
[v _a `uc ~T0 @X0 1 r1 ]
[v _b `uc ~T0 @X0 1 r2 ]
"52
[f ]
"53
[v _temp `uc ~T0 @X0 1 a ]
[v _z `uc ~T0 @X0 1 a ]
[v _y `uc ~T0 @X0 1 a ]
[; ;lcd.c: 53: char temp,z,y;
[; ;lcd.c: 54: if(a == 1)
"54
[e $ ! == -> _a `i -> 1 `i 40  ]
[; ;lcd.c: 55: {
"55
{
[; ;lcd.c: 56: temp = (char) (0x80 + b - 1);
"56
[e = _temp -> - + -> 128 `i -> _b `i -> 1 `i `uc ]
[; ;lcd.c: 57: z = temp>>4;
"57
[e = _z -> >> -> _temp `i -> 4 `i `uc ]
[; ;lcd.c: 58: y = temp & 0x0F;
"58
[e = _y -> & -> _temp `i -> 15 `i `uc ]
[; ;lcd.c: 59: Lcd_Cmd(z);
"59
[e ( _Lcd_Cmd (1 _z ]
[; ;lcd.c: 60: Lcd_Cmd(y);
"60
[e ( _Lcd_Cmd (1 _y ]
"61
}
[; ;lcd.c: 61: }
[e $U 41  ]
"62
[e :U 40 ]
[; ;lcd.c: 62: else if(a == 2)
[e $ ! == -> _a `i -> 2 `i 42  ]
[; ;lcd.c: 63: {
"63
{
[; ;lcd.c: 64: temp = 0xC0 + b - 1;
"64
[e = _temp -> - + -> 192 `i -> _b `i -> 1 `i `uc ]
[; ;lcd.c: 65: z = temp>>4;
"65
[e = _z -> >> -> _temp `i -> 4 `i `uc ]
[; ;lcd.c: 66: y = temp & 0x0F;
"66
[e = _y -> & -> _temp `i -> 15 `i `uc ]
[; ;lcd.c: 67: Lcd_Cmd(z);
"67
[e ( _Lcd_Cmd (1 _z ]
[; ;lcd.c: 68: Lcd_Cmd(y);
"68
[e ( _Lcd_Cmd (1 _y ]
"69
}
[e :U 42 ]
"70
[e :U 41 ]
[; ;lcd.c: 69: }
[; ;lcd.c: 70: }
[e :UE 39 ]
}
"73
[v _Lcd_Init `(v ~T0 @X0 1 ef ]
"74
{
[; ;lcd.c: 73: void Lcd_Init()
[; ;lcd.c: 74: {
[e :U _Lcd_Init ]
[f ]
[; ;lcd.c: 75: Lcd_Port(0x00);
"75
[e ( _Lcd_Port (1 -> -> 0 `i `uc ]
[; ;lcd.c: 76: _delay((unsigned long)((20)*(4000000/4000.0)));
"76
[e ( __delay (1 -> * -> -> 20 `i `d / -> -> 4000000 `l `d .4000.0 `ul ]
[; ;lcd.c: 77: Lcd_Cmd(0x03);
"77
[e ( _Lcd_Cmd (1 -> -> 3 `i `uc ]
[; ;lcd.c: 78: _delay((unsigned long)((5)*(4000000/4000.0)));
"78
[e ( __delay (1 -> * -> -> 5 `i `d / -> -> 4000000 `l `d .4000.0 `ul ]
[; ;lcd.c: 79: Lcd_Cmd(0x03);
"79
[e ( _Lcd_Cmd (1 -> -> 3 `i `uc ]
[; ;lcd.c: 80: _delay((unsigned long)((11)*(4000000/4000.0)));
"80
[e ( __delay (1 -> * -> -> 11 `i `d / -> -> 4000000 `l `d .4000.0 `ul ]
[; ;lcd.c: 81: Lcd_Cmd(0x03);
"81
[e ( _Lcd_Cmd (1 -> -> 3 `i `uc ]
[; ;lcd.c: 83: Lcd_Cmd(0x02);
"83
[e ( _Lcd_Cmd (1 -> -> 2 `i `uc ]
[; ;lcd.c: 84: Lcd_Cmd(0x02);
"84
[e ( _Lcd_Cmd (1 -> -> 2 `i `uc ]
[; ;lcd.c: 85: Lcd_Cmd(0x08);
"85
[e ( _Lcd_Cmd (1 -> -> 8 `i `uc ]
[; ;lcd.c: 86: Lcd_Cmd(0x00);
"86
[e ( _Lcd_Cmd (1 -> -> 0 `i `uc ]
[; ;lcd.c: 87: Lcd_Cmd(0x0C);
"87
[e ( _Lcd_Cmd (1 -> -> 12 `i `uc ]
[; ;lcd.c: 88: Lcd_Cmd(0x00);
"88
[e ( _Lcd_Cmd (1 -> -> 0 `i `uc ]
[; ;lcd.c: 89: Lcd_Cmd(0x06);
"89
[e ( _Lcd_Cmd (1 -> -> 6 `i `uc ]
[; ;lcd.c: 90: }
"90
[e :UE 43 ]
}
"93
[v _Lcd_Write_Char `(v ~T0 @X0 1 ef1`uc ]
"94
{
[; ;lcd.c: 93: void Lcd_Write_Char(char a)
[; ;lcd.c: 94: {
[e :U _Lcd_Write_Char ]
"93
[v _a `uc ~T0 @X0 1 r1 ]
"94
[f ]
"95
[v _temp `uc ~T0 @X0 1 a ]
[v _y `uc ~T0 @X0 1 a ]
[; ;lcd.c: 95: char temp,y;
[; ;lcd.c: 96: temp = a&0x0F;
"96
[e = _temp -> & -> _a `i -> 15 `i `uc ]
[; ;lcd.c: 97: y = a&0xF0;
"97
[e = _y -> & -> _a `i -> 240 `i `uc ]
[; ;lcd.c: 98: RB4 = 1;
"98
[e = _RB4 -> -> 1 `i `b ]
[; ;lcd.c: 99: Lcd_Port(y>>4);
"99
[e ( _Lcd_Port (1 -> >> -> _y `i -> 4 `i `uc ]
[; ;lcd.c: 100: RB6 = 1;
"100
[e = _RB6 -> -> 1 `i `b ]
[; ;lcd.c: 101: _delay((unsigned long)((40)*(4000000/4000000.0)));
"101
[e ( __delay (1 -> * -> -> 40 `i `d / -> -> 4000000 `l `d .4000000.0 `ul ]
[; ;lcd.c: 102: RB6 = 0;
"102
[e = _RB6 -> -> 0 `i `b ]
[; ;lcd.c: 103: Lcd_Port(temp);
"103
[e ( _Lcd_Port (1 _temp ]
[; ;lcd.c: 104: RB6 = 1;
"104
[e = _RB6 -> -> 1 `i `b ]
[; ;lcd.c: 105: _delay((unsigned long)((40)*(4000000/4000000.0)));
"105
[e ( __delay (1 -> * -> -> 40 `i `d / -> -> 4000000 `l `d .4000000.0 `ul ]
[; ;lcd.c: 106: RB6 = 0;
"106
[e = _RB6 -> -> 0 `i `b ]
[; ;lcd.c: 107: }
"107
[e :UE 44 ]
}
"110
[v _Lcd_Write_String `(v ~T0 @X0 1 ef1`*uc ]
"111
{
[; ;lcd.c: 110: void Lcd_Write_String(char *a)
[; ;lcd.c: 111: {
[e :U _Lcd_Write_String ]
"110
[v _a `*uc ~T0 @X0 1 r1 ]
"111
[f ]
"112
[v _i `i ~T0 @X0 1 a ]
[; ;lcd.c: 112: int i;
[; ;lcd.c: 113: for(i=0;a[i]!='\0';i++)
"113
{
[e = _i -> 0 `i ]
[e $U 49  ]
"114
[e :U 46 ]
[; ;lcd.c: 114: {
{
[; ;lcd.c: 115: Lcd_Write_Char(a[i]);
"115
[e ( _Lcd_Write_Char (1 *U + _a * -> _i `x -> -> # *U _a `i `x ]
"116
}
"113
[e ++ _i -> 1 `i ]
[e :U 49 ]
[e $ != -> *U + _a * -> _i `x -> -> # *U _a `i `x `ui -> 0 `ui 46  ]
[e :U 47 ]
"116
}
[; ;lcd.c: 116: }
[; ;lcd.c: 117: }
"117
[e :UE 45 ]
}
"120
[v _Lcd_Write_Int `(v ~T0 @X0 1 ef1`ui ]
"121
{
[; ;lcd.c: 120: void Lcd_Write_Int(unsigned int a)
[; ;lcd.c: 121: {
[e :U _Lcd_Write_Int ]
"120
[v _a `ui ~T0 @X0 1 r1 ]
"121
[f ]
"122
[v _temp `uc ~T0 @X0 -> 16 `i a ]
[; ;lcd.c: 122: char temp[16];
[; ;lcd.c: 123: utoa((char*)temp, a, 10);
"123
[e ( _utoa (3 , , &U _temp _a -> 10 `i ]
[; ;lcd.c: 124: Lcd_Write_String(temp);
"124
[e ( _Lcd_Write_String (1 &U _temp ]
[; ;lcd.c: 125: }
"125
[e :UE 50 ]
}
"127
[v _Lcd_Shift_Right `(v ~T0 @X0 1 ef ]
"128
{
[; ;lcd.c: 127: void Lcd_Shift_Right()
[; ;lcd.c: 128: {
[e :U _Lcd_Shift_Right ]
[f ]
[; ;lcd.c: 129: Lcd_Cmd(0x01);
"129
[e ( _Lcd_Cmd (1 -> -> 1 `i `uc ]
[; ;lcd.c: 130: Lcd_Cmd(0x0C);
"130
[e ( _Lcd_Cmd (1 -> -> 12 `i `uc ]
[; ;lcd.c: 131: }
"131
[e :UE 51 ]
}
"133
[v _Lcd_Shift_Left `(v ~T0 @X0 1 ef ]
"134
{
[; ;lcd.c: 133: void Lcd_Shift_Left()
[; ;lcd.c: 134: {
[e :U _Lcd_Shift_Left ]
[f ]
[; ;lcd.c: 135: Lcd_Cmd(0x01);
"135
[e ( _Lcd_Cmd (1 -> -> 1 `i `uc ]
[; ;lcd.c: 136: Lcd_Cmd(0x08);
"136
[e ( _Lcd_Cmd (1 -> -> 8 `i `uc ]
[; ;lcd.c: 137: }
"137
[e :UE 52 ]
}
